
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Agent
 * 
 */
export type Agent = $Result.DefaultSelection<Prisma.$AgentPayload>
/**
 * Model AgentState
 * 
 */
export type AgentState = $Result.DefaultSelection<Prisma.$AgentStatePayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model ProjectContext
 * 
 */
export type ProjectContext = $Result.DefaultSelection<Prisma.$ProjectContextPayload>
/**
 * Model LearningProfile
 * 
 */
export type LearningProfile = $Result.DefaultSelection<Prisma.$LearningProfilePayload>
/**
 * Model LearningSkill
 * 
 */
export type LearningSkill = $Result.DefaultSelection<Prisma.$LearningSkillPayload>
/**
 * Model LearningSpecialization
 * 
 */
export type LearningSpecialization = $Result.DefaultSelection<Prisma.$LearningSpecializationPayload>
/**
 * Model LearningMetric
 * 
 */
export type LearningMetric = $Result.DefaultSelection<Prisma.$LearningMetricPayload>
/**
 * Model CollaborationSession
 * 
 */
export type CollaborationSession = $Result.DefaultSelection<Prisma.$CollaborationSessionPayload>
/**
 * Model CollaborationParticipant
 * 
 */
export type CollaborationParticipant = $Result.DefaultSelection<Prisma.$CollaborationParticipantPayload>
/**
 * Model CollaborationMessage
 * 
 */
export type CollaborationMessage = $Result.DefaultSelection<Prisma.$CollaborationMessagePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Projects
 * const projects = await prisma.project.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.agent`: Exposes CRUD operations for the **Agent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agents
    * const agents = await prisma.agent.findMany()
    * ```
    */
  get agent(): Prisma.AgentDelegate<ExtArgs>;

  /**
   * `prisma.agentState`: Exposes CRUD operations for the **AgentState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentStates
    * const agentStates = await prisma.agentState.findMany()
    * ```
    */
  get agentState(): Prisma.AgentStateDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.projectContext`: Exposes CRUD operations for the **ProjectContext** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectContexts
    * const projectContexts = await prisma.projectContext.findMany()
    * ```
    */
  get projectContext(): Prisma.ProjectContextDelegate<ExtArgs>;

  /**
   * `prisma.learningProfile`: Exposes CRUD operations for the **LearningProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningProfiles
    * const learningProfiles = await prisma.learningProfile.findMany()
    * ```
    */
  get learningProfile(): Prisma.LearningProfileDelegate<ExtArgs>;

  /**
   * `prisma.learningSkill`: Exposes CRUD operations for the **LearningSkill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningSkills
    * const learningSkills = await prisma.learningSkill.findMany()
    * ```
    */
  get learningSkill(): Prisma.LearningSkillDelegate<ExtArgs>;

  /**
   * `prisma.learningSpecialization`: Exposes CRUD operations for the **LearningSpecialization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningSpecializations
    * const learningSpecializations = await prisma.learningSpecialization.findMany()
    * ```
    */
  get learningSpecialization(): Prisma.LearningSpecializationDelegate<ExtArgs>;

  /**
   * `prisma.learningMetric`: Exposes CRUD operations for the **LearningMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningMetrics
    * const learningMetrics = await prisma.learningMetric.findMany()
    * ```
    */
  get learningMetric(): Prisma.LearningMetricDelegate<ExtArgs>;

  /**
   * `prisma.collaborationSession`: Exposes CRUD operations for the **CollaborationSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollaborationSessions
    * const collaborationSessions = await prisma.collaborationSession.findMany()
    * ```
    */
  get collaborationSession(): Prisma.CollaborationSessionDelegate<ExtArgs>;

  /**
   * `prisma.collaborationParticipant`: Exposes CRUD operations for the **CollaborationParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollaborationParticipants
    * const collaborationParticipants = await prisma.collaborationParticipant.findMany()
    * ```
    */
  get collaborationParticipant(): Prisma.CollaborationParticipantDelegate<ExtArgs>;

  /**
   * `prisma.collaborationMessage`: Exposes CRUD operations for the **CollaborationMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollaborationMessages
    * const collaborationMessages = await prisma.collaborationMessage.findMany()
    * ```
    */
  get collaborationMessage(): Prisma.CollaborationMessageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Project: 'Project',
    Agent: 'Agent',
    AgentState: 'AgentState',
    Task: 'Task',
    ProjectContext: 'ProjectContext',
    LearningProfile: 'LearningProfile',
    LearningSkill: 'LearningSkill',
    LearningSpecialization: 'LearningSpecialization',
    LearningMetric: 'LearningMetric',
    CollaborationSession: 'CollaborationSession',
    CollaborationParticipant: 'CollaborationParticipant',
    CollaborationMessage: 'CollaborationMessage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "project" | "agent" | "agentState" | "task" | "projectContext" | "learningProfile" | "learningSkill" | "learningSpecialization" | "learningMetric" | "collaborationSession" | "collaborationParticipant" | "collaborationMessage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Agent: {
        payload: Prisma.$AgentPayload<ExtArgs>
        fields: Prisma.AgentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findFirst: {
            args: Prisma.AgentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findMany: {
            args: Prisma.AgentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          create: {
            args: Prisma.AgentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          createMany: {
            args: Prisma.AgentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          delete: {
            args: Prisma.AgentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          update: {
            args: Prisma.AgentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          deleteMany: {
            args: Prisma.AgentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          aggregate: {
            args: Prisma.AgentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgent>
          }
          groupBy: {
            args: Prisma.AgentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentCountArgs<ExtArgs>
            result: $Utils.Optional<AgentCountAggregateOutputType> | number
          }
        }
      }
      AgentState: {
        payload: Prisma.$AgentStatePayload<ExtArgs>
        fields: Prisma.AgentStateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentStateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentStateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>
          }
          findFirst: {
            args: Prisma.AgentStateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentStateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>
          }
          findMany: {
            args: Prisma.AgentStateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>[]
          }
          create: {
            args: Prisma.AgentStateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>
          }
          createMany: {
            args: Prisma.AgentStateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentStateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>[]
          }
          delete: {
            args: Prisma.AgentStateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>
          }
          update: {
            args: Prisma.AgentStateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>
          }
          deleteMany: {
            args: Prisma.AgentStateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentStateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentStateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentStatePayload>
          }
          aggregate: {
            args: Prisma.AgentStateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentState>
          }
          groupBy: {
            args: Prisma.AgentStateGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentStateGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentStateCountArgs<ExtArgs>
            result: $Utils.Optional<AgentStateCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      ProjectContext: {
        payload: Prisma.$ProjectContextPayload<ExtArgs>
        fields: Prisma.ProjectContextFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectContextFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectContextFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>
          }
          findFirst: {
            args: Prisma.ProjectContextFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectContextFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>
          }
          findMany: {
            args: Prisma.ProjectContextFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>[]
          }
          create: {
            args: Prisma.ProjectContextCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>
          }
          createMany: {
            args: Prisma.ProjectContextCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectContextCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>[]
          }
          delete: {
            args: Prisma.ProjectContextDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>
          }
          update: {
            args: Prisma.ProjectContextUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>
          }
          deleteMany: {
            args: Prisma.ProjectContextDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectContextUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectContextUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectContextPayload>
          }
          aggregate: {
            args: Prisma.ProjectContextAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectContext>
          }
          groupBy: {
            args: Prisma.ProjectContextGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectContextGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectContextCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectContextCountAggregateOutputType> | number
          }
        }
      }
      LearningProfile: {
        payload: Prisma.$LearningProfilePayload<ExtArgs>
        fields: Prisma.LearningProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LearningProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LearningProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>
          }
          findFirst: {
            args: Prisma.LearningProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LearningProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>
          }
          findMany: {
            args: Prisma.LearningProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>[]
          }
          create: {
            args: Prisma.LearningProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>
          }
          createMany: {
            args: Prisma.LearningProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LearningProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>[]
          }
          delete: {
            args: Prisma.LearningProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>
          }
          update: {
            args: Prisma.LearningProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>
          }
          deleteMany: {
            args: Prisma.LearningProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LearningProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LearningProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningProfilePayload>
          }
          aggregate: {
            args: Prisma.LearningProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLearningProfile>
          }
          groupBy: {
            args: Prisma.LearningProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<LearningProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.LearningProfileCountArgs<ExtArgs>
            result: $Utils.Optional<LearningProfileCountAggregateOutputType> | number
          }
        }
      }
      LearningSkill: {
        payload: Prisma.$LearningSkillPayload<ExtArgs>
        fields: Prisma.LearningSkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LearningSkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LearningSkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>
          }
          findFirst: {
            args: Prisma.LearningSkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LearningSkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>
          }
          findMany: {
            args: Prisma.LearningSkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>[]
          }
          create: {
            args: Prisma.LearningSkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>
          }
          createMany: {
            args: Prisma.LearningSkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LearningSkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>[]
          }
          delete: {
            args: Prisma.LearningSkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>
          }
          update: {
            args: Prisma.LearningSkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>
          }
          deleteMany: {
            args: Prisma.LearningSkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LearningSkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LearningSkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSkillPayload>
          }
          aggregate: {
            args: Prisma.LearningSkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLearningSkill>
          }
          groupBy: {
            args: Prisma.LearningSkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<LearningSkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.LearningSkillCountArgs<ExtArgs>
            result: $Utils.Optional<LearningSkillCountAggregateOutputType> | number
          }
        }
      }
      LearningSpecialization: {
        payload: Prisma.$LearningSpecializationPayload<ExtArgs>
        fields: Prisma.LearningSpecializationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LearningSpecializationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LearningSpecializationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>
          }
          findFirst: {
            args: Prisma.LearningSpecializationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LearningSpecializationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>
          }
          findMany: {
            args: Prisma.LearningSpecializationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>[]
          }
          create: {
            args: Prisma.LearningSpecializationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>
          }
          createMany: {
            args: Prisma.LearningSpecializationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LearningSpecializationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>[]
          }
          delete: {
            args: Prisma.LearningSpecializationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>
          }
          update: {
            args: Prisma.LearningSpecializationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>
          }
          deleteMany: {
            args: Prisma.LearningSpecializationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LearningSpecializationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LearningSpecializationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningSpecializationPayload>
          }
          aggregate: {
            args: Prisma.LearningSpecializationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLearningSpecialization>
          }
          groupBy: {
            args: Prisma.LearningSpecializationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LearningSpecializationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LearningSpecializationCountArgs<ExtArgs>
            result: $Utils.Optional<LearningSpecializationCountAggregateOutputType> | number
          }
        }
      }
      LearningMetric: {
        payload: Prisma.$LearningMetricPayload<ExtArgs>
        fields: Prisma.LearningMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LearningMetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LearningMetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>
          }
          findFirst: {
            args: Prisma.LearningMetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LearningMetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>
          }
          findMany: {
            args: Prisma.LearningMetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>[]
          }
          create: {
            args: Prisma.LearningMetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>
          }
          createMany: {
            args: Prisma.LearningMetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LearningMetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>[]
          }
          delete: {
            args: Prisma.LearningMetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>
          }
          update: {
            args: Prisma.LearningMetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>
          }
          deleteMany: {
            args: Prisma.LearningMetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LearningMetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LearningMetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningMetricPayload>
          }
          aggregate: {
            args: Prisma.LearningMetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLearningMetric>
          }
          groupBy: {
            args: Prisma.LearningMetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<LearningMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.LearningMetricCountArgs<ExtArgs>
            result: $Utils.Optional<LearningMetricCountAggregateOutputType> | number
          }
        }
      }
      CollaborationSession: {
        payload: Prisma.$CollaborationSessionPayload<ExtArgs>
        fields: Prisma.CollaborationSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollaborationSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollaborationSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>
          }
          findFirst: {
            args: Prisma.CollaborationSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollaborationSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>
          }
          findMany: {
            args: Prisma.CollaborationSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>[]
          }
          create: {
            args: Prisma.CollaborationSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>
          }
          createMany: {
            args: Prisma.CollaborationSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollaborationSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>[]
          }
          delete: {
            args: Prisma.CollaborationSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>
          }
          update: {
            args: Prisma.CollaborationSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>
          }
          deleteMany: {
            args: Prisma.CollaborationSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollaborationSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollaborationSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationSessionPayload>
          }
          aggregate: {
            args: Prisma.CollaborationSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollaborationSession>
          }
          groupBy: {
            args: Prisma.CollaborationSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollaborationSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollaborationSessionCountArgs<ExtArgs>
            result: $Utils.Optional<CollaborationSessionCountAggregateOutputType> | number
          }
        }
      }
      CollaborationParticipant: {
        payload: Prisma.$CollaborationParticipantPayload<ExtArgs>
        fields: Prisma.CollaborationParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollaborationParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollaborationParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>
          }
          findFirst: {
            args: Prisma.CollaborationParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollaborationParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>
          }
          findMany: {
            args: Prisma.CollaborationParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>[]
          }
          create: {
            args: Prisma.CollaborationParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>
          }
          createMany: {
            args: Prisma.CollaborationParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollaborationParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>[]
          }
          delete: {
            args: Prisma.CollaborationParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>
          }
          update: {
            args: Prisma.CollaborationParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>
          }
          deleteMany: {
            args: Prisma.CollaborationParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollaborationParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollaborationParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationParticipantPayload>
          }
          aggregate: {
            args: Prisma.CollaborationParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollaborationParticipant>
          }
          groupBy: {
            args: Prisma.CollaborationParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollaborationParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollaborationParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<CollaborationParticipantCountAggregateOutputType> | number
          }
        }
      }
      CollaborationMessage: {
        payload: Prisma.$CollaborationMessagePayload<ExtArgs>
        fields: Prisma.CollaborationMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollaborationMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollaborationMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>
          }
          findFirst: {
            args: Prisma.CollaborationMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollaborationMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>
          }
          findMany: {
            args: Prisma.CollaborationMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>[]
          }
          create: {
            args: Prisma.CollaborationMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>
          }
          createMany: {
            args: Prisma.CollaborationMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollaborationMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>[]
          }
          delete: {
            args: Prisma.CollaborationMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>
          }
          update: {
            args: Prisma.CollaborationMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>
          }
          deleteMany: {
            args: Prisma.CollaborationMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollaborationMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollaborationMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationMessagePayload>
          }
          aggregate: {
            args: Prisma.CollaborationMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollaborationMessage>
          }
          groupBy: {
            args: Prisma.CollaborationMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollaborationMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollaborationMessageCountArgs<ExtArgs>
            result: $Utils.Optional<CollaborationMessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    agents: number
    tasks: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agents?: boolean | ProjectCountOutputTypeCountAgentsArgs
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountAgentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type AgentCountOutputType
   */

  export type AgentCountOutputType = {
    tasks: number
  }

  export type AgentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | AgentCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentCountOutputType
     */
    select?: AgentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type LearningProfileCountOutputType
   */

  export type LearningProfileCountOutputType = {
    skills: number
    specializations: number
    metrics: number
  }

  export type LearningProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skills?: boolean | LearningProfileCountOutputTypeCountSkillsArgs
    specializations?: boolean | LearningProfileCountOutputTypeCountSpecializationsArgs
    metrics?: boolean | LearningProfileCountOutputTypeCountMetricsArgs
  }

  // Custom InputTypes
  /**
   * LearningProfileCountOutputType without action
   */
  export type LearningProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfileCountOutputType
     */
    select?: LearningProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LearningProfileCountOutputType without action
   */
  export type LearningProfileCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningSkillWhereInput
  }

  /**
   * LearningProfileCountOutputType without action
   */
  export type LearningProfileCountOutputTypeCountSpecializationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningSpecializationWhereInput
  }

  /**
   * LearningProfileCountOutputType without action
   */
  export type LearningProfileCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningMetricWhereInput
  }


  /**
   * Count Type CollaborationSessionCountOutputType
   */

  export type CollaborationSessionCountOutputType = {
    participants: number
    messages: number
  }

  export type CollaborationSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | CollaborationSessionCountOutputTypeCountParticipantsArgs
    messages?: boolean | CollaborationSessionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * CollaborationSessionCountOutputType without action
   */
  export type CollaborationSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSessionCountOutputType
     */
    select?: CollaborationSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CollaborationSessionCountOutputType without action
   */
  export type CollaborationSessionCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationParticipantWhereInput
  }

  /**
   * CollaborationSessionCountOutputType without action
   */
  export type CollaborationSessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationMessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    repository: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    repository: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    repository: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    repository?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    repository?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    repository?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string
    status: string
    repository: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    repository?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agents?: boolean | Project$agentsArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    context?: boolean | Project$contextArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    repository?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    repository?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agents?: boolean | Project$agentsArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    context?: boolean | Project$contextArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      agents: Prisma.$AgentPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      context: Prisma.$ProjectContextPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      status: string
      repository: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agents<T extends Project$agentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$agentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany"> | Null>
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    context<T extends Project$contextArgs<ExtArgs> = {}>(args?: Subset<T, Project$contextArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'String'>
    readonly repository: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.agents
   */
  export type Project$agentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    cursor?: AgentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Project.context
   */
  export type Project$contextArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    where?: ProjectContextWhereInput
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Agent
   */

  export type AggregateAgent = {
    _count: AgentCountAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  export type AgentMinAggregateOutputType = {
    id: string | null
    name: string | null
    role: string | null
    provider: string | null
    model: string | null
    systemPrompt: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    role: string | null
    provider: string | null
    model: string | null
    systemPrompt: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgentCountAggregateOutputType = {
    id: number
    name: number
    role: number
    provider: number
    model: number
    systemPrompt: number
    projectId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgentMinAggregateInputType = {
    id?: true
    name?: true
    role?: true
    provider?: true
    model?: true
    systemPrompt?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgentMaxAggregateInputType = {
    id?: true
    name?: true
    role?: true
    provider?: true
    model?: true
    systemPrompt?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgentCountAggregateInputType = {
    id?: true
    name?: true
    role?: true
    provider?: true
    model?: true
    systemPrompt?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agent to aggregate.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agents
    **/
    _count?: true | AgentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentMaxAggregateInputType
  }

  export type GetAgentAggregateType<T extends AgentAggregateArgs> = {
        [P in keyof T & keyof AggregateAgent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgent[P]>
      : GetScalarType<T[P], AggregateAgent[P]>
  }




  export type AgentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithAggregationInput | AgentOrderByWithAggregationInput[]
    by: AgentScalarFieldEnum[] | AgentScalarFieldEnum
    having?: AgentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentCountAggregateInputType | true
    _min?: AgentMinAggregateInputType
    _max?: AgentMaxAggregateInputType
  }

  export type AgentGroupByOutputType = {
    id: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    projectId: string
    createdAt: Date
    updatedAt: Date
    _count: AgentCountAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  type GetAgentGroupByPayload<T extends AgentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentGroupByOutputType[P]>
            : GetScalarType<T[P], AgentGroupByOutputType[P]>
        }
      >
    >


  export type AgentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    provider?: boolean
    model?: boolean
    systemPrompt?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tasks?: boolean | Agent$tasksArgs<ExtArgs>
    state?: boolean | Agent$stateArgs<ExtArgs>
    learningProfile?: boolean | Agent$learningProfileArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    provider?: boolean
    model?: boolean
    systemPrompt?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectScalar = {
    id?: boolean
    name?: boolean
    role?: boolean
    provider?: boolean
    model?: boolean
    systemPrompt?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tasks?: boolean | Agent$tasksArgs<ExtArgs>
    state?: boolean | Agent$stateArgs<ExtArgs>
    learningProfile?: boolean | Agent$learningProfileArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $AgentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agent"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      state: Prisma.$AgentStatePayload<ExtArgs> | null
      learningProfile: Prisma.$LearningProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      role: string
      provider: string
      model: string
      systemPrompt: string
      projectId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["agent"]>
    composites: {}
  }

  type AgentGetPayload<S extends boolean | null | undefined | AgentDefaultArgs> = $Result.GetResult<Prisma.$AgentPayload, S>

  type AgentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentCountAggregateInputType | true
    }

  export interface AgentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agent'], meta: { name: 'Agent' } }
    /**
     * Find zero or one Agent that matches the filter.
     * @param {AgentFindUniqueArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentFindUniqueArgs>(args: SelectSubset<T, AgentFindUniqueArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentFindUniqueOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentFindFirstArgs>(args?: SelectSubset<T, AgentFindFirstArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agents
     * const agents = await prisma.agent.findMany()
     * 
     * // Get first 10 Agents
     * const agents = await prisma.agent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentWithIdOnly = await prisma.agent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentFindManyArgs>(args?: SelectSubset<T, AgentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agent.
     * @param {AgentCreateArgs} args - Arguments to create a Agent.
     * @example
     * // Create one Agent
     * const Agent = await prisma.agent.create({
     *   data: {
     *     // ... data to create a Agent
     *   }
     * })
     * 
     */
    create<T extends AgentCreateArgs>(args: SelectSubset<T, AgentCreateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agents.
     * @param {AgentCreateManyArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentCreateManyArgs>(args?: SelectSubset<T, AgentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agents and returns the data saved in the database.
     * @param {AgentCreateManyAndReturnArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agents and only return the `id`
     * const agentWithIdOnly = await prisma.agent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Agent.
     * @param {AgentDeleteArgs} args - Arguments to delete one Agent.
     * @example
     * // Delete one Agent
     * const Agent = await prisma.agent.delete({
     *   where: {
     *     // ... filter to delete one Agent
     *   }
     * })
     * 
     */
    delete<T extends AgentDeleteArgs>(args: SelectSubset<T, AgentDeleteArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agent.
     * @param {AgentUpdateArgs} args - Arguments to update one Agent.
     * @example
     * // Update one Agent
     * const agent = await prisma.agent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentUpdateArgs>(args: SelectSubset<T, AgentUpdateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agents.
     * @param {AgentDeleteManyArgs} args - Arguments to filter Agents to delete.
     * @example
     * // Delete a few Agents
     * const { count } = await prisma.agent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentDeleteManyArgs>(args?: SelectSubset<T, AgentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentUpdateManyArgs>(args: SelectSubset<T, AgentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agent.
     * @param {AgentUpsertArgs} args - Arguments to update or create a Agent.
     * @example
     * // Update or create a Agent
     * const agent = await prisma.agent.upsert({
     *   create: {
     *     // ... data to create a Agent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agent we want to update
     *   }
     * })
     */
    upsert<T extends AgentUpsertArgs>(args: SelectSubset<T, AgentUpsertArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentCountArgs} args - Arguments to filter Agents to count.
     * @example
     * // Count the number of Agents
     * const count = await prisma.agent.count({
     *   where: {
     *     // ... the filter for the Agents we want to count
     *   }
     * })
    **/
    count<T extends AgentCountArgs>(
      args?: Subset<T, AgentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentAggregateArgs>(args: Subset<T, AgentAggregateArgs>): Prisma.PrismaPromise<GetAgentAggregateType<T>>

    /**
     * Group by Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentGroupByArgs['orderBy'] }
        : { orderBy?: AgentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agent model
   */
  readonly fields: AgentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tasks<T extends Agent$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Agent$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    state<T extends Agent$stateArgs<ExtArgs> = {}>(args?: Subset<T, Agent$stateArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    learningProfile<T extends Agent$learningProfileArgs<ExtArgs> = {}>(args?: Subset<T, Agent$learningProfileArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agent model
   */ 
  interface AgentFieldRefs {
    readonly id: FieldRef<"Agent", 'String'>
    readonly name: FieldRef<"Agent", 'String'>
    readonly role: FieldRef<"Agent", 'String'>
    readonly provider: FieldRef<"Agent", 'String'>
    readonly model: FieldRef<"Agent", 'String'>
    readonly systemPrompt: FieldRef<"Agent", 'String'>
    readonly projectId: FieldRef<"Agent", 'String'>
    readonly createdAt: FieldRef<"Agent", 'DateTime'>
    readonly updatedAt: FieldRef<"Agent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Agent findUnique
   */
  export type AgentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findUniqueOrThrow
   */
  export type AgentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findFirst
   */
  export type AgentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findFirstOrThrow
   */
  export type AgentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findMany
   */
  export type AgentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agents to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent create
   */
  export type AgentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to create a Agent.
     */
    data: XOR<AgentCreateInput, AgentUncheckedCreateInput>
  }

  /**
   * Agent createMany
   */
  export type AgentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agent createManyAndReturn
   */
  export type AgentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agent update
   */
  export type AgentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to update a Agent.
     */
    data: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
    /**
     * Choose, which Agent to update.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent updateMany
   */
  export type AgentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
  }

  /**
   * Agent upsert
   */
  export type AgentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The filter to search for the Agent to update in case it exists.
     */
    where: AgentWhereUniqueInput
    /**
     * In case the Agent found by the `where` argument doesn't exist, create a new Agent with this data.
     */
    create: XOR<AgentCreateInput, AgentUncheckedCreateInput>
    /**
     * In case the Agent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
  }

  /**
   * Agent delete
   */
  export type AgentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter which Agent to delete.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent deleteMany
   */
  export type AgentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agents to delete
     */
    where?: AgentWhereInput
  }

  /**
   * Agent.tasks
   */
  export type Agent$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Agent.state
   */
  export type Agent$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    where?: AgentStateWhereInput
  }

  /**
   * Agent.learningProfile
   */
  export type Agent$learningProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    where?: LearningProfileWhereInput
  }

  /**
   * Agent without action
   */
  export type AgentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
  }


  /**
   * Model AgentState
   */

  export type AggregateAgentState = {
    _count: AgentStateCountAggregateOutputType | null
    _min: AgentStateMinAggregateOutputType | null
    _max: AgentStateMaxAggregateOutputType | null
  }

  export type AgentStateMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    context: string | null
    shortTerm: string | null
    longTerm: string | null
    currentTask: string | null
    updatedAt: Date | null
  }

  export type AgentStateMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    context: string | null
    shortTerm: string | null
    longTerm: string | null
    currentTask: string | null
    updatedAt: Date | null
  }

  export type AgentStateCountAggregateOutputType = {
    id: number
    agentId: number
    context: number
    shortTerm: number
    longTerm: number
    currentTask: number
    updatedAt: number
    _all: number
  }


  export type AgentStateMinAggregateInputType = {
    id?: true
    agentId?: true
    context?: true
    shortTerm?: true
    longTerm?: true
    currentTask?: true
    updatedAt?: true
  }

  export type AgentStateMaxAggregateInputType = {
    id?: true
    agentId?: true
    context?: true
    shortTerm?: true
    longTerm?: true
    currentTask?: true
    updatedAt?: true
  }

  export type AgentStateCountAggregateInputType = {
    id?: true
    agentId?: true
    context?: true
    shortTerm?: true
    longTerm?: true
    currentTask?: true
    updatedAt?: true
    _all?: true
  }

  export type AgentStateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentState to aggregate.
     */
    where?: AgentStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentStates to fetch.
     */
    orderBy?: AgentStateOrderByWithRelationInput | AgentStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentStates
    **/
    _count?: true | AgentStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentStateMaxAggregateInputType
  }

  export type GetAgentStateAggregateType<T extends AgentStateAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentState[P]>
      : GetScalarType<T[P], AggregateAgentState[P]>
  }




  export type AgentStateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentStateWhereInput
    orderBy?: AgentStateOrderByWithAggregationInput | AgentStateOrderByWithAggregationInput[]
    by: AgentStateScalarFieldEnum[] | AgentStateScalarFieldEnum
    having?: AgentStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentStateCountAggregateInputType | true
    _min?: AgentStateMinAggregateInputType
    _max?: AgentStateMaxAggregateInputType
  }

  export type AgentStateGroupByOutputType = {
    id: string
    agentId: string
    context: string
    shortTerm: string
    longTerm: string
    currentTask: string | null
    updatedAt: Date
    _count: AgentStateCountAggregateOutputType | null
    _min: AgentStateMinAggregateOutputType | null
    _max: AgentStateMaxAggregateOutputType | null
  }

  type GetAgentStateGroupByPayload<T extends AgentStateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentStateGroupByOutputType[P]>
            : GetScalarType<T[P], AgentStateGroupByOutputType[P]>
        }
      >
    >


  export type AgentStateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    context?: boolean
    shortTerm?: boolean
    longTerm?: boolean
    currentTask?: boolean
    updatedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentState"]>

  export type AgentStateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    context?: boolean
    shortTerm?: boolean
    longTerm?: boolean
    currentTask?: boolean
    updatedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentState"]>

  export type AgentStateSelectScalar = {
    id?: boolean
    agentId?: boolean
    context?: boolean
    shortTerm?: boolean
    longTerm?: boolean
    currentTask?: boolean
    updatedAt?: boolean
  }

  export type AgentStateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type AgentStateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $AgentStatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentState"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      context: string
      shortTerm: string
      longTerm: string
      currentTask: string | null
      updatedAt: Date
    }, ExtArgs["result"]["agentState"]>
    composites: {}
  }

  type AgentStateGetPayload<S extends boolean | null | undefined | AgentStateDefaultArgs> = $Result.GetResult<Prisma.$AgentStatePayload, S>

  type AgentStateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentStateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentStateCountAggregateInputType | true
    }

  export interface AgentStateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentState'], meta: { name: 'AgentState' } }
    /**
     * Find zero or one AgentState that matches the filter.
     * @param {AgentStateFindUniqueArgs} args - Arguments to find a AgentState
     * @example
     * // Get one AgentState
     * const agentState = await prisma.agentState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentStateFindUniqueArgs>(args: SelectSubset<T, AgentStateFindUniqueArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AgentState that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentStateFindUniqueOrThrowArgs} args - Arguments to find a AgentState
     * @example
     * // Get one AgentState
     * const agentState = await prisma.agentState.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentStateFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AgentState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentStateFindFirstArgs} args - Arguments to find a AgentState
     * @example
     * // Get one AgentState
     * const agentState = await prisma.agentState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentStateFindFirstArgs>(args?: SelectSubset<T, AgentStateFindFirstArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AgentState that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentStateFindFirstOrThrowArgs} args - Arguments to find a AgentState
     * @example
     * // Get one AgentState
     * const agentState = await prisma.agentState.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentStateFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentStateFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AgentStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentStateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentStates
     * const agentStates = await prisma.agentState.findMany()
     * 
     * // Get first 10 AgentStates
     * const agentStates = await prisma.agentState.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentStateWithIdOnly = await prisma.agentState.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentStateFindManyArgs>(args?: SelectSubset<T, AgentStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AgentState.
     * @param {AgentStateCreateArgs} args - Arguments to create a AgentState.
     * @example
     * // Create one AgentState
     * const AgentState = await prisma.agentState.create({
     *   data: {
     *     // ... data to create a AgentState
     *   }
     * })
     * 
     */
    create<T extends AgentStateCreateArgs>(args: SelectSubset<T, AgentStateCreateArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AgentStates.
     * @param {AgentStateCreateManyArgs} args - Arguments to create many AgentStates.
     * @example
     * // Create many AgentStates
     * const agentState = await prisma.agentState.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentStateCreateManyArgs>(args?: SelectSubset<T, AgentStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgentStates and returns the data saved in the database.
     * @param {AgentStateCreateManyAndReturnArgs} args - Arguments to create many AgentStates.
     * @example
     * // Create many AgentStates
     * const agentState = await prisma.agentState.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgentStates and only return the `id`
     * const agentStateWithIdOnly = await prisma.agentState.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentStateCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AgentState.
     * @param {AgentStateDeleteArgs} args - Arguments to delete one AgentState.
     * @example
     * // Delete one AgentState
     * const AgentState = await prisma.agentState.delete({
     *   where: {
     *     // ... filter to delete one AgentState
     *   }
     * })
     * 
     */
    delete<T extends AgentStateDeleteArgs>(args: SelectSubset<T, AgentStateDeleteArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AgentState.
     * @param {AgentStateUpdateArgs} args - Arguments to update one AgentState.
     * @example
     * // Update one AgentState
     * const agentState = await prisma.agentState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentStateUpdateArgs>(args: SelectSubset<T, AgentStateUpdateArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AgentStates.
     * @param {AgentStateDeleteManyArgs} args - Arguments to filter AgentStates to delete.
     * @example
     * // Delete a few AgentStates
     * const { count } = await prisma.agentState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentStateDeleteManyArgs>(args?: SelectSubset<T, AgentStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentStates
     * const agentState = await prisma.agentState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentStateUpdateManyArgs>(args: SelectSubset<T, AgentStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgentState.
     * @param {AgentStateUpsertArgs} args - Arguments to update or create a AgentState.
     * @example
     * // Update or create a AgentState
     * const agentState = await prisma.agentState.upsert({
     *   create: {
     *     // ... data to create a AgentState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentState we want to update
     *   }
     * })
     */
    upsert<T extends AgentStateUpsertArgs>(args: SelectSubset<T, AgentStateUpsertArgs<ExtArgs>>): Prisma__AgentStateClient<$Result.GetResult<Prisma.$AgentStatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AgentStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentStateCountArgs} args - Arguments to filter AgentStates to count.
     * @example
     * // Count the number of AgentStates
     * const count = await prisma.agentState.count({
     *   where: {
     *     // ... the filter for the AgentStates we want to count
     *   }
     * })
    **/
    count<T extends AgentStateCountArgs>(
      args?: Subset<T, AgentStateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentStateAggregateArgs>(args: Subset<T, AgentStateAggregateArgs>): Prisma.PrismaPromise<GetAgentStateAggregateType<T>>

    /**
     * Group by AgentState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentStateGroupByArgs['orderBy'] }
        : { orderBy?: AgentStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentState model
   */
  readonly fields: AgentStateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentStateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentState model
   */ 
  interface AgentStateFieldRefs {
    readonly id: FieldRef<"AgentState", 'String'>
    readonly agentId: FieldRef<"AgentState", 'String'>
    readonly context: FieldRef<"AgentState", 'String'>
    readonly shortTerm: FieldRef<"AgentState", 'String'>
    readonly longTerm: FieldRef<"AgentState", 'String'>
    readonly currentTask: FieldRef<"AgentState", 'String'>
    readonly updatedAt: FieldRef<"AgentState", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AgentState findUnique
   */
  export type AgentStateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * Filter, which AgentState to fetch.
     */
    where: AgentStateWhereUniqueInput
  }

  /**
   * AgentState findUniqueOrThrow
   */
  export type AgentStateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * Filter, which AgentState to fetch.
     */
    where: AgentStateWhereUniqueInput
  }

  /**
   * AgentState findFirst
   */
  export type AgentStateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * Filter, which AgentState to fetch.
     */
    where?: AgentStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentStates to fetch.
     */
    orderBy?: AgentStateOrderByWithRelationInput | AgentStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentStates.
     */
    cursor?: AgentStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentStates.
     */
    distinct?: AgentStateScalarFieldEnum | AgentStateScalarFieldEnum[]
  }

  /**
   * AgentState findFirstOrThrow
   */
  export type AgentStateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * Filter, which AgentState to fetch.
     */
    where?: AgentStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentStates to fetch.
     */
    orderBy?: AgentStateOrderByWithRelationInput | AgentStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentStates.
     */
    cursor?: AgentStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentStates.
     */
    distinct?: AgentStateScalarFieldEnum | AgentStateScalarFieldEnum[]
  }

  /**
   * AgentState findMany
   */
  export type AgentStateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * Filter, which AgentStates to fetch.
     */
    where?: AgentStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentStates to fetch.
     */
    orderBy?: AgentStateOrderByWithRelationInput | AgentStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentStates.
     */
    cursor?: AgentStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentStates.
     */
    skip?: number
    distinct?: AgentStateScalarFieldEnum | AgentStateScalarFieldEnum[]
  }

  /**
   * AgentState create
   */
  export type AgentStateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentState.
     */
    data: XOR<AgentStateCreateInput, AgentStateUncheckedCreateInput>
  }

  /**
   * AgentState createMany
   */
  export type AgentStateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentStates.
     */
    data: AgentStateCreateManyInput | AgentStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentState createManyAndReturn
   */
  export type AgentStateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AgentStates.
     */
    data: AgentStateCreateManyInput | AgentStateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgentState update
   */
  export type AgentStateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentState.
     */
    data: XOR<AgentStateUpdateInput, AgentStateUncheckedUpdateInput>
    /**
     * Choose, which AgentState to update.
     */
    where: AgentStateWhereUniqueInput
  }

  /**
   * AgentState updateMany
   */
  export type AgentStateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentStates.
     */
    data: XOR<AgentStateUpdateManyMutationInput, AgentStateUncheckedUpdateManyInput>
    /**
     * Filter which AgentStates to update
     */
    where?: AgentStateWhereInput
  }

  /**
   * AgentState upsert
   */
  export type AgentStateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentState to update in case it exists.
     */
    where: AgentStateWhereUniqueInput
    /**
     * In case the AgentState found by the `where` argument doesn't exist, create a new AgentState with this data.
     */
    create: XOR<AgentStateCreateInput, AgentStateUncheckedCreateInput>
    /**
     * In case the AgentState was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentStateUpdateInput, AgentStateUncheckedUpdateInput>
  }

  /**
   * AgentState delete
   */
  export type AgentStateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
    /**
     * Filter which AgentState to delete.
     */
    where: AgentStateWhereUniqueInput
  }

  /**
   * AgentState deleteMany
   */
  export type AgentStateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentStates to delete
     */
    where?: AgentStateWhereInput
  }

  /**
   * AgentState without action
   */
  export type AgentStateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentState
     */
    select?: AgentStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentStateInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    dependencies: string | null
    projectId: string | null
    agentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    dependencies: string | null
    projectId: string | null
    agentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    dependencies: number
    projectId: number
    agentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dependencies?: true
    projectId?: true
    agentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dependencies?: true
    projectId?: true
    agentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dependencies?: true
    projectId?: true
    agentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string
    status: string
    priority: string
    dependencies: string
    projectId: string
    agentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dependencies?: boolean
    projectId?: boolean
    agentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    agent?: boolean | Task$agentArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dependencies?: boolean
    projectId?: boolean
    agentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    agent?: boolean | Task$agentArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dependencies?: boolean
    projectId?: boolean
    agentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    agent?: boolean | Task$agentArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    agent?: boolean | Task$agentArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      agent: Prisma.$AgentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      status: string
      priority: string
      dependencies: string
      projectId: string
      agentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    agent<T extends Task$agentArgs<ExtArgs> = {}>(args?: Subset<T, Task$agentArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'String'>
    readonly priority: FieldRef<"Task", 'String'>
    readonly dependencies: FieldRef<"Task", 'String'>
    readonly projectId: FieldRef<"Task", 'String'>
    readonly agentId: FieldRef<"Task", 'String'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task.agent
   */
  export type Task$agentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model ProjectContext
   */

  export type AggregateProjectContext = {
    _count: ProjectContextCountAggregateOutputType | null
    _min: ProjectContextMinAggregateOutputType | null
    _max: ProjectContextMaxAggregateOutputType | null
  }

  export type ProjectContextMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    architecture: string | null
    technical: string | null
    requirements: string | null
    dependencies: string | null
    updatedAt: Date | null
  }

  export type ProjectContextMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    architecture: string | null
    technical: string | null
    requirements: string | null
    dependencies: string | null
    updatedAt: Date | null
  }

  export type ProjectContextCountAggregateOutputType = {
    id: number
    projectId: number
    architecture: number
    technical: number
    requirements: number
    dependencies: number
    updatedAt: number
    _all: number
  }


  export type ProjectContextMinAggregateInputType = {
    id?: true
    projectId?: true
    architecture?: true
    technical?: true
    requirements?: true
    dependencies?: true
    updatedAt?: true
  }

  export type ProjectContextMaxAggregateInputType = {
    id?: true
    projectId?: true
    architecture?: true
    technical?: true
    requirements?: true
    dependencies?: true
    updatedAt?: true
  }

  export type ProjectContextCountAggregateInputType = {
    id?: true
    projectId?: true
    architecture?: true
    technical?: true
    requirements?: true
    dependencies?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectContextAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectContext to aggregate.
     */
    where?: ProjectContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectContexts to fetch.
     */
    orderBy?: ProjectContextOrderByWithRelationInput | ProjectContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectContexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectContexts
    **/
    _count?: true | ProjectContextCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectContextMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectContextMaxAggregateInputType
  }

  export type GetProjectContextAggregateType<T extends ProjectContextAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectContext]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectContext[P]>
      : GetScalarType<T[P], AggregateProjectContext[P]>
  }




  export type ProjectContextGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectContextWhereInput
    orderBy?: ProjectContextOrderByWithAggregationInput | ProjectContextOrderByWithAggregationInput[]
    by: ProjectContextScalarFieldEnum[] | ProjectContextScalarFieldEnum
    having?: ProjectContextScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectContextCountAggregateInputType | true
    _min?: ProjectContextMinAggregateInputType
    _max?: ProjectContextMaxAggregateInputType
  }

  export type ProjectContextGroupByOutputType = {
    id: string
    projectId: string
    architecture: string
    technical: string
    requirements: string
    dependencies: string
    updatedAt: Date
    _count: ProjectContextCountAggregateOutputType | null
    _min: ProjectContextMinAggregateOutputType | null
    _max: ProjectContextMaxAggregateOutputType | null
  }

  type GetProjectContextGroupByPayload<T extends ProjectContextGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectContextGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectContextGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectContextGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectContextGroupByOutputType[P]>
        }
      >
    >


  export type ProjectContextSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    architecture?: boolean
    technical?: boolean
    requirements?: boolean
    dependencies?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectContext"]>

  export type ProjectContextSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    architecture?: boolean
    technical?: boolean
    requirements?: boolean
    dependencies?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectContext"]>

  export type ProjectContextSelectScalar = {
    id?: boolean
    projectId?: boolean
    architecture?: boolean
    technical?: boolean
    requirements?: boolean
    dependencies?: boolean
    updatedAt?: boolean
  }

  export type ProjectContextInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectContextIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectContextPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectContext"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      architecture: string
      technical: string
      requirements: string
      dependencies: string
      updatedAt: Date
    }, ExtArgs["result"]["projectContext"]>
    composites: {}
  }

  type ProjectContextGetPayload<S extends boolean | null | undefined | ProjectContextDefaultArgs> = $Result.GetResult<Prisma.$ProjectContextPayload, S>

  type ProjectContextCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectContextFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectContextCountAggregateInputType | true
    }

  export interface ProjectContextDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectContext'], meta: { name: 'ProjectContext' } }
    /**
     * Find zero or one ProjectContext that matches the filter.
     * @param {ProjectContextFindUniqueArgs} args - Arguments to find a ProjectContext
     * @example
     * // Get one ProjectContext
     * const projectContext = await prisma.projectContext.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectContextFindUniqueArgs>(args: SelectSubset<T, ProjectContextFindUniqueArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectContext that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectContextFindUniqueOrThrowArgs} args - Arguments to find a ProjectContext
     * @example
     * // Get one ProjectContext
     * const projectContext = await prisma.projectContext.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectContextFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectContextFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectContext that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectContextFindFirstArgs} args - Arguments to find a ProjectContext
     * @example
     * // Get one ProjectContext
     * const projectContext = await prisma.projectContext.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectContextFindFirstArgs>(args?: SelectSubset<T, ProjectContextFindFirstArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectContext that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectContextFindFirstOrThrowArgs} args - Arguments to find a ProjectContext
     * @example
     * // Get one ProjectContext
     * const projectContext = await prisma.projectContext.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectContextFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectContextFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectContexts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectContextFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectContexts
     * const projectContexts = await prisma.projectContext.findMany()
     * 
     * // Get first 10 ProjectContexts
     * const projectContexts = await prisma.projectContext.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectContextWithIdOnly = await prisma.projectContext.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectContextFindManyArgs>(args?: SelectSubset<T, ProjectContextFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectContext.
     * @param {ProjectContextCreateArgs} args - Arguments to create a ProjectContext.
     * @example
     * // Create one ProjectContext
     * const ProjectContext = await prisma.projectContext.create({
     *   data: {
     *     // ... data to create a ProjectContext
     *   }
     * })
     * 
     */
    create<T extends ProjectContextCreateArgs>(args: SelectSubset<T, ProjectContextCreateArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectContexts.
     * @param {ProjectContextCreateManyArgs} args - Arguments to create many ProjectContexts.
     * @example
     * // Create many ProjectContexts
     * const projectContext = await prisma.projectContext.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectContextCreateManyArgs>(args?: SelectSubset<T, ProjectContextCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectContexts and returns the data saved in the database.
     * @param {ProjectContextCreateManyAndReturnArgs} args - Arguments to create many ProjectContexts.
     * @example
     * // Create many ProjectContexts
     * const projectContext = await prisma.projectContext.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectContexts and only return the `id`
     * const projectContextWithIdOnly = await prisma.projectContext.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectContextCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectContextCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectContext.
     * @param {ProjectContextDeleteArgs} args - Arguments to delete one ProjectContext.
     * @example
     * // Delete one ProjectContext
     * const ProjectContext = await prisma.projectContext.delete({
     *   where: {
     *     // ... filter to delete one ProjectContext
     *   }
     * })
     * 
     */
    delete<T extends ProjectContextDeleteArgs>(args: SelectSubset<T, ProjectContextDeleteArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectContext.
     * @param {ProjectContextUpdateArgs} args - Arguments to update one ProjectContext.
     * @example
     * // Update one ProjectContext
     * const projectContext = await prisma.projectContext.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectContextUpdateArgs>(args: SelectSubset<T, ProjectContextUpdateArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectContexts.
     * @param {ProjectContextDeleteManyArgs} args - Arguments to filter ProjectContexts to delete.
     * @example
     * // Delete a few ProjectContexts
     * const { count } = await prisma.projectContext.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectContextDeleteManyArgs>(args?: SelectSubset<T, ProjectContextDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectContexts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectContextUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectContexts
     * const projectContext = await prisma.projectContext.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectContextUpdateManyArgs>(args: SelectSubset<T, ProjectContextUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectContext.
     * @param {ProjectContextUpsertArgs} args - Arguments to update or create a ProjectContext.
     * @example
     * // Update or create a ProjectContext
     * const projectContext = await prisma.projectContext.upsert({
     *   create: {
     *     // ... data to create a ProjectContext
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectContext we want to update
     *   }
     * })
     */
    upsert<T extends ProjectContextUpsertArgs>(args: SelectSubset<T, ProjectContextUpsertArgs<ExtArgs>>): Prisma__ProjectContextClient<$Result.GetResult<Prisma.$ProjectContextPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectContexts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectContextCountArgs} args - Arguments to filter ProjectContexts to count.
     * @example
     * // Count the number of ProjectContexts
     * const count = await prisma.projectContext.count({
     *   where: {
     *     // ... the filter for the ProjectContexts we want to count
     *   }
     * })
    **/
    count<T extends ProjectContextCountArgs>(
      args?: Subset<T, ProjectContextCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectContextCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectContext.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectContextAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectContextAggregateArgs>(args: Subset<T, ProjectContextAggregateArgs>): Prisma.PrismaPromise<GetProjectContextAggregateType<T>>

    /**
     * Group by ProjectContext.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectContextGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectContextGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectContextGroupByArgs['orderBy'] }
        : { orderBy?: ProjectContextGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectContextGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectContextGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectContext model
   */
  readonly fields: ProjectContextFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectContext.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectContextClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectContext model
   */ 
  interface ProjectContextFieldRefs {
    readonly id: FieldRef<"ProjectContext", 'String'>
    readonly projectId: FieldRef<"ProjectContext", 'String'>
    readonly architecture: FieldRef<"ProjectContext", 'String'>
    readonly technical: FieldRef<"ProjectContext", 'String'>
    readonly requirements: FieldRef<"ProjectContext", 'String'>
    readonly dependencies: FieldRef<"ProjectContext", 'String'>
    readonly updatedAt: FieldRef<"ProjectContext", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProjectContext findUnique
   */
  export type ProjectContextFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * Filter, which ProjectContext to fetch.
     */
    where: ProjectContextWhereUniqueInput
  }

  /**
   * ProjectContext findUniqueOrThrow
   */
  export type ProjectContextFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * Filter, which ProjectContext to fetch.
     */
    where: ProjectContextWhereUniqueInput
  }

  /**
   * ProjectContext findFirst
   */
  export type ProjectContextFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * Filter, which ProjectContext to fetch.
     */
    where?: ProjectContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectContexts to fetch.
     */
    orderBy?: ProjectContextOrderByWithRelationInput | ProjectContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectContexts.
     */
    cursor?: ProjectContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectContexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectContexts.
     */
    distinct?: ProjectContextScalarFieldEnum | ProjectContextScalarFieldEnum[]
  }

  /**
   * ProjectContext findFirstOrThrow
   */
  export type ProjectContextFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * Filter, which ProjectContext to fetch.
     */
    where?: ProjectContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectContexts to fetch.
     */
    orderBy?: ProjectContextOrderByWithRelationInput | ProjectContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectContexts.
     */
    cursor?: ProjectContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectContexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectContexts.
     */
    distinct?: ProjectContextScalarFieldEnum | ProjectContextScalarFieldEnum[]
  }

  /**
   * ProjectContext findMany
   */
  export type ProjectContextFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * Filter, which ProjectContexts to fetch.
     */
    where?: ProjectContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectContexts to fetch.
     */
    orderBy?: ProjectContextOrderByWithRelationInput | ProjectContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectContexts.
     */
    cursor?: ProjectContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectContexts.
     */
    skip?: number
    distinct?: ProjectContextScalarFieldEnum | ProjectContextScalarFieldEnum[]
  }

  /**
   * ProjectContext create
   */
  export type ProjectContextCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectContext.
     */
    data: XOR<ProjectContextCreateInput, ProjectContextUncheckedCreateInput>
  }

  /**
   * ProjectContext createMany
   */
  export type ProjectContextCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectContexts.
     */
    data: ProjectContextCreateManyInput | ProjectContextCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectContext createManyAndReturn
   */
  export type ProjectContextCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectContexts.
     */
    data: ProjectContextCreateManyInput | ProjectContextCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectContext update
   */
  export type ProjectContextUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectContext.
     */
    data: XOR<ProjectContextUpdateInput, ProjectContextUncheckedUpdateInput>
    /**
     * Choose, which ProjectContext to update.
     */
    where: ProjectContextWhereUniqueInput
  }

  /**
   * ProjectContext updateMany
   */
  export type ProjectContextUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectContexts.
     */
    data: XOR<ProjectContextUpdateManyMutationInput, ProjectContextUncheckedUpdateManyInput>
    /**
     * Filter which ProjectContexts to update
     */
    where?: ProjectContextWhereInput
  }

  /**
   * ProjectContext upsert
   */
  export type ProjectContextUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectContext to update in case it exists.
     */
    where: ProjectContextWhereUniqueInput
    /**
     * In case the ProjectContext found by the `where` argument doesn't exist, create a new ProjectContext with this data.
     */
    create: XOR<ProjectContextCreateInput, ProjectContextUncheckedCreateInput>
    /**
     * In case the ProjectContext was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectContextUpdateInput, ProjectContextUncheckedUpdateInput>
  }

  /**
   * ProjectContext delete
   */
  export type ProjectContextDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
    /**
     * Filter which ProjectContext to delete.
     */
    where: ProjectContextWhereUniqueInput
  }

  /**
   * ProjectContext deleteMany
   */
  export type ProjectContextDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectContexts to delete
     */
    where?: ProjectContextWhereInput
  }

  /**
   * ProjectContext without action
   */
  export type ProjectContextDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectContext
     */
    select?: ProjectContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectContextInclude<ExtArgs> | null
  }


  /**
   * Model LearningProfile
   */

  export type AggregateLearningProfile = {
    _count: LearningProfileCountAggregateOutputType | null
    _avg: LearningProfileAvgAggregateOutputType | null
    _sum: LearningProfileSumAggregateOutputType | null
    _min: LearningProfileMinAggregateOutputType | null
    _max: LearningProfileMaxAggregateOutputType | null
  }

  export type LearningProfileAvgAggregateOutputType = {
    totalTasks: number | null
    successfulTasks: number | null
    failedTasks: number | null
    learningRate: number | null
  }

  export type LearningProfileSumAggregateOutputType = {
    totalTasks: number | null
    successfulTasks: number | null
    failedTasks: number | null
    learningRate: number | null
  }

  export type LearningProfileMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    totalTasks: number | null
    successfulTasks: number | null
    failedTasks: number | null
    averageMetrics: string | null
    learningRate: number | null
    lastUpdated: Date | null
  }

  export type LearningProfileMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    totalTasks: number | null
    successfulTasks: number | null
    failedTasks: number | null
    averageMetrics: string | null
    learningRate: number | null
    lastUpdated: Date | null
  }

  export type LearningProfileCountAggregateOutputType = {
    id: number
    agentId: number
    totalTasks: number
    successfulTasks: number
    failedTasks: number
    averageMetrics: number
    learningRate: number
    lastUpdated: number
    _all: number
  }


  export type LearningProfileAvgAggregateInputType = {
    totalTasks?: true
    successfulTasks?: true
    failedTasks?: true
    learningRate?: true
  }

  export type LearningProfileSumAggregateInputType = {
    totalTasks?: true
    successfulTasks?: true
    failedTasks?: true
    learningRate?: true
  }

  export type LearningProfileMinAggregateInputType = {
    id?: true
    agentId?: true
    totalTasks?: true
    successfulTasks?: true
    failedTasks?: true
    averageMetrics?: true
    learningRate?: true
    lastUpdated?: true
  }

  export type LearningProfileMaxAggregateInputType = {
    id?: true
    agentId?: true
    totalTasks?: true
    successfulTasks?: true
    failedTasks?: true
    averageMetrics?: true
    learningRate?: true
    lastUpdated?: true
  }

  export type LearningProfileCountAggregateInputType = {
    id?: true
    agentId?: true
    totalTasks?: true
    successfulTasks?: true
    failedTasks?: true
    averageMetrics?: true
    learningRate?: true
    lastUpdated?: true
    _all?: true
  }

  export type LearningProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningProfile to aggregate.
     */
    where?: LearningProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningProfiles to fetch.
     */
    orderBy?: LearningProfileOrderByWithRelationInput | LearningProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LearningProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningProfiles
    **/
    _count?: true | LearningProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LearningProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LearningProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningProfileMaxAggregateInputType
  }

  export type GetLearningProfileAggregateType<T extends LearningProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningProfile[P]>
      : GetScalarType<T[P], AggregateLearningProfile[P]>
  }




  export type LearningProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningProfileWhereInput
    orderBy?: LearningProfileOrderByWithAggregationInput | LearningProfileOrderByWithAggregationInput[]
    by: LearningProfileScalarFieldEnum[] | LearningProfileScalarFieldEnum
    having?: LearningProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningProfileCountAggregateInputType | true
    _avg?: LearningProfileAvgAggregateInputType
    _sum?: LearningProfileSumAggregateInputType
    _min?: LearningProfileMinAggregateInputType
    _max?: LearningProfileMaxAggregateInputType
  }

  export type LearningProfileGroupByOutputType = {
    id: string
    agentId: string
    totalTasks: number
    successfulTasks: number
    failedTasks: number
    averageMetrics: string
    learningRate: number
    lastUpdated: Date
    _count: LearningProfileCountAggregateOutputType | null
    _avg: LearningProfileAvgAggregateOutputType | null
    _sum: LearningProfileSumAggregateOutputType | null
    _min: LearningProfileMinAggregateOutputType | null
    _max: LearningProfileMaxAggregateOutputType | null
  }

  type GetLearningProfileGroupByPayload<T extends LearningProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LearningProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningProfileGroupByOutputType[P]>
            : GetScalarType<T[P], LearningProfileGroupByOutputType[P]>
        }
      >
    >


  export type LearningProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    totalTasks?: boolean
    successfulTasks?: boolean
    failedTasks?: boolean
    averageMetrics?: boolean
    learningRate?: boolean
    lastUpdated?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    skills?: boolean | LearningProfile$skillsArgs<ExtArgs>
    specializations?: boolean | LearningProfile$specializationsArgs<ExtArgs>
    metrics?: boolean | LearningProfile$metricsArgs<ExtArgs>
    _count?: boolean | LearningProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningProfile"]>

  export type LearningProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    totalTasks?: boolean
    successfulTasks?: boolean
    failedTasks?: boolean
    averageMetrics?: boolean
    learningRate?: boolean
    lastUpdated?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningProfile"]>

  export type LearningProfileSelectScalar = {
    id?: boolean
    agentId?: boolean
    totalTasks?: boolean
    successfulTasks?: boolean
    failedTasks?: boolean
    averageMetrics?: boolean
    learningRate?: boolean
    lastUpdated?: boolean
  }

  export type LearningProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    skills?: boolean | LearningProfile$skillsArgs<ExtArgs>
    specializations?: boolean | LearningProfile$specializationsArgs<ExtArgs>
    metrics?: boolean | LearningProfile$metricsArgs<ExtArgs>
    _count?: boolean | LearningProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LearningProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $LearningProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LearningProfile"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
      skills: Prisma.$LearningSkillPayload<ExtArgs>[]
      specializations: Prisma.$LearningSpecializationPayload<ExtArgs>[]
      metrics: Prisma.$LearningMetricPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      totalTasks: number
      successfulTasks: number
      failedTasks: number
      averageMetrics: string
      learningRate: number
      lastUpdated: Date
    }, ExtArgs["result"]["learningProfile"]>
    composites: {}
  }

  type LearningProfileGetPayload<S extends boolean | null | undefined | LearningProfileDefaultArgs> = $Result.GetResult<Prisma.$LearningProfilePayload, S>

  type LearningProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LearningProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LearningProfileCountAggregateInputType | true
    }

  export interface LearningProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LearningProfile'], meta: { name: 'LearningProfile' } }
    /**
     * Find zero or one LearningProfile that matches the filter.
     * @param {LearningProfileFindUniqueArgs} args - Arguments to find a LearningProfile
     * @example
     * // Get one LearningProfile
     * const learningProfile = await prisma.learningProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LearningProfileFindUniqueArgs>(args: SelectSubset<T, LearningProfileFindUniqueArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LearningProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LearningProfileFindUniqueOrThrowArgs} args - Arguments to find a LearningProfile
     * @example
     * // Get one LearningProfile
     * const learningProfile = await prisma.learningProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LearningProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, LearningProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LearningProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningProfileFindFirstArgs} args - Arguments to find a LearningProfile
     * @example
     * // Get one LearningProfile
     * const learningProfile = await prisma.learningProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LearningProfileFindFirstArgs>(args?: SelectSubset<T, LearningProfileFindFirstArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LearningProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningProfileFindFirstOrThrowArgs} args - Arguments to find a LearningProfile
     * @example
     * // Get one LearningProfile
     * const learningProfile = await prisma.learningProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LearningProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, LearningProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LearningProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningProfiles
     * const learningProfiles = await prisma.learningProfile.findMany()
     * 
     * // Get first 10 LearningProfiles
     * const learningProfiles = await prisma.learningProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningProfileWithIdOnly = await prisma.learningProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LearningProfileFindManyArgs>(args?: SelectSubset<T, LearningProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LearningProfile.
     * @param {LearningProfileCreateArgs} args - Arguments to create a LearningProfile.
     * @example
     * // Create one LearningProfile
     * const LearningProfile = await prisma.learningProfile.create({
     *   data: {
     *     // ... data to create a LearningProfile
     *   }
     * })
     * 
     */
    create<T extends LearningProfileCreateArgs>(args: SelectSubset<T, LearningProfileCreateArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LearningProfiles.
     * @param {LearningProfileCreateManyArgs} args - Arguments to create many LearningProfiles.
     * @example
     * // Create many LearningProfiles
     * const learningProfile = await prisma.learningProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LearningProfileCreateManyArgs>(args?: SelectSubset<T, LearningProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LearningProfiles and returns the data saved in the database.
     * @param {LearningProfileCreateManyAndReturnArgs} args - Arguments to create many LearningProfiles.
     * @example
     * // Create many LearningProfiles
     * const learningProfile = await prisma.learningProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LearningProfiles and only return the `id`
     * const learningProfileWithIdOnly = await prisma.learningProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LearningProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, LearningProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LearningProfile.
     * @param {LearningProfileDeleteArgs} args - Arguments to delete one LearningProfile.
     * @example
     * // Delete one LearningProfile
     * const LearningProfile = await prisma.learningProfile.delete({
     *   where: {
     *     // ... filter to delete one LearningProfile
     *   }
     * })
     * 
     */
    delete<T extends LearningProfileDeleteArgs>(args: SelectSubset<T, LearningProfileDeleteArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LearningProfile.
     * @param {LearningProfileUpdateArgs} args - Arguments to update one LearningProfile.
     * @example
     * // Update one LearningProfile
     * const learningProfile = await prisma.learningProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LearningProfileUpdateArgs>(args: SelectSubset<T, LearningProfileUpdateArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LearningProfiles.
     * @param {LearningProfileDeleteManyArgs} args - Arguments to filter LearningProfiles to delete.
     * @example
     * // Delete a few LearningProfiles
     * const { count } = await prisma.learningProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LearningProfileDeleteManyArgs>(args?: SelectSubset<T, LearningProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningProfiles
     * const learningProfile = await prisma.learningProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LearningProfileUpdateManyArgs>(args: SelectSubset<T, LearningProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LearningProfile.
     * @param {LearningProfileUpsertArgs} args - Arguments to update or create a LearningProfile.
     * @example
     * // Update or create a LearningProfile
     * const learningProfile = await prisma.learningProfile.upsert({
     *   create: {
     *     // ... data to create a LearningProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningProfile we want to update
     *   }
     * })
     */
    upsert<T extends LearningProfileUpsertArgs>(args: SelectSubset<T, LearningProfileUpsertArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LearningProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningProfileCountArgs} args - Arguments to filter LearningProfiles to count.
     * @example
     * // Count the number of LearningProfiles
     * const count = await prisma.learningProfile.count({
     *   where: {
     *     // ... the filter for the LearningProfiles we want to count
     *   }
     * })
    **/
    count<T extends LearningProfileCountArgs>(
      args?: Subset<T, LearningProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningProfileAggregateArgs>(args: Subset<T, LearningProfileAggregateArgs>): Prisma.PrismaPromise<GetLearningProfileAggregateType<T>>

    /**
     * Group by LearningProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningProfileGroupByArgs['orderBy'] }
        : { orderBy?: LearningProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LearningProfile model
   */
  readonly fields: LearningProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LearningProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    skills<T extends LearningProfile$skillsArgs<ExtArgs> = {}>(args?: Subset<T, LearningProfile$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "findMany"> | Null>
    specializations<T extends LearningProfile$specializationsArgs<ExtArgs> = {}>(args?: Subset<T, LearningProfile$specializationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "findMany"> | Null>
    metrics<T extends LearningProfile$metricsArgs<ExtArgs> = {}>(args?: Subset<T, LearningProfile$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LearningProfile model
   */ 
  interface LearningProfileFieldRefs {
    readonly id: FieldRef<"LearningProfile", 'String'>
    readonly agentId: FieldRef<"LearningProfile", 'String'>
    readonly totalTasks: FieldRef<"LearningProfile", 'Int'>
    readonly successfulTasks: FieldRef<"LearningProfile", 'Int'>
    readonly failedTasks: FieldRef<"LearningProfile", 'Int'>
    readonly averageMetrics: FieldRef<"LearningProfile", 'String'>
    readonly learningRate: FieldRef<"LearningProfile", 'Float'>
    readonly lastUpdated: FieldRef<"LearningProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LearningProfile findUnique
   */
  export type LearningProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * Filter, which LearningProfile to fetch.
     */
    where: LearningProfileWhereUniqueInput
  }

  /**
   * LearningProfile findUniqueOrThrow
   */
  export type LearningProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * Filter, which LearningProfile to fetch.
     */
    where: LearningProfileWhereUniqueInput
  }

  /**
   * LearningProfile findFirst
   */
  export type LearningProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * Filter, which LearningProfile to fetch.
     */
    where?: LearningProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningProfiles to fetch.
     */
    orderBy?: LearningProfileOrderByWithRelationInput | LearningProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningProfiles.
     */
    cursor?: LearningProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningProfiles.
     */
    distinct?: LearningProfileScalarFieldEnum | LearningProfileScalarFieldEnum[]
  }

  /**
   * LearningProfile findFirstOrThrow
   */
  export type LearningProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * Filter, which LearningProfile to fetch.
     */
    where?: LearningProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningProfiles to fetch.
     */
    orderBy?: LearningProfileOrderByWithRelationInput | LearningProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningProfiles.
     */
    cursor?: LearningProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningProfiles.
     */
    distinct?: LearningProfileScalarFieldEnum | LearningProfileScalarFieldEnum[]
  }

  /**
   * LearningProfile findMany
   */
  export type LearningProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * Filter, which LearningProfiles to fetch.
     */
    where?: LearningProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningProfiles to fetch.
     */
    orderBy?: LearningProfileOrderByWithRelationInput | LearningProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningProfiles.
     */
    cursor?: LearningProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningProfiles.
     */
    skip?: number
    distinct?: LearningProfileScalarFieldEnum | LearningProfileScalarFieldEnum[]
  }

  /**
   * LearningProfile create
   */
  export type LearningProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a LearningProfile.
     */
    data: XOR<LearningProfileCreateInput, LearningProfileUncheckedCreateInput>
  }

  /**
   * LearningProfile createMany
   */
  export type LearningProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LearningProfiles.
     */
    data: LearningProfileCreateManyInput | LearningProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LearningProfile createManyAndReturn
   */
  export type LearningProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LearningProfiles.
     */
    data: LearningProfileCreateManyInput | LearningProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningProfile update
   */
  export type LearningProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a LearningProfile.
     */
    data: XOR<LearningProfileUpdateInput, LearningProfileUncheckedUpdateInput>
    /**
     * Choose, which LearningProfile to update.
     */
    where: LearningProfileWhereUniqueInput
  }

  /**
   * LearningProfile updateMany
   */
  export type LearningProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LearningProfiles.
     */
    data: XOR<LearningProfileUpdateManyMutationInput, LearningProfileUncheckedUpdateManyInput>
    /**
     * Filter which LearningProfiles to update
     */
    where?: LearningProfileWhereInput
  }

  /**
   * LearningProfile upsert
   */
  export type LearningProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the LearningProfile to update in case it exists.
     */
    where: LearningProfileWhereUniqueInput
    /**
     * In case the LearningProfile found by the `where` argument doesn't exist, create a new LearningProfile with this data.
     */
    create: XOR<LearningProfileCreateInput, LearningProfileUncheckedCreateInput>
    /**
     * In case the LearningProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LearningProfileUpdateInput, LearningProfileUncheckedUpdateInput>
  }

  /**
   * LearningProfile delete
   */
  export type LearningProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
    /**
     * Filter which LearningProfile to delete.
     */
    where: LearningProfileWhereUniqueInput
  }

  /**
   * LearningProfile deleteMany
   */
  export type LearningProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningProfiles to delete
     */
    where?: LearningProfileWhereInput
  }

  /**
   * LearningProfile.skills
   */
  export type LearningProfile$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    where?: LearningSkillWhereInput
    orderBy?: LearningSkillOrderByWithRelationInput | LearningSkillOrderByWithRelationInput[]
    cursor?: LearningSkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningSkillScalarFieldEnum | LearningSkillScalarFieldEnum[]
  }

  /**
   * LearningProfile.specializations
   */
  export type LearningProfile$specializationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    where?: LearningSpecializationWhereInput
    orderBy?: LearningSpecializationOrderByWithRelationInput | LearningSpecializationOrderByWithRelationInput[]
    cursor?: LearningSpecializationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningSpecializationScalarFieldEnum | LearningSpecializationScalarFieldEnum[]
  }

  /**
   * LearningProfile.metrics
   */
  export type LearningProfile$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    where?: LearningMetricWhereInput
    orderBy?: LearningMetricOrderByWithRelationInput | LearningMetricOrderByWithRelationInput[]
    cursor?: LearningMetricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningMetricScalarFieldEnum | LearningMetricScalarFieldEnum[]
  }

  /**
   * LearningProfile without action
   */
  export type LearningProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningProfile
     */
    select?: LearningProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningProfileInclude<ExtArgs> | null
  }


  /**
   * Model LearningSkill
   */

  export type AggregateLearningSkill = {
    _count: LearningSkillCountAggregateOutputType | null
    _min: LearningSkillMinAggregateOutputType | null
    _max: LearningSkillMaxAggregateOutputType | null
  }

  export type LearningSkillMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    data: string | null
  }

  export type LearningSkillMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    data: string | null
  }

  export type LearningSkillCountAggregateOutputType = {
    id: number
    profileId: number
    data: number
    _all: number
  }


  export type LearningSkillMinAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
  }

  export type LearningSkillMaxAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
  }

  export type LearningSkillCountAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
    _all?: true
  }

  export type LearningSkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningSkill to aggregate.
     */
    where?: LearningSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSkills to fetch.
     */
    orderBy?: LearningSkillOrderByWithRelationInput | LearningSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LearningSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningSkills
    **/
    _count?: true | LearningSkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningSkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningSkillMaxAggregateInputType
  }

  export type GetLearningSkillAggregateType<T extends LearningSkillAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningSkill[P]>
      : GetScalarType<T[P], AggregateLearningSkill[P]>
  }




  export type LearningSkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningSkillWhereInput
    orderBy?: LearningSkillOrderByWithAggregationInput | LearningSkillOrderByWithAggregationInput[]
    by: LearningSkillScalarFieldEnum[] | LearningSkillScalarFieldEnum
    having?: LearningSkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningSkillCountAggregateInputType | true
    _min?: LearningSkillMinAggregateInputType
    _max?: LearningSkillMaxAggregateInputType
  }

  export type LearningSkillGroupByOutputType = {
    id: string
    profileId: string
    data: string
    _count: LearningSkillCountAggregateOutputType | null
    _min: LearningSkillMinAggregateOutputType | null
    _max: LearningSkillMaxAggregateOutputType | null
  }

  type GetLearningSkillGroupByPayload<T extends LearningSkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LearningSkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningSkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningSkillGroupByOutputType[P]>
            : GetScalarType<T[P], LearningSkillGroupByOutputType[P]>
        }
      >
    >


  export type LearningSkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    data?: boolean
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningSkill"]>

  export type LearningSkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    data?: boolean
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningSkill"]>

  export type LearningSkillSelectScalar = {
    id?: boolean
    profileId?: boolean
    data?: boolean
  }

  export type LearningSkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }
  export type LearningSkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }

  export type $LearningSkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LearningSkill"
    objects: {
      profile: Prisma.$LearningProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      data: string
    }, ExtArgs["result"]["learningSkill"]>
    composites: {}
  }

  type LearningSkillGetPayload<S extends boolean | null | undefined | LearningSkillDefaultArgs> = $Result.GetResult<Prisma.$LearningSkillPayload, S>

  type LearningSkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LearningSkillFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LearningSkillCountAggregateInputType | true
    }

  export interface LearningSkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LearningSkill'], meta: { name: 'LearningSkill' } }
    /**
     * Find zero or one LearningSkill that matches the filter.
     * @param {LearningSkillFindUniqueArgs} args - Arguments to find a LearningSkill
     * @example
     * // Get one LearningSkill
     * const learningSkill = await prisma.learningSkill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LearningSkillFindUniqueArgs>(args: SelectSubset<T, LearningSkillFindUniqueArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LearningSkill that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LearningSkillFindUniqueOrThrowArgs} args - Arguments to find a LearningSkill
     * @example
     * // Get one LearningSkill
     * const learningSkill = await prisma.learningSkill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LearningSkillFindUniqueOrThrowArgs>(args: SelectSubset<T, LearningSkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LearningSkill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSkillFindFirstArgs} args - Arguments to find a LearningSkill
     * @example
     * // Get one LearningSkill
     * const learningSkill = await prisma.learningSkill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LearningSkillFindFirstArgs>(args?: SelectSubset<T, LearningSkillFindFirstArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LearningSkill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSkillFindFirstOrThrowArgs} args - Arguments to find a LearningSkill
     * @example
     * // Get one LearningSkill
     * const learningSkill = await prisma.learningSkill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LearningSkillFindFirstOrThrowArgs>(args?: SelectSubset<T, LearningSkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LearningSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningSkills
     * const learningSkills = await prisma.learningSkill.findMany()
     * 
     * // Get first 10 LearningSkills
     * const learningSkills = await prisma.learningSkill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningSkillWithIdOnly = await prisma.learningSkill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LearningSkillFindManyArgs>(args?: SelectSubset<T, LearningSkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LearningSkill.
     * @param {LearningSkillCreateArgs} args - Arguments to create a LearningSkill.
     * @example
     * // Create one LearningSkill
     * const LearningSkill = await prisma.learningSkill.create({
     *   data: {
     *     // ... data to create a LearningSkill
     *   }
     * })
     * 
     */
    create<T extends LearningSkillCreateArgs>(args: SelectSubset<T, LearningSkillCreateArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LearningSkills.
     * @param {LearningSkillCreateManyArgs} args - Arguments to create many LearningSkills.
     * @example
     * // Create many LearningSkills
     * const learningSkill = await prisma.learningSkill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LearningSkillCreateManyArgs>(args?: SelectSubset<T, LearningSkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LearningSkills and returns the data saved in the database.
     * @param {LearningSkillCreateManyAndReturnArgs} args - Arguments to create many LearningSkills.
     * @example
     * // Create many LearningSkills
     * const learningSkill = await prisma.learningSkill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LearningSkills and only return the `id`
     * const learningSkillWithIdOnly = await prisma.learningSkill.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LearningSkillCreateManyAndReturnArgs>(args?: SelectSubset<T, LearningSkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LearningSkill.
     * @param {LearningSkillDeleteArgs} args - Arguments to delete one LearningSkill.
     * @example
     * // Delete one LearningSkill
     * const LearningSkill = await prisma.learningSkill.delete({
     *   where: {
     *     // ... filter to delete one LearningSkill
     *   }
     * })
     * 
     */
    delete<T extends LearningSkillDeleteArgs>(args: SelectSubset<T, LearningSkillDeleteArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LearningSkill.
     * @param {LearningSkillUpdateArgs} args - Arguments to update one LearningSkill.
     * @example
     * // Update one LearningSkill
     * const learningSkill = await prisma.learningSkill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LearningSkillUpdateArgs>(args: SelectSubset<T, LearningSkillUpdateArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LearningSkills.
     * @param {LearningSkillDeleteManyArgs} args - Arguments to filter LearningSkills to delete.
     * @example
     * // Delete a few LearningSkills
     * const { count } = await prisma.learningSkill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LearningSkillDeleteManyArgs>(args?: SelectSubset<T, LearningSkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningSkills
     * const learningSkill = await prisma.learningSkill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LearningSkillUpdateManyArgs>(args: SelectSubset<T, LearningSkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LearningSkill.
     * @param {LearningSkillUpsertArgs} args - Arguments to update or create a LearningSkill.
     * @example
     * // Update or create a LearningSkill
     * const learningSkill = await prisma.learningSkill.upsert({
     *   create: {
     *     // ... data to create a LearningSkill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningSkill we want to update
     *   }
     * })
     */
    upsert<T extends LearningSkillUpsertArgs>(args: SelectSubset<T, LearningSkillUpsertArgs<ExtArgs>>): Prisma__LearningSkillClient<$Result.GetResult<Prisma.$LearningSkillPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LearningSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSkillCountArgs} args - Arguments to filter LearningSkills to count.
     * @example
     * // Count the number of LearningSkills
     * const count = await prisma.learningSkill.count({
     *   where: {
     *     // ... the filter for the LearningSkills we want to count
     *   }
     * })
    **/
    count<T extends LearningSkillCountArgs>(
      args?: Subset<T, LearningSkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningSkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningSkillAggregateArgs>(args: Subset<T, LearningSkillAggregateArgs>): Prisma.PrismaPromise<GetLearningSkillAggregateType<T>>

    /**
     * Group by LearningSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningSkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningSkillGroupByArgs['orderBy'] }
        : { orderBy?: LearningSkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningSkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LearningSkill model
   */
  readonly fields: LearningSkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningSkill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LearningSkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends LearningProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LearningProfileDefaultArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LearningSkill model
   */ 
  interface LearningSkillFieldRefs {
    readonly id: FieldRef<"LearningSkill", 'String'>
    readonly profileId: FieldRef<"LearningSkill", 'String'>
    readonly data: FieldRef<"LearningSkill", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LearningSkill findUnique
   */
  export type LearningSkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * Filter, which LearningSkill to fetch.
     */
    where: LearningSkillWhereUniqueInput
  }

  /**
   * LearningSkill findUniqueOrThrow
   */
  export type LearningSkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * Filter, which LearningSkill to fetch.
     */
    where: LearningSkillWhereUniqueInput
  }

  /**
   * LearningSkill findFirst
   */
  export type LearningSkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * Filter, which LearningSkill to fetch.
     */
    where?: LearningSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSkills to fetch.
     */
    orderBy?: LearningSkillOrderByWithRelationInput | LearningSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningSkills.
     */
    cursor?: LearningSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningSkills.
     */
    distinct?: LearningSkillScalarFieldEnum | LearningSkillScalarFieldEnum[]
  }

  /**
   * LearningSkill findFirstOrThrow
   */
  export type LearningSkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * Filter, which LearningSkill to fetch.
     */
    where?: LearningSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSkills to fetch.
     */
    orderBy?: LearningSkillOrderByWithRelationInput | LearningSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningSkills.
     */
    cursor?: LearningSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningSkills.
     */
    distinct?: LearningSkillScalarFieldEnum | LearningSkillScalarFieldEnum[]
  }

  /**
   * LearningSkill findMany
   */
  export type LearningSkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * Filter, which LearningSkills to fetch.
     */
    where?: LearningSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSkills to fetch.
     */
    orderBy?: LearningSkillOrderByWithRelationInput | LearningSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningSkills.
     */
    cursor?: LearningSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSkills.
     */
    skip?: number
    distinct?: LearningSkillScalarFieldEnum | LearningSkillScalarFieldEnum[]
  }

  /**
   * LearningSkill create
   */
  export type LearningSkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * The data needed to create a LearningSkill.
     */
    data: XOR<LearningSkillCreateInput, LearningSkillUncheckedCreateInput>
  }

  /**
   * LearningSkill createMany
   */
  export type LearningSkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LearningSkills.
     */
    data: LearningSkillCreateManyInput | LearningSkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LearningSkill createManyAndReturn
   */
  export type LearningSkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LearningSkills.
     */
    data: LearningSkillCreateManyInput | LearningSkillCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningSkill update
   */
  export type LearningSkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * The data needed to update a LearningSkill.
     */
    data: XOR<LearningSkillUpdateInput, LearningSkillUncheckedUpdateInput>
    /**
     * Choose, which LearningSkill to update.
     */
    where: LearningSkillWhereUniqueInput
  }

  /**
   * LearningSkill updateMany
   */
  export type LearningSkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LearningSkills.
     */
    data: XOR<LearningSkillUpdateManyMutationInput, LearningSkillUncheckedUpdateManyInput>
    /**
     * Filter which LearningSkills to update
     */
    where?: LearningSkillWhereInput
  }

  /**
   * LearningSkill upsert
   */
  export type LearningSkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * The filter to search for the LearningSkill to update in case it exists.
     */
    where: LearningSkillWhereUniqueInput
    /**
     * In case the LearningSkill found by the `where` argument doesn't exist, create a new LearningSkill with this data.
     */
    create: XOR<LearningSkillCreateInput, LearningSkillUncheckedCreateInput>
    /**
     * In case the LearningSkill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LearningSkillUpdateInput, LearningSkillUncheckedUpdateInput>
  }

  /**
   * LearningSkill delete
   */
  export type LearningSkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
    /**
     * Filter which LearningSkill to delete.
     */
    where: LearningSkillWhereUniqueInput
  }

  /**
   * LearningSkill deleteMany
   */
  export type LearningSkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningSkills to delete
     */
    where?: LearningSkillWhereInput
  }

  /**
   * LearningSkill without action
   */
  export type LearningSkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSkill
     */
    select?: LearningSkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSkillInclude<ExtArgs> | null
  }


  /**
   * Model LearningSpecialization
   */

  export type AggregateLearningSpecialization = {
    _count: LearningSpecializationCountAggregateOutputType | null
    _min: LearningSpecializationMinAggregateOutputType | null
    _max: LearningSpecializationMaxAggregateOutputType | null
  }

  export type LearningSpecializationMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    data: string | null
  }

  export type LearningSpecializationMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    data: string | null
  }

  export type LearningSpecializationCountAggregateOutputType = {
    id: number
    profileId: number
    data: number
    _all: number
  }


  export type LearningSpecializationMinAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
  }

  export type LearningSpecializationMaxAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
  }

  export type LearningSpecializationCountAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
    _all?: true
  }

  export type LearningSpecializationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningSpecialization to aggregate.
     */
    where?: LearningSpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSpecializations to fetch.
     */
    orderBy?: LearningSpecializationOrderByWithRelationInput | LearningSpecializationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LearningSpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSpecializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSpecializations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningSpecializations
    **/
    _count?: true | LearningSpecializationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningSpecializationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningSpecializationMaxAggregateInputType
  }

  export type GetLearningSpecializationAggregateType<T extends LearningSpecializationAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningSpecialization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningSpecialization[P]>
      : GetScalarType<T[P], AggregateLearningSpecialization[P]>
  }




  export type LearningSpecializationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningSpecializationWhereInput
    orderBy?: LearningSpecializationOrderByWithAggregationInput | LearningSpecializationOrderByWithAggregationInput[]
    by: LearningSpecializationScalarFieldEnum[] | LearningSpecializationScalarFieldEnum
    having?: LearningSpecializationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningSpecializationCountAggregateInputType | true
    _min?: LearningSpecializationMinAggregateInputType
    _max?: LearningSpecializationMaxAggregateInputType
  }

  export type LearningSpecializationGroupByOutputType = {
    id: string
    profileId: string
    data: string
    _count: LearningSpecializationCountAggregateOutputType | null
    _min: LearningSpecializationMinAggregateOutputType | null
    _max: LearningSpecializationMaxAggregateOutputType | null
  }

  type GetLearningSpecializationGroupByPayload<T extends LearningSpecializationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LearningSpecializationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningSpecializationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningSpecializationGroupByOutputType[P]>
            : GetScalarType<T[P], LearningSpecializationGroupByOutputType[P]>
        }
      >
    >


  export type LearningSpecializationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    data?: boolean
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningSpecialization"]>

  export type LearningSpecializationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    data?: boolean
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningSpecialization"]>

  export type LearningSpecializationSelectScalar = {
    id?: boolean
    profileId?: boolean
    data?: boolean
  }

  export type LearningSpecializationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }
  export type LearningSpecializationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }

  export type $LearningSpecializationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LearningSpecialization"
    objects: {
      profile: Prisma.$LearningProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      data: string
    }, ExtArgs["result"]["learningSpecialization"]>
    composites: {}
  }

  type LearningSpecializationGetPayload<S extends boolean | null | undefined | LearningSpecializationDefaultArgs> = $Result.GetResult<Prisma.$LearningSpecializationPayload, S>

  type LearningSpecializationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LearningSpecializationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LearningSpecializationCountAggregateInputType | true
    }

  export interface LearningSpecializationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LearningSpecialization'], meta: { name: 'LearningSpecialization' } }
    /**
     * Find zero or one LearningSpecialization that matches the filter.
     * @param {LearningSpecializationFindUniqueArgs} args - Arguments to find a LearningSpecialization
     * @example
     * // Get one LearningSpecialization
     * const learningSpecialization = await prisma.learningSpecialization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LearningSpecializationFindUniqueArgs>(args: SelectSubset<T, LearningSpecializationFindUniqueArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LearningSpecialization that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LearningSpecializationFindUniqueOrThrowArgs} args - Arguments to find a LearningSpecialization
     * @example
     * // Get one LearningSpecialization
     * const learningSpecialization = await prisma.learningSpecialization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LearningSpecializationFindUniqueOrThrowArgs>(args: SelectSubset<T, LearningSpecializationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LearningSpecialization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSpecializationFindFirstArgs} args - Arguments to find a LearningSpecialization
     * @example
     * // Get one LearningSpecialization
     * const learningSpecialization = await prisma.learningSpecialization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LearningSpecializationFindFirstArgs>(args?: SelectSubset<T, LearningSpecializationFindFirstArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LearningSpecialization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSpecializationFindFirstOrThrowArgs} args - Arguments to find a LearningSpecialization
     * @example
     * // Get one LearningSpecialization
     * const learningSpecialization = await prisma.learningSpecialization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LearningSpecializationFindFirstOrThrowArgs>(args?: SelectSubset<T, LearningSpecializationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LearningSpecializations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSpecializationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningSpecializations
     * const learningSpecializations = await prisma.learningSpecialization.findMany()
     * 
     * // Get first 10 LearningSpecializations
     * const learningSpecializations = await prisma.learningSpecialization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningSpecializationWithIdOnly = await prisma.learningSpecialization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LearningSpecializationFindManyArgs>(args?: SelectSubset<T, LearningSpecializationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LearningSpecialization.
     * @param {LearningSpecializationCreateArgs} args - Arguments to create a LearningSpecialization.
     * @example
     * // Create one LearningSpecialization
     * const LearningSpecialization = await prisma.learningSpecialization.create({
     *   data: {
     *     // ... data to create a LearningSpecialization
     *   }
     * })
     * 
     */
    create<T extends LearningSpecializationCreateArgs>(args: SelectSubset<T, LearningSpecializationCreateArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LearningSpecializations.
     * @param {LearningSpecializationCreateManyArgs} args - Arguments to create many LearningSpecializations.
     * @example
     * // Create many LearningSpecializations
     * const learningSpecialization = await prisma.learningSpecialization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LearningSpecializationCreateManyArgs>(args?: SelectSubset<T, LearningSpecializationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LearningSpecializations and returns the data saved in the database.
     * @param {LearningSpecializationCreateManyAndReturnArgs} args - Arguments to create many LearningSpecializations.
     * @example
     * // Create many LearningSpecializations
     * const learningSpecialization = await prisma.learningSpecialization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LearningSpecializations and only return the `id`
     * const learningSpecializationWithIdOnly = await prisma.learningSpecialization.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LearningSpecializationCreateManyAndReturnArgs>(args?: SelectSubset<T, LearningSpecializationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LearningSpecialization.
     * @param {LearningSpecializationDeleteArgs} args - Arguments to delete one LearningSpecialization.
     * @example
     * // Delete one LearningSpecialization
     * const LearningSpecialization = await prisma.learningSpecialization.delete({
     *   where: {
     *     // ... filter to delete one LearningSpecialization
     *   }
     * })
     * 
     */
    delete<T extends LearningSpecializationDeleteArgs>(args: SelectSubset<T, LearningSpecializationDeleteArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LearningSpecialization.
     * @param {LearningSpecializationUpdateArgs} args - Arguments to update one LearningSpecialization.
     * @example
     * // Update one LearningSpecialization
     * const learningSpecialization = await prisma.learningSpecialization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LearningSpecializationUpdateArgs>(args: SelectSubset<T, LearningSpecializationUpdateArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LearningSpecializations.
     * @param {LearningSpecializationDeleteManyArgs} args - Arguments to filter LearningSpecializations to delete.
     * @example
     * // Delete a few LearningSpecializations
     * const { count } = await prisma.learningSpecialization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LearningSpecializationDeleteManyArgs>(args?: SelectSubset<T, LearningSpecializationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningSpecializations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSpecializationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningSpecializations
     * const learningSpecialization = await prisma.learningSpecialization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LearningSpecializationUpdateManyArgs>(args: SelectSubset<T, LearningSpecializationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LearningSpecialization.
     * @param {LearningSpecializationUpsertArgs} args - Arguments to update or create a LearningSpecialization.
     * @example
     * // Update or create a LearningSpecialization
     * const learningSpecialization = await prisma.learningSpecialization.upsert({
     *   create: {
     *     // ... data to create a LearningSpecialization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningSpecialization we want to update
     *   }
     * })
     */
    upsert<T extends LearningSpecializationUpsertArgs>(args: SelectSubset<T, LearningSpecializationUpsertArgs<ExtArgs>>): Prisma__LearningSpecializationClient<$Result.GetResult<Prisma.$LearningSpecializationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LearningSpecializations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSpecializationCountArgs} args - Arguments to filter LearningSpecializations to count.
     * @example
     * // Count the number of LearningSpecializations
     * const count = await prisma.learningSpecialization.count({
     *   where: {
     *     // ... the filter for the LearningSpecializations we want to count
     *   }
     * })
    **/
    count<T extends LearningSpecializationCountArgs>(
      args?: Subset<T, LearningSpecializationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningSpecializationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningSpecialization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSpecializationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningSpecializationAggregateArgs>(args: Subset<T, LearningSpecializationAggregateArgs>): Prisma.PrismaPromise<GetLearningSpecializationAggregateType<T>>

    /**
     * Group by LearningSpecialization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningSpecializationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningSpecializationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningSpecializationGroupByArgs['orderBy'] }
        : { orderBy?: LearningSpecializationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningSpecializationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningSpecializationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LearningSpecialization model
   */
  readonly fields: LearningSpecializationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningSpecialization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LearningSpecializationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends LearningProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LearningProfileDefaultArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LearningSpecialization model
   */ 
  interface LearningSpecializationFieldRefs {
    readonly id: FieldRef<"LearningSpecialization", 'String'>
    readonly profileId: FieldRef<"LearningSpecialization", 'String'>
    readonly data: FieldRef<"LearningSpecialization", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LearningSpecialization findUnique
   */
  export type LearningSpecializationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * Filter, which LearningSpecialization to fetch.
     */
    where: LearningSpecializationWhereUniqueInput
  }

  /**
   * LearningSpecialization findUniqueOrThrow
   */
  export type LearningSpecializationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * Filter, which LearningSpecialization to fetch.
     */
    where: LearningSpecializationWhereUniqueInput
  }

  /**
   * LearningSpecialization findFirst
   */
  export type LearningSpecializationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * Filter, which LearningSpecialization to fetch.
     */
    where?: LearningSpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSpecializations to fetch.
     */
    orderBy?: LearningSpecializationOrderByWithRelationInput | LearningSpecializationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningSpecializations.
     */
    cursor?: LearningSpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSpecializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSpecializations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningSpecializations.
     */
    distinct?: LearningSpecializationScalarFieldEnum | LearningSpecializationScalarFieldEnum[]
  }

  /**
   * LearningSpecialization findFirstOrThrow
   */
  export type LearningSpecializationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * Filter, which LearningSpecialization to fetch.
     */
    where?: LearningSpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSpecializations to fetch.
     */
    orderBy?: LearningSpecializationOrderByWithRelationInput | LearningSpecializationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningSpecializations.
     */
    cursor?: LearningSpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSpecializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSpecializations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningSpecializations.
     */
    distinct?: LearningSpecializationScalarFieldEnum | LearningSpecializationScalarFieldEnum[]
  }

  /**
   * LearningSpecialization findMany
   */
  export type LearningSpecializationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * Filter, which LearningSpecializations to fetch.
     */
    where?: LearningSpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningSpecializations to fetch.
     */
    orderBy?: LearningSpecializationOrderByWithRelationInput | LearningSpecializationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningSpecializations.
     */
    cursor?: LearningSpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningSpecializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningSpecializations.
     */
    skip?: number
    distinct?: LearningSpecializationScalarFieldEnum | LearningSpecializationScalarFieldEnum[]
  }

  /**
   * LearningSpecialization create
   */
  export type LearningSpecializationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * The data needed to create a LearningSpecialization.
     */
    data: XOR<LearningSpecializationCreateInput, LearningSpecializationUncheckedCreateInput>
  }

  /**
   * LearningSpecialization createMany
   */
  export type LearningSpecializationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LearningSpecializations.
     */
    data: LearningSpecializationCreateManyInput | LearningSpecializationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LearningSpecialization createManyAndReturn
   */
  export type LearningSpecializationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LearningSpecializations.
     */
    data: LearningSpecializationCreateManyInput | LearningSpecializationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningSpecialization update
   */
  export type LearningSpecializationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * The data needed to update a LearningSpecialization.
     */
    data: XOR<LearningSpecializationUpdateInput, LearningSpecializationUncheckedUpdateInput>
    /**
     * Choose, which LearningSpecialization to update.
     */
    where: LearningSpecializationWhereUniqueInput
  }

  /**
   * LearningSpecialization updateMany
   */
  export type LearningSpecializationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LearningSpecializations.
     */
    data: XOR<LearningSpecializationUpdateManyMutationInput, LearningSpecializationUncheckedUpdateManyInput>
    /**
     * Filter which LearningSpecializations to update
     */
    where?: LearningSpecializationWhereInput
  }

  /**
   * LearningSpecialization upsert
   */
  export type LearningSpecializationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * The filter to search for the LearningSpecialization to update in case it exists.
     */
    where: LearningSpecializationWhereUniqueInput
    /**
     * In case the LearningSpecialization found by the `where` argument doesn't exist, create a new LearningSpecialization with this data.
     */
    create: XOR<LearningSpecializationCreateInput, LearningSpecializationUncheckedCreateInput>
    /**
     * In case the LearningSpecialization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LearningSpecializationUpdateInput, LearningSpecializationUncheckedUpdateInput>
  }

  /**
   * LearningSpecialization delete
   */
  export type LearningSpecializationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
    /**
     * Filter which LearningSpecialization to delete.
     */
    where: LearningSpecializationWhereUniqueInput
  }

  /**
   * LearningSpecialization deleteMany
   */
  export type LearningSpecializationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningSpecializations to delete
     */
    where?: LearningSpecializationWhereInput
  }

  /**
   * LearningSpecialization without action
   */
  export type LearningSpecializationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningSpecialization
     */
    select?: LearningSpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningSpecializationInclude<ExtArgs> | null
  }


  /**
   * Model LearningMetric
   */

  export type AggregateLearningMetric = {
    _count: LearningMetricCountAggregateOutputType | null
    _min: LearningMetricMinAggregateOutputType | null
    _max: LearningMetricMaxAggregateOutputType | null
  }

  export type LearningMetricMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    data: string | null
    timestamp: Date | null
  }

  export type LearningMetricMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    data: string | null
    timestamp: Date | null
  }

  export type LearningMetricCountAggregateOutputType = {
    id: number
    profileId: number
    data: number
    timestamp: number
    _all: number
  }


  export type LearningMetricMinAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
    timestamp?: true
  }

  export type LearningMetricMaxAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
    timestamp?: true
  }

  export type LearningMetricCountAggregateInputType = {
    id?: true
    profileId?: true
    data?: true
    timestamp?: true
    _all?: true
  }

  export type LearningMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningMetric to aggregate.
     */
    where?: LearningMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningMetrics to fetch.
     */
    orderBy?: LearningMetricOrderByWithRelationInput | LearningMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LearningMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningMetrics
    **/
    _count?: true | LearningMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningMetricMaxAggregateInputType
  }

  export type GetLearningMetricAggregateType<T extends LearningMetricAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningMetric[P]>
      : GetScalarType<T[P], AggregateLearningMetric[P]>
  }




  export type LearningMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningMetricWhereInput
    orderBy?: LearningMetricOrderByWithAggregationInput | LearningMetricOrderByWithAggregationInput[]
    by: LearningMetricScalarFieldEnum[] | LearningMetricScalarFieldEnum
    having?: LearningMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningMetricCountAggregateInputType | true
    _min?: LearningMetricMinAggregateInputType
    _max?: LearningMetricMaxAggregateInputType
  }

  export type LearningMetricGroupByOutputType = {
    id: string
    profileId: string
    data: string
    timestamp: Date
    _count: LearningMetricCountAggregateOutputType | null
    _min: LearningMetricMinAggregateOutputType | null
    _max: LearningMetricMaxAggregateOutputType | null
  }

  type GetLearningMetricGroupByPayload<T extends LearningMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LearningMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningMetricGroupByOutputType[P]>
            : GetScalarType<T[P], LearningMetricGroupByOutputType[P]>
        }
      >
    >


  export type LearningMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    data?: boolean
    timestamp?: boolean
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningMetric"]>

  export type LearningMetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    data?: boolean
    timestamp?: boolean
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningMetric"]>

  export type LearningMetricSelectScalar = {
    id?: boolean
    profileId?: boolean
    data?: boolean
    timestamp?: boolean
  }

  export type LearningMetricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }
  export type LearningMetricIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | LearningProfileDefaultArgs<ExtArgs>
  }

  export type $LearningMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LearningMetric"
    objects: {
      profile: Prisma.$LearningProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      data: string
      timestamp: Date
    }, ExtArgs["result"]["learningMetric"]>
    composites: {}
  }

  type LearningMetricGetPayload<S extends boolean | null | undefined | LearningMetricDefaultArgs> = $Result.GetResult<Prisma.$LearningMetricPayload, S>

  type LearningMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LearningMetricFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LearningMetricCountAggregateInputType | true
    }

  export interface LearningMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LearningMetric'], meta: { name: 'LearningMetric' } }
    /**
     * Find zero or one LearningMetric that matches the filter.
     * @param {LearningMetricFindUniqueArgs} args - Arguments to find a LearningMetric
     * @example
     * // Get one LearningMetric
     * const learningMetric = await prisma.learningMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LearningMetricFindUniqueArgs>(args: SelectSubset<T, LearningMetricFindUniqueArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LearningMetric that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LearningMetricFindUniqueOrThrowArgs} args - Arguments to find a LearningMetric
     * @example
     * // Get one LearningMetric
     * const learningMetric = await prisma.learningMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LearningMetricFindUniqueOrThrowArgs>(args: SelectSubset<T, LearningMetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LearningMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningMetricFindFirstArgs} args - Arguments to find a LearningMetric
     * @example
     * // Get one LearningMetric
     * const learningMetric = await prisma.learningMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LearningMetricFindFirstArgs>(args?: SelectSubset<T, LearningMetricFindFirstArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LearningMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningMetricFindFirstOrThrowArgs} args - Arguments to find a LearningMetric
     * @example
     * // Get one LearningMetric
     * const learningMetric = await prisma.learningMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LearningMetricFindFirstOrThrowArgs>(args?: SelectSubset<T, LearningMetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LearningMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningMetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningMetrics
     * const learningMetrics = await prisma.learningMetric.findMany()
     * 
     * // Get first 10 LearningMetrics
     * const learningMetrics = await prisma.learningMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningMetricWithIdOnly = await prisma.learningMetric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LearningMetricFindManyArgs>(args?: SelectSubset<T, LearningMetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LearningMetric.
     * @param {LearningMetricCreateArgs} args - Arguments to create a LearningMetric.
     * @example
     * // Create one LearningMetric
     * const LearningMetric = await prisma.learningMetric.create({
     *   data: {
     *     // ... data to create a LearningMetric
     *   }
     * })
     * 
     */
    create<T extends LearningMetricCreateArgs>(args: SelectSubset<T, LearningMetricCreateArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LearningMetrics.
     * @param {LearningMetricCreateManyArgs} args - Arguments to create many LearningMetrics.
     * @example
     * // Create many LearningMetrics
     * const learningMetric = await prisma.learningMetric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LearningMetricCreateManyArgs>(args?: SelectSubset<T, LearningMetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LearningMetrics and returns the data saved in the database.
     * @param {LearningMetricCreateManyAndReturnArgs} args - Arguments to create many LearningMetrics.
     * @example
     * // Create many LearningMetrics
     * const learningMetric = await prisma.learningMetric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LearningMetrics and only return the `id`
     * const learningMetricWithIdOnly = await prisma.learningMetric.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LearningMetricCreateManyAndReturnArgs>(args?: SelectSubset<T, LearningMetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LearningMetric.
     * @param {LearningMetricDeleteArgs} args - Arguments to delete one LearningMetric.
     * @example
     * // Delete one LearningMetric
     * const LearningMetric = await prisma.learningMetric.delete({
     *   where: {
     *     // ... filter to delete one LearningMetric
     *   }
     * })
     * 
     */
    delete<T extends LearningMetricDeleteArgs>(args: SelectSubset<T, LearningMetricDeleteArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LearningMetric.
     * @param {LearningMetricUpdateArgs} args - Arguments to update one LearningMetric.
     * @example
     * // Update one LearningMetric
     * const learningMetric = await prisma.learningMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LearningMetricUpdateArgs>(args: SelectSubset<T, LearningMetricUpdateArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LearningMetrics.
     * @param {LearningMetricDeleteManyArgs} args - Arguments to filter LearningMetrics to delete.
     * @example
     * // Delete a few LearningMetrics
     * const { count } = await prisma.learningMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LearningMetricDeleteManyArgs>(args?: SelectSubset<T, LearningMetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningMetrics
     * const learningMetric = await prisma.learningMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LearningMetricUpdateManyArgs>(args: SelectSubset<T, LearningMetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LearningMetric.
     * @param {LearningMetricUpsertArgs} args - Arguments to update or create a LearningMetric.
     * @example
     * // Update or create a LearningMetric
     * const learningMetric = await prisma.learningMetric.upsert({
     *   create: {
     *     // ... data to create a LearningMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningMetric we want to update
     *   }
     * })
     */
    upsert<T extends LearningMetricUpsertArgs>(args: SelectSubset<T, LearningMetricUpsertArgs<ExtArgs>>): Prisma__LearningMetricClient<$Result.GetResult<Prisma.$LearningMetricPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LearningMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningMetricCountArgs} args - Arguments to filter LearningMetrics to count.
     * @example
     * // Count the number of LearningMetrics
     * const count = await prisma.learningMetric.count({
     *   where: {
     *     // ... the filter for the LearningMetrics we want to count
     *   }
     * })
    **/
    count<T extends LearningMetricCountArgs>(
      args?: Subset<T, LearningMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningMetricAggregateArgs>(args: Subset<T, LearningMetricAggregateArgs>): Prisma.PrismaPromise<GetLearningMetricAggregateType<T>>

    /**
     * Group by LearningMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningMetricGroupByArgs['orderBy'] }
        : { orderBy?: LearningMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LearningMetric model
   */
  readonly fields: LearningMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LearningMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends LearningProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LearningProfileDefaultArgs<ExtArgs>>): Prisma__LearningProfileClient<$Result.GetResult<Prisma.$LearningProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LearningMetric model
   */ 
  interface LearningMetricFieldRefs {
    readonly id: FieldRef<"LearningMetric", 'String'>
    readonly profileId: FieldRef<"LearningMetric", 'String'>
    readonly data: FieldRef<"LearningMetric", 'String'>
    readonly timestamp: FieldRef<"LearningMetric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LearningMetric findUnique
   */
  export type LearningMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * Filter, which LearningMetric to fetch.
     */
    where: LearningMetricWhereUniqueInput
  }

  /**
   * LearningMetric findUniqueOrThrow
   */
  export type LearningMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * Filter, which LearningMetric to fetch.
     */
    where: LearningMetricWhereUniqueInput
  }

  /**
   * LearningMetric findFirst
   */
  export type LearningMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * Filter, which LearningMetric to fetch.
     */
    where?: LearningMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningMetrics to fetch.
     */
    orderBy?: LearningMetricOrderByWithRelationInput | LearningMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningMetrics.
     */
    cursor?: LearningMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningMetrics.
     */
    distinct?: LearningMetricScalarFieldEnum | LearningMetricScalarFieldEnum[]
  }

  /**
   * LearningMetric findFirstOrThrow
   */
  export type LearningMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * Filter, which LearningMetric to fetch.
     */
    where?: LearningMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningMetrics to fetch.
     */
    orderBy?: LearningMetricOrderByWithRelationInput | LearningMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningMetrics.
     */
    cursor?: LearningMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningMetrics.
     */
    distinct?: LearningMetricScalarFieldEnum | LearningMetricScalarFieldEnum[]
  }

  /**
   * LearningMetric findMany
   */
  export type LearningMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * Filter, which LearningMetrics to fetch.
     */
    where?: LearningMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningMetrics to fetch.
     */
    orderBy?: LearningMetricOrderByWithRelationInput | LearningMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningMetrics.
     */
    cursor?: LearningMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningMetrics.
     */
    skip?: number
    distinct?: LearningMetricScalarFieldEnum | LearningMetricScalarFieldEnum[]
  }

  /**
   * LearningMetric create
   */
  export type LearningMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * The data needed to create a LearningMetric.
     */
    data: XOR<LearningMetricCreateInput, LearningMetricUncheckedCreateInput>
  }

  /**
   * LearningMetric createMany
   */
  export type LearningMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LearningMetrics.
     */
    data: LearningMetricCreateManyInput | LearningMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LearningMetric createManyAndReturn
   */
  export type LearningMetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LearningMetrics.
     */
    data: LearningMetricCreateManyInput | LearningMetricCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningMetric update
   */
  export type LearningMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * The data needed to update a LearningMetric.
     */
    data: XOR<LearningMetricUpdateInput, LearningMetricUncheckedUpdateInput>
    /**
     * Choose, which LearningMetric to update.
     */
    where: LearningMetricWhereUniqueInput
  }

  /**
   * LearningMetric updateMany
   */
  export type LearningMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LearningMetrics.
     */
    data: XOR<LearningMetricUpdateManyMutationInput, LearningMetricUncheckedUpdateManyInput>
    /**
     * Filter which LearningMetrics to update
     */
    where?: LearningMetricWhereInput
  }

  /**
   * LearningMetric upsert
   */
  export type LearningMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * The filter to search for the LearningMetric to update in case it exists.
     */
    where: LearningMetricWhereUniqueInput
    /**
     * In case the LearningMetric found by the `where` argument doesn't exist, create a new LearningMetric with this data.
     */
    create: XOR<LearningMetricCreateInput, LearningMetricUncheckedCreateInput>
    /**
     * In case the LearningMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LearningMetricUpdateInput, LearningMetricUncheckedUpdateInput>
  }

  /**
   * LearningMetric delete
   */
  export type LearningMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
    /**
     * Filter which LearningMetric to delete.
     */
    where: LearningMetricWhereUniqueInput
  }

  /**
   * LearningMetric deleteMany
   */
  export type LearningMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningMetrics to delete
     */
    where?: LearningMetricWhereInput
  }

  /**
   * LearningMetric without action
   */
  export type LearningMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningMetric
     */
    select?: LearningMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningMetricInclude<ExtArgs> | null
  }


  /**
   * Model CollaborationSession
   */

  export type AggregateCollaborationSession = {
    _count: CollaborationSessionCountAggregateOutputType | null
    _min: CollaborationSessionMinAggregateOutputType | null
    _max: CollaborationSessionMaxAggregateOutputType | null
  }

  export type CollaborationSessionMinAggregateOutputType = {
    id: string | null
    type: string | null
    status: string | null
    context: string | null
    workflow: string | null
    protocol: string | null
    metrics: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollaborationSessionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    status: string | null
    context: string | null
    workflow: string | null
    protocol: string | null
    metrics: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollaborationSessionCountAggregateOutputType = {
    id: number
    type: number
    status: number
    context: number
    workflow: number
    protocol: number
    metrics: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CollaborationSessionMinAggregateInputType = {
    id?: true
    type?: true
    status?: true
    context?: true
    workflow?: true
    protocol?: true
    metrics?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollaborationSessionMaxAggregateInputType = {
    id?: true
    type?: true
    status?: true
    context?: true
    workflow?: true
    protocol?: true
    metrics?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollaborationSessionCountAggregateInputType = {
    id?: true
    type?: true
    status?: true
    context?: true
    workflow?: true
    protocol?: true
    metrics?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CollaborationSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationSession to aggregate.
     */
    where?: CollaborationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationSessions to fetch.
     */
    orderBy?: CollaborationSessionOrderByWithRelationInput | CollaborationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollaborationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollaborationSessions
    **/
    _count?: true | CollaborationSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollaborationSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollaborationSessionMaxAggregateInputType
  }

  export type GetCollaborationSessionAggregateType<T extends CollaborationSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateCollaborationSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollaborationSession[P]>
      : GetScalarType<T[P], AggregateCollaborationSession[P]>
  }




  export type CollaborationSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationSessionWhereInput
    orderBy?: CollaborationSessionOrderByWithAggregationInput | CollaborationSessionOrderByWithAggregationInput[]
    by: CollaborationSessionScalarFieldEnum[] | CollaborationSessionScalarFieldEnum
    having?: CollaborationSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollaborationSessionCountAggregateInputType | true
    _min?: CollaborationSessionMinAggregateInputType
    _max?: CollaborationSessionMaxAggregateInputType
  }

  export type CollaborationSessionGroupByOutputType = {
    id: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics: string | null
    createdAt: Date
    updatedAt: Date
    _count: CollaborationSessionCountAggregateOutputType | null
    _min: CollaborationSessionMinAggregateOutputType | null
    _max: CollaborationSessionMaxAggregateOutputType | null
  }

  type GetCollaborationSessionGroupByPayload<T extends CollaborationSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollaborationSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollaborationSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollaborationSessionGroupByOutputType[P]>
            : GetScalarType<T[P], CollaborationSessionGroupByOutputType[P]>
        }
      >
    >


  export type CollaborationSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    context?: boolean
    workflow?: boolean
    protocol?: boolean
    metrics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    participants?: boolean | CollaborationSession$participantsArgs<ExtArgs>
    messages?: boolean | CollaborationSession$messagesArgs<ExtArgs>
    _count?: boolean | CollaborationSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationSession"]>

  export type CollaborationSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    context?: boolean
    workflow?: boolean
    protocol?: boolean
    metrics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["collaborationSession"]>

  export type CollaborationSessionSelectScalar = {
    id?: boolean
    type?: boolean
    status?: boolean
    context?: boolean
    workflow?: boolean
    protocol?: boolean
    metrics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CollaborationSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | CollaborationSession$participantsArgs<ExtArgs>
    messages?: boolean | CollaborationSession$messagesArgs<ExtArgs>
    _count?: boolean | CollaborationSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CollaborationSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CollaborationSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollaborationSession"
    objects: {
      participants: Prisma.$CollaborationParticipantPayload<ExtArgs>[]
      messages: Prisma.$CollaborationMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      status: string
      context: string
      workflow: string
      protocol: string
      metrics: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["collaborationSession"]>
    composites: {}
  }

  type CollaborationSessionGetPayload<S extends boolean | null | undefined | CollaborationSessionDefaultArgs> = $Result.GetResult<Prisma.$CollaborationSessionPayload, S>

  type CollaborationSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollaborationSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollaborationSessionCountAggregateInputType | true
    }

  export interface CollaborationSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollaborationSession'], meta: { name: 'CollaborationSession' } }
    /**
     * Find zero or one CollaborationSession that matches the filter.
     * @param {CollaborationSessionFindUniqueArgs} args - Arguments to find a CollaborationSession
     * @example
     * // Get one CollaborationSession
     * const collaborationSession = await prisma.collaborationSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollaborationSessionFindUniqueArgs>(args: SelectSubset<T, CollaborationSessionFindUniqueArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CollaborationSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollaborationSessionFindUniqueOrThrowArgs} args - Arguments to find a CollaborationSession
     * @example
     * // Get one CollaborationSession
     * const collaborationSession = await prisma.collaborationSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollaborationSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, CollaborationSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CollaborationSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationSessionFindFirstArgs} args - Arguments to find a CollaborationSession
     * @example
     * // Get one CollaborationSession
     * const collaborationSession = await prisma.collaborationSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollaborationSessionFindFirstArgs>(args?: SelectSubset<T, CollaborationSessionFindFirstArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CollaborationSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationSessionFindFirstOrThrowArgs} args - Arguments to find a CollaborationSession
     * @example
     * // Get one CollaborationSession
     * const collaborationSession = await prisma.collaborationSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollaborationSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, CollaborationSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CollaborationSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollaborationSessions
     * const collaborationSessions = await prisma.collaborationSession.findMany()
     * 
     * // Get first 10 CollaborationSessions
     * const collaborationSessions = await prisma.collaborationSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collaborationSessionWithIdOnly = await prisma.collaborationSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollaborationSessionFindManyArgs>(args?: SelectSubset<T, CollaborationSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CollaborationSession.
     * @param {CollaborationSessionCreateArgs} args - Arguments to create a CollaborationSession.
     * @example
     * // Create one CollaborationSession
     * const CollaborationSession = await prisma.collaborationSession.create({
     *   data: {
     *     // ... data to create a CollaborationSession
     *   }
     * })
     * 
     */
    create<T extends CollaborationSessionCreateArgs>(args: SelectSubset<T, CollaborationSessionCreateArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CollaborationSessions.
     * @param {CollaborationSessionCreateManyArgs} args - Arguments to create many CollaborationSessions.
     * @example
     * // Create many CollaborationSessions
     * const collaborationSession = await prisma.collaborationSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollaborationSessionCreateManyArgs>(args?: SelectSubset<T, CollaborationSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollaborationSessions and returns the data saved in the database.
     * @param {CollaborationSessionCreateManyAndReturnArgs} args - Arguments to create many CollaborationSessions.
     * @example
     * // Create many CollaborationSessions
     * const collaborationSession = await prisma.collaborationSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollaborationSessions and only return the `id`
     * const collaborationSessionWithIdOnly = await prisma.collaborationSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollaborationSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, CollaborationSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CollaborationSession.
     * @param {CollaborationSessionDeleteArgs} args - Arguments to delete one CollaborationSession.
     * @example
     * // Delete one CollaborationSession
     * const CollaborationSession = await prisma.collaborationSession.delete({
     *   where: {
     *     // ... filter to delete one CollaborationSession
     *   }
     * })
     * 
     */
    delete<T extends CollaborationSessionDeleteArgs>(args: SelectSubset<T, CollaborationSessionDeleteArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CollaborationSession.
     * @param {CollaborationSessionUpdateArgs} args - Arguments to update one CollaborationSession.
     * @example
     * // Update one CollaborationSession
     * const collaborationSession = await prisma.collaborationSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollaborationSessionUpdateArgs>(args: SelectSubset<T, CollaborationSessionUpdateArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CollaborationSessions.
     * @param {CollaborationSessionDeleteManyArgs} args - Arguments to filter CollaborationSessions to delete.
     * @example
     * // Delete a few CollaborationSessions
     * const { count } = await prisma.collaborationSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollaborationSessionDeleteManyArgs>(args?: SelectSubset<T, CollaborationSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollaborationSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollaborationSessions
     * const collaborationSession = await prisma.collaborationSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollaborationSessionUpdateManyArgs>(args: SelectSubset<T, CollaborationSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollaborationSession.
     * @param {CollaborationSessionUpsertArgs} args - Arguments to update or create a CollaborationSession.
     * @example
     * // Update or create a CollaborationSession
     * const collaborationSession = await prisma.collaborationSession.upsert({
     *   create: {
     *     // ... data to create a CollaborationSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollaborationSession we want to update
     *   }
     * })
     */
    upsert<T extends CollaborationSessionUpsertArgs>(args: SelectSubset<T, CollaborationSessionUpsertArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CollaborationSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationSessionCountArgs} args - Arguments to filter CollaborationSessions to count.
     * @example
     * // Count the number of CollaborationSessions
     * const count = await prisma.collaborationSession.count({
     *   where: {
     *     // ... the filter for the CollaborationSessions we want to count
     *   }
     * })
    **/
    count<T extends CollaborationSessionCountArgs>(
      args?: Subset<T, CollaborationSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollaborationSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollaborationSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollaborationSessionAggregateArgs>(args: Subset<T, CollaborationSessionAggregateArgs>): Prisma.PrismaPromise<GetCollaborationSessionAggregateType<T>>

    /**
     * Group by CollaborationSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollaborationSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollaborationSessionGroupByArgs['orderBy'] }
        : { orderBy?: CollaborationSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollaborationSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollaborationSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollaborationSession model
   */
  readonly fields: CollaborationSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollaborationSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollaborationSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends CollaborationSession$participantsArgs<ExtArgs> = {}>(args?: Subset<T, CollaborationSession$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends CollaborationSession$messagesArgs<ExtArgs> = {}>(args?: Subset<T, CollaborationSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollaborationSession model
   */ 
  interface CollaborationSessionFieldRefs {
    readonly id: FieldRef<"CollaborationSession", 'String'>
    readonly type: FieldRef<"CollaborationSession", 'String'>
    readonly status: FieldRef<"CollaborationSession", 'String'>
    readonly context: FieldRef<"CollaborationSession", 'String'>
    readonly workflow: FieldRef<"CollaborationSession", 'String'>
    readonly protocol: FieldRef<"CollaborationSession", 'String'>
    readonly metrics: FieldRef<"CollaborationSession", 'String'>
    readonly createdAt: FieldRef<"CollaborationSession", 'DateTime'>
    readonly updatedAt: FieldRef<"CollaborationSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CollaborationSession findUnique
   */
  export type CollaborationSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationSession to fetch.
     */
    where: CollaborationSessionWhereUniqueInput
  }

  /**
   * CollaborationSession findUniqueOrThrow
   */
  export type CollaborationSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationSession to fetch.
     */
    where: CollaborationSessionWhereUniqueInput
  }

  /**
   * CollaborationSession findFirst
   */
  export type CollaborationSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationSession to fetch.
     */
    where?: CollaborationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationSessions to fetch.
     */
    orderBy?: CollaborationSessionOrderByWithRelationInput | CollaborationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationSessions.
     */
    cursor?: CollaborationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationSessions.
     */
    distinct?: CollaborationSessionScalarFieldEnum | CollaborationSessionScalarFieldEnum[]
  }

  /**
   * CollaborationSession findFirstOrThrow
   */
  export type CollaborationSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationSession to fetch.
     */
    where?: CollaborationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationSessions to fetch.
     */
    orderBy?: CollaborationSessionOrderByWithRelationInput | CollaborationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationSessions.
     */
    cursor?: CollaborationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationSessions.
     */
    distinct?: CollaborationSessionScalarFieldEnum | CollaborationSessionScalarFieldEnum[]
  }

  /**
   * CollaborationSession findMany
   */
  export type CollaborationSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationSessions to fetch.
     */
    where?: CollaborationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationSessions to fetch.
     */
    orderBy?: CollaborationSessionOrderByWithRelationInput | CollaborationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollaborationSessions.
     */
    cursor?: CollaborationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationSessions.
     */
    skip?: number
    distinct?: CollaborationSessionScalarFieldEnum | CollaborationSessionScalarFieldEnum[]
  }

  /**
   * CollaborationSession create
   */
  export type CollaborationSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a CollaborationSession.
     */
    data: XOR<CollaborationSessionCreateInput, CollaborationSessionUncheckedCreateInput>
  }

  /**
   * CollaborationSession createMany
   */
  export type CollaborationSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollaborationSessions.
     */
    data: CollaborationSessionCreateManyInput | CollaborationSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollaborationSession createManyAndReturn
   */
  export type CollaborationSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CollaborationSessions.
     */
    data: CollaborationSessionCreateManyInput | CollaborationSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollaborationSession update
   */
  export type CollaborationSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a CollaborationSession.
     */
    data: XOR<CollaborationSessionUpdateInput, CollaborationSessionUncheckedUpdateInput>
    /**
     * Choose, which CollaborationSession to update.
     */
    where: CollaborationSessionWhereUniqueInput
  }

  /**
   * CollaborationSession updateMany
   */
  export type CollaborationSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollaborationSessions.
     */
    data: XOR<CollaborationSessionUpdateManyMutationInput, CollaborationSessionUncheckedUpdateManyInput>
    /**
     * Filter which CollaborationSessions to update
     */
    where?: CollaborationSessionWhereInput
  }

  /**
   * CollaborationSession upsert
   */
  export type CollaborationSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the CollaborationSession to update in case it exists.
     */
    where: CollaborationSessionWhereUniqueInput
    /**
     * In case the CollaborationSession found by the `where` argument doesn't exist, create a new CollaborationSession with this data.
     */
    create: XOR<CollaborationSessionCreateInput, CollaborationSessionUncheckedCreateInput>
    /**
     * In case the CollaborationSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollaborationSessionUpdateInput, CollaborationSessionUncheckedUpdateInput>
  }

  /**
   * CollaborationSession delete
   */
  export type CollaborationSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
    /**
     * Filter which CollaborationSession to delete.
     */
    where: CollaborationSessionWhereUniqueInput
  }

  /**
   * CollaborationSession deleteMany
   */
  export type CollaborationSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationSessions to delete
     */
    where?: CollaborationSessionWhereInput
  }

  /**
   * CollaborationSession.participants
   */
  export type CollaborationSession$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    where?: CollaborationParticipantWhereInput
    orderBy?: CollaborationParticipantOrderByWithRelationInput | CollaborationParticipantOrderByWithRelationInput[]
    cursor?: CollaborationParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollaborationParticipantScalarFieldEnum | CollaborationParticipantScalarFieldEnum[]
  }

  /**
   * CollaborationSession.messages
   */
  export type CollaborationSession$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    where?: CollaborationMessageWhereInput
    orderBy?: CollaborationMessageOrderByWithRelationInput | CollaborationMessageOrderByWithRelationInput[]
    cursor?: CollaborationMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollaborationMessageScalarFieldEnum | CollaborationMessageScalarFieldEnum[]
  }

  /**
   * CollaborationSession without action
   */
  export type CollaborationSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationSession
     */
    select?: CollaborationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationSessionInclude<ExtArgs> | null
  }


  /**
   * Model CollaborationParticipant
   */

  export type AggregateCollaborationParticipant = {
    _count: CollaborationParticipantCountAggregateOutputType | null
    _min: CollaborationParticipantMinAggregateOutputType | null
    _max: CollaborationParticipantMaxAggregateOutputType | null
  }

  export type CollaborationParticipantMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    agentId: string | null
    role: string | null
    status: string | null
    contribution: string | null
    feedback: string | null
    timestamp: Date | null
  }

  export type CollaborationParticipantMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    agentId: string | null
    role: string | null
    status: string | null
    contribution: string | null
    feedback: string | null
    timestamp: Date | null
  }

  export type CollaborationParticipantCountAggregateOutputType = {
    id: number
    sessionId: number
    agentId: number
    role: number
    status: number
    contribution: number
    feedback: number
    timestamp: number
    _all: number
  }


  export type CollaborationParticipantMinAggregateInputType = {
    id?: true
    sessionId?: true
    agentId?: true
    role?: true
    status?: true
    contribution?: true
    feedback?: true
    timestamp?: true
  }

  export type CollaborationParticipantMaxAggregateInputType = {
    id?: true
    sessionId?: true
    agentId?: true
    role?: true
    status?: true
    contribution?: true
    feedback?: true
    timestamp?: true
  }

  export type CollaborationParticipantCountAggregateInputType = {
    id?: true
    sessionId?: true
    agentId?: true
    role?: true
    status?: true
    contribution?: true
    feedback?: true
    timestamp?: true
    _all?: true
  }

  export type CollaborationParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationParticipant to aggregate.
     */
    where?: CollaborationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationParticipants to fetch.
     */
    orderBy?: CollaborationParticipantOrderByWithRelationInput | CollaborationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollaborationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollaborationParticipants
    **/
    _count?: true | CollaborationParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollaborationParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollaborationParticipantMaxAggregateInputType
  }

  export type GetCollaborationParticipantAggregateType<T extends CollaborationParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateCollaborationParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollaborationParticipant[P]>
      : GetScalarType<T[P], AggregateCollaborationParticipant[P]>
  }




  export type CollaborationParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationParticipantWhereInput
    orderBy?: CollaborationParticipantOrderByWithAggregationInput | CollaborationParticipantOrderByWithAggregationInput[]
    by: CollaborationParticipantScalarFieldEnum[] | CollaborationParticipantScalarFieldEnum
    having?: CollaborationParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollaborationParticipantCountAggregateInputType | true
    _min?: CollaborationParticipantMinAggregateInputType
    _max?: CollaborationParticipantMaxAggregateInputType
  }

  export type CollaborationParticipantGroupByOutputType = {
    id: string
    sessionId: string
    agentId: string
    role: string
    status: string
    contribution: string | null
    feedback: string | null
    timestamp: Date
    _count: CollaborationParticipantCountAggregateOutputType | null
    _min: CollaborationParticipantMinAggregateOutputType | null
    _max: CollaborationParticipantMaxAggregateOutputType | null
  }

  type GetCollaborationParticipantGroupByPayload<T extends CollaborationParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollaborationParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollaborationParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollaborationParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], CollaborationParticipantGroupByOutputType[P]>
        }
      >
    >


  export type CollaborationParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    agentId?: boolean
    role?: boolean
    status?: boolean
    contribution?: boolean
    feedback?: boolean
    timestamp?: boolean
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationParticipant"]>

  export type CollaborationParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    agentId?: boolean
    role?: boolean
    status?: boolean
    contribution?: boolean
    feedback?: boolean
    timestamp?: boolean
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationParticipant"]>

  export type CollaborationParticipantSelectScalar = {
    id?: boolean
    sessionId?: boolean
    agentId?: boolean
    role?: boolean
    status?: boolean
    contribution?: boolean
    feedback?: boolean
    timestamp?: boolean
  }

  export type CollaborationParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }
  export type CollaborationParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }

  export type $CollaborationParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollaborationParticipant"
    objects: {
      session: Prisma.$CollaborationSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      agentId: string
      role: string
      status: string
      contribution: string | null
      feedback: string | null
      timestamp: Date
    }, ExtArgs["result"]["collaborationParticipant"]>
    composites: {}
  }

  type CollaborationParticipantGetPayload<S extends boolean | null | undefined | CollaborationParticipantDefaultArgs> = $Result.GetResult<Prisma.$CollaborationParticipantPayload, S>

  type CollaborationParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollaborationParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollaborationParticipantCountAggregateInputType | true
    }

  export interface CollaborationParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollaborationParticipant'], meta: { name: 'CollaborationParticipant' } }
    /**
     * Find zero or one CollaborationParticipant that matches the filter.
     * @param {CollaborationParticipantFindUniqueArgs} args - Arguments to find a CollaborationParticipant
     * @example
     * // Get one CollaborationParticipant
     * const collaborationParticipant = await prisma.collaborationParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollaborationParticipantFindUniqueArgs>(args: SelectSubset<T, CollaborationParticipantFindUniqueArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CollaborationParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollaborationParticipantFindUniqueOrThrowArgs} args - Arguments to find a CollaborationParticipant
     * @example
     * // Get one CollaborationParticipant
     * const collaborationParticipant = await prisma.collaborationParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollaborationParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, CollaborationParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CollaborationParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationParticipantFindFirstArgs} args - Arguments to find a CollaborationParticipant
     * @example
     * // Get one CollaborationParticipant
     * const collaborationParticipant = await prisma.collaborationParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollaborationParticipantFindFirstArgs>(args?: SelectSubset<T, CollaborationParticipantFindFirstArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CollaborationParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationParticipantFindFirstOrThrowArgs} args - Arguments to find a CollaborationParticipant
     * @example
     * // Get one CollaborationParticipant
     * const collaborationParticipant = await prisma.collaborationParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollaborationParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, CollaborationParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CollaborationParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollaborationParticipants
     * const collaborationParticipants = await prisma.collaborationParticipant.findMany()
     * 
     * // Get first 10 CollaborationParticipants
     * const collaborationParticipants = await prisma.collaborationParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collaborationParticipantWithIdOnly = await prisma.collaborationParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollaborationParticipantFindManyArgs>(args?: SelectSubset<T, CollaborationParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CollaborationParticipant.
     * @param {CollaborationParticipantCreateArgs} args - Arguments to create a CollaborationParticipant.
     * @example
     * // Create one CollaborationParticipant
     * const CollaborationParticipant = await prisma.collaborationParticipant.create({
     *   data: {
     *     // ... data to create a CollaborationParticipant
     *   }
     * })
     * 
     */
    create<T extends CollaborationParticipantCreateArgs>(args: SelectSubset<T, CollaborationParticipantCreateArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CollaborationParticipants.
     * @param {CollaborationParticipantCreateManyArgs} args - Arguments to create many CollaborationParticipants.
     * @example
     * // Create many CollaborationParticipants
     * const collaborationParticipant = await prisma.collaborationParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollaborationParticipantCreateManyArgs>(args?: SelectSubset<T, CollaborationParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollaborationParticipants and returns the data saved in the database.
     * @param {CollaborationParticipantCreateManyAndReturnArgs} args - Arguments to create many CollaborationParticipants.
     * @example
     * // Create many CollaborationParticipants
     * const collaborationParticipant = await prisma.collaborationParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollaborationParticipants and only return the `id`
     * const collaborationParticipantWithIdOnly = await prisma.collaborationParticipant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollaborationParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, CollaborationParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CollaborationParticipant.
     * @param {CollaborationParticipantDeleteArgs} args - Arguments to delete one CollaborationParticipant.
     * @example
     * // Delete one CollaborationParticipant
     * const CollaborationParticipant = await prisma.collaborationParticipant.delete({
     *   where: {
     *     // ... filter to delete one CollaborationParticipant
     *   }
     * })
     * 
     */
    delete<T extends CollaborationParticipantDeleteArgs>(args: SelectSubset<T, CollaborationParticipantDeleteArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CollaborationParticipant.
     * @param {CollaborationParticipantUpdateArgs} args - Arguments to update one CollaborationParticipant.
     * @example
     * // Update one CollaborationParticipant
     * const collaborationParticipant = await prisma.collaborationParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollaborationParticipantUpdateArgs>(args: SelectSubset<T, CollaborationParticipantUpdateArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CollaborationParticipants.
     * @param {CollaborationParticipantDeleteManyArgs} args - Arguments to filter CollaborationParticipants to delete.
     * @example
     * // Delete a few CollaborationParticipants
     * const { count } = await prisma.collaborationParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollaborationParticipantDeleteManyArgs>(args?: SelectSubset<T, CollaborationParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollaborationParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollaborationParticipants
     * const collaborationParticipant = await prisma.collaborationParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollaborationParticipantUpdateManyArgs>(args: SelectSubset<T, CollaborationParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollaborationParticipant.
     * @param {CollaborationParticipantUpsertArgs} args - Arguments to update or create a CollaborationParticipant.
     * @example
     * // Update or create a CollaborationParticipant
     * const collaborationParticipant = await prisma.collaborationParticipant.upsert({
     *   create: {
     *     // ... data to create a CollaborationParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollaborationParticipant we want to update
     *   }
     * })
     */
    upsert<T extends CollaborationParticipantUpsertArgs>(args: SelectSubset<T, CollaborationParticipantUpsertArgs<ExtArgs>>): Prisma__CollaborationParticipantClient<$Result.GetResult<Prisma.$CollaborationParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CollaborationParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationParticipantCountArgs} args - Arguments to filter CollaborationParticipants to count.
     * @example
     * // Count the number of CollaborationParticipants
     * const count = await prisma.collaborationParticipant.count({
     *   where: {
     *     // ... the filter for the CollaborationParticipants we want to count
     *   }
     * })
    **/
    count<T extends CollaborationParticipantCountArgs>(
      args?: Subset<T, CollaborationParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollaborationParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollaborationParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollaborationParticipantAggregateArgs>(args: Subset<T, CollaborationParticipantAggregateArgs>): Prisma.PrismaPromise<GetCollaborationParticipantAggregateType<T>>

    /**
     * Group by CollaborationParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollaborationParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollaborationParticipantGroupByArgs['orderBy'] }
        : { orderBy?: CollaborationParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollaborationParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollaborationParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollaborationParticipant model
   */
  readonly fields: CollaborationParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollaborationParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollaborationParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends CollaborationSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollaborationSessionDefaultArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollaborationParticipant model
   */ 
  interface CollaborationParticipantFieldRefs {
    readonly id: FieldRef<"CollaborationParticipant", 'String'>
    readonly sessionId: FieldRef<"CollaborationParticipant", 'String'>
    readonly agentId: FieldRef<"CollaborationParticipant", 'String'>
    readonly role: FieldRef<"CollaborationParticipant", 'String'>
    readonly status: FieldRef<"CollaborationParticipant", 'String'>
    readonly contribution: FieldRef<"CollaborationParticipant", 'String'>
    readonly feedback: FieldRef<"CollaborationParticipant", 'String'>
    readonly timestamp: FieldRef<"CollaborationParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CollaborationParticipant findUnique
   */
  export type CollaborationParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationParticipant to fetch.
     */
    where: CollaborationParticipantWhereUniqueInput
  }

  /**
   * CollaborationParticipant findUniqueOrThrow
   */
  export type CollaborationParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationParticipant to fetch.
     */
    where: CollaborationParticipantWhereUniqueInput
  }

  /**
   * CollaborationParticipant findFirst
   */
  export type CollaborationParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationParticipant to fetch.
     */
    where?: CollaborationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationParticipants to fetch.
     */
    orderBy?: CollaborationParticipantOrderByWithRelationInput | CollaborationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationParticipants.
     */
    cursor?: CollaborationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationParticipants.
     */
    distinct?: CollaborationParticipantScalarFieldEnum | CollaborationParticipantScalarFieldEnum[]
  }

  /**
   * CollaborationParticipant findFirstOrThrow
   */
  export type CollaborationParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationParticipant to fetch.
     */
    where?: CollaborationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationParticipants to fetch.
     */
    orderBy?: CollaborationParticipantOrderByWithRelationInput | CollaborationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationParticipants.
     */
    cursor?: CollaborationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationParticipants.
     */
    distinct?: CollaborationParticipantScalarFieldEnum | CollaborationParticipantScalarFieldEnum[]
  }

  /**
   * CollaborationParticipant findMany
   */
  export type CollaborationParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationParticipants to fetch.
     */
    where?: CollaborationParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationParticipants to fetch.
     */
    orderBy?: CollaborationParticipantOrderByWithRelationInput | CollaborationParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollaborationParticipants.
     */
    cursor?: CollaborationParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationParticipants.
     */
    skip?: number
    distinct?: CollaborationParticipantScalarFieldEnum | CollaborationParticipantScalarFieldEnum[]
  }

  /**
   * CollaborationParticipant create
   */
  export type CollaborationParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a CollaborationParticipant.
     */
    data: XOR<CollaborationParticipantCreateInput, CollaborationParticipantUncheckedCreateInput>
  }

  /**
   * CollaborationParticipant createMany
   */
  export type CollaborationParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollaborationParticipants.
     */
    data: CollaborationParticipantCreateManyInput | CollaborationParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollaborationParticipant createManyAndReturn
   */
  export type CollaborationParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CollaborationParticipants.
     */
    data: CollaborationParticipantCreateManyInput | CollaborationParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollaborationParticipant update
   */
  export type CollaborationParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a CollaborationParticipant.
     */
    data: XOR<CollaborationParticipantUpdateInput, CollaborationParticipantUncheckedUpdateInput>
    /**
     * Choose, which CollaborationParticipant to update.
     */
    where: CollaborationParticipantWhereUniqueInput
  }

  /**
   * CollaborationParticipant updateMany
   */
  export type CollaborationParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollaborationParticipants.
     */
    data: XOR<CollaborationParticipantUpdateManyMutationInput, CollaborationParticipantUncheckedUpdateManyInput>
    /**
     * Filter which CollaborationParticipants to update
     */
    where?: CollaborationParticipantWhereInput
  }

  /**
   * CollaborationParticipant upsert
   */
  export type CollaborationParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the CollaborationParticipant to update in case it exists.
     */
    where: CollaborationParticipantWhereUniqueInput
    /**
     * In case the CollaborationParticipant found by the `where` argument doesn't exist, create a new CollaborationParticipant with this data.
     */
    create: XOR<CollaborationParticipantCreateInput, CollaborationParticipantUncheckedCreateInput>
    /**
     * In case the CollaborationParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollaborationParticipantUpdateInput, CollaborationParticipantUncheckedUpdateInput>
  }

  /**
   * CollaborationParticipant delete
   */
  export type CollaborationParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
    /**
     * Filter which CollaborationParticipant to delete.
     */
    where: CollaborationParticipantWhereUniqueInput
  }

  /**
   * CollaborationParticipant deleteMany
   */
  export type CollaborationParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationParticipants to delete
     */
    where?: CollaborationParticipantWhereInput
  }

  /**
   * CollaborationParticipant without action
   */
  export type CollaborationParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationParticipant
     */
    select?: CollaborationParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationParticipantInclude<ExtArgs> | null
  }


  /**
   * Model CollaborationMessage
   */

  export type AggregateCollaborationMessage = {
    _count: CollaborationMessageCountAggregateOutputType | null
    _min: CollaborationMessageMinAggregateOutputType | null
    _max: CollaborationMessageMaxAggregateOutputType | null
  }

  export type CollaborationMessageMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    senderId: string | null
    recipientId: string | null
    type: string | null
    content: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type CollaborationMessageMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    senderId: string | null
    recipientId: string | null
    type: string | null
    content: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type CollaborationMessageCountAggregateOutputType = {
    id: number
    sessionId: number
    senderId: number
    recipientId: number
    type: number
    content: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type CollaborationMessageMinAggregateInputType = {
    id?: true
    sessionId?: true
    senderId?: true
    recipientId?: true
    type?: true
    content?: true
    metadata?: true
    createdAt?: true
  }

  export type CollaborationMessageMaxAggregateInputType = {
    id?: true
    sessionId?: true
    senderId?: true
    recipientId?: true
    type?: true
    content?: true
    metadata?: true
    createdAt?: true
  }

  export type CollaborationMessageCountAggregateInputType = {
    id?: true
    sessionId?: true
    senderId?: true
    recipientId?: true
    type?: true
    content?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type CollaborationMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationMessage to aggregate.
     */
    where?: CollaborationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationMessages to fetch.
     */
    orderBy?: CollaborationMessageOrderByWithRelationInput | CollaborationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollaborationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollaborationMessages
    **/
    _count?: true | CollaborationMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollaborationMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollaborationMessageMaxAggregateInputType
  }

  export type GetCollaborationMessageAggregateType<T extends CollaborationMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateCollaborationMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollaborationMessage[P]>
      : GetScalarType<T[P], AggregateCollaborationMessage[P]>
  }




  export type CollaborationMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationMessageWhereInput
    orderBy?: CollaborationMessageOrderByWithAggregationInput | CollaborationMessageOrderByWithAggregationInput[]
    by: CollaborationMessageScalarFieldEnum[] | CollaborationMessageScalarFieldEnum
    having?: CollaborationMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollaborationMessageCountAggregateInputType | true
    _min?: CollaborationMessageMinAggregateInputType
    _max?: CollaborationMessageMaxAggregateInputType
  }

  export type CollaborationMessageGroupByOutputType = {
    id: string
    sessionId: string
    senderId: string
    recipientId: string | null
    type: string
    content: string
    metadata: string
    createdAt: Date
    _count: CollaborationMessageCountAggregateOutputType | null
    _min: CollaborationMessageMinAggregateOutputType | null
    _max: CollaborationMessageMaxAggregateOutputType | null
  }

  type GetCollaborationMessageGroupByPayload<T extends CollaborationMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollaborationMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollaborationMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollaborationMessageGroupByOutputType[P]>
            : GetScalarType<T[P], CollaborationMessageGroupByOutputType[P]>
        }
      >
    >


  export type CollaborationMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    senderId?: boolean
    recipientId?: boolean
    type?: boolean
    content?: boolean
    metadata?: boolean
    createdAt?: boolean
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationMessage"]>

  export type CollaborationMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    senderId?: boolean
    recipientId?: boolean
    type?: boolean
    content?: boolean
    metadata?: boolean
    createdAt?: boolean
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationMessage"]>

  export type CollaborationMessageSelectScalar = {
    id?: boolean
    sessionId?: boolean
    senderId?: boolean
    recipientId?: boolean
    type?: boolean
    content?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type CollaborationMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }
  export type CollaborationMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CollaborationSessionDefaultArgs<ExtArgs>
  }

  export type $CollaborationMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollaborationMessage"
    objects: {
      session: Prisma.$CollaborationSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      senderId: string
      recipientId: string | null
      type: string
      content: string
      metadata: string
      createdAt: Date
    }, ExtArgs["result"]["collaborationMessage"]>
    composites: {}
  }

  type CollaborationMessageGetPayload<S extends boolean | null | undefined | CollaborationMessageDefaultArgs> = $Result.GetResult<Prisma.$CollaborationMessagePayload, S>

  type CollaborationMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollaborationMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollaborationMessageCountAggregateInputType | true
    }

  export interface CollaborationMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollaborationMessage'], meta: { name: 'CollaborationMessage' } }
    /**
     * Find zero or one CollaborationMessage that matches the filter.
     * @param {CollaborationMessageFindUniqueArgs} args - Arguments to find a CollaborationMessage
     * @example
     * // Get one CollaborationMessage
     * const collaborationMessage = await prisma.collaborationMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollaborationMessageFindUniqueArgs>(args: SelectSubset<T, CollaborationMessageFindUniqueArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CollaborationMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollaborationMessageFindUniqueOrThrowArgs} args - Arguments to find a CollaborationMessage
     * @example
     * // Get one CollaborationMessage
     * const collaborationMessage = await prisma.collaborationMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollaborationMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, CollaborationMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CollaborationMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationMessageFindFirstArgs} args - Arguments to find a CollaborationMessage
     * @example
     * // Get one CollaborationMessage
     * const collaborationMessage = await prisma.collaborationMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollaborationMessageFindFirstArgs>(args?: SelectSubset<T, CollaborationMessageFindFirstArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CollaborationMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationMessageFindFirstOrThrowArgs} args - Arguments to find a CollaborationMessage
     * @example
     * // Get one CollaborationMessage
     * const collaborationMessage = await prisma.collaborationMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollaborationMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, CollaborationMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CollaborationMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollaborationMessages
     * const collaborationMessages = await prisma.collaborationMessage.findMany()
     * 
     * // Get first 10 CollaborationMessages
     * const collaborationMessages = await prisma.collaborationMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collaborationMessageWithIdOnly = await prisma.collaborationMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollaborationMessageFindManyArgs>(args?: SelectSubset<T, CollaborationMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CollaborationMessage.
     * @param {CollaborationMessageCreateArgs} args - Arguments to create a CollaborationMessage.
     * @example
     * // Create one CollaborationMessage
     * const CollaborationMessage = await prisma.collaborationMessage.create({
     *   data: {
     *     // ... data to create a CollaborationMessage
     *   }
     * })
     * 
     */
    create<T extends CollaborationMessageCreateArgs>(args: SelectSubset<T, CollaborationMessageCreateArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CollaborationMessages.
     * @param {CollaborationMessageCreateManyArgs} args - Arguments to create many CollaborationMessages.
     * @example
     * // Create many CollaborationMessages
     * const collaborationMessage = await prisma.collaborationMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollaborationMessageCreateManyArgs>(args?: SelectSubset<T, CollaborationMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollaborationMessages and returns the data saved in the database.
     * @param {CollaborationMessageCreateManyAndReturnArgs} args - Arguments to create many CollaborationMessages.
     * @example
     * // Create many CollaborationMessages
     * const collaborationMessage = await prisma.collaborationMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollaborationMessages and only return the `id`
     * const collaborationMessageWithIdOnly = await prisma.collaborationMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollaborationMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, CollaborationMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CollaborationMessage.
     * @param {CollaborationMessageDeleteArgs} args - Arguments to delete one CollaborationMessage.
     * @example
     * // Delete one CollaborationMessage
     * const CollaborationMessage = await prisma.collaborationMessage.delete({
     *   where: {
     *     // ... filter to delete one CollaborationMessage
     *   }
     * })
     * 
     */
    delete<T extends CollaborationMessageDeleteArgs>(args: SelectSubset<T, CollaborationMessageDeleteArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CollaborationMessage.
     * @param {CollaborationMessageUpdateArgs} args - Arguments to update one CollaborationMessage.
     * @example
     * // Update one CollaborationMessage
     * const collaborationMessage = await prisma.collaborationMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollaborationMessageUpdateArgs>(args: SelectSubset<T, CollaborationMessageUpdateArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CollaborationMessages.
     * @param {CollaborationMessageDeleteManyArgs} args - Arguments to filter CollaborationMessages to delete.
     * @example
     * // Delete a few CollaborationMessages
     * const { count } = await prisma.collaborationMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollaborationMessageDeleteManyArgs>(args?: SelectSubset<T, CollaborationMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollaborationMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollaborationMessages
     * const collaborationMessage = await prisma.collaborationMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollaborationMessageUpdateManyArgs>(args: SelectSubset<T, CollaborationMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollaborationMessage.
     * @param {CollaborationMessageUpsertArgs} args - Arguments to update or create a CollaborationMessage.
     * @example
     * // Update or create a CollaborationMessage
     * const collaborationMessage = await prisma.collaborationMessage.upsert({
     *   create: {
     *     // ... data to create a CollaborationMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollaborationMessage we want to update
     *   }
     * })
     */
    upsert<T extends CollaborationMessageUpsertArgs>(args: SelectSubset<T, CollaborationMessageUpsertArgs<ExtArgs>>): Prisma__CollaborationMessageClient<$Result.GetResult<Prisma.$CollaborationMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CollaborationMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationMessageCountArgs} args - Arguments to filter CollaborationMessages to count.
     * @example
     * // Count the number of CollaborationMessages
     * const count = await prisma.collaborationMessage.count({
     *   where: {
     *     // ... the filter for the CollaborationMessages we want to count
     *   }
     * })
    **/
    count<T extends CollaborationMessageCountArgs>(
      args?: Subset<T, CollaborationMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollaborationMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollaborationMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollaborationMessageAggregateArgs>(args: Subset<T, CollaborationMessageAggregateArgs>): Prisma.PrismaPromise<GetCollaborationMessageAggregateType<T>>

    /**
     * Group by CollaborationMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollaborationMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollaborationMessageGroupByArgs['orderBy'] }
        : { orderBy?: CollaborationMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollaborationMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollaborationMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollaborationMessage model
   */
  readonly fields: CollaborationMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollaborationMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollaborationMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends CollaborationSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollaborationSessionDefaultArgs<ExtArgs>>): Prisma__CollaborationSessionClient<$Result.GetResult<Prisma.$CollaborationSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollaborationMessage model
   */ 
  interface CollaborationMessageFieldRefs {
    readonly id: FieldRef<"CollaborationMessage", 'String'>
    readonly sessionId: FieldRef<"CollaborationMessage", 'String'>
    readonly senderId: FieldRef<"CollaborationMessage", 'String'>
    readonly recipientId: FieldRef<"CollaborationMessage", 'String'>
    readonly type: FieldRef<"CollaborationMessage", 'String'>
    readonly content: FieldRef<"CollaborationMessage", 'String'>
    readonly metadata: FieldRef<"CollaborationMessage", 'String'>
    readonly createdAt: FieldRef<"CollaborationMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CollaborationMessage findUnique
   */
  export type CollaborationMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationMessage to fetch.
     */
    where: CollaborationMessageWhereUniqueInput
  }

  /**
   * CollaborationMessage findUniqueOrThrow
   */
  export type CollaborationMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationMessage to fetch.
     */
    where: CollaborationMessageWhereUniqueInput
  }

  /**
   * CollaborationMessage findFirst
   */
  export type CollaborationMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationMessage to fetch.
     */
    where?: CollaborationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationMessages to fetch.
     */
    orderBy?: CollaborationMessageOrderByWithRelationInput | CollaborationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationMessages.
     */
    cursor?: CollaborationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationMessages.
     */
    distinct?: CollaborationMessageScalarFieldEnum | CollaborationMessageScalarFieldEnum[]
  }

  /**
   * CollaborationMessage findFirstOrThrow
   */
  export type CollaborationMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationMessage to fetch.
     */
    where?: CollaborationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationMessages to fetch.
     */
    orderBy?: CollaborationMessageOrderByWithRelationInput | CollaborationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationMessages.
     */
    cursor?: CollaborationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationMessages.
     */
    distinct?: CollaborationMessageScalarFieldEnum | CollaborationMessageScalarFieldEnum[]
  }

  /**
   * CollaborationMessage findMany
   */
  export type CollaborationMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationMessages to fetch.
     */
    where?: CollaborationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationMessages to fetch.
     */
    orderBy?: CollaborationMessageOrderByWithRelationInput | CollaborationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollaborationMessages.
     */
    cursor?: CollaborationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationMessages.
     */
    skip?: number
    distinct?: CollaborationMessageScalarFieldEnum | CollaborationMessageScalarFieldEnum[]
  }

  /**
   * CollaborationMessage create
   */
  export type CollaborationMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a CollaborationMessage.
     */
    data: XOR<CollaborationMessageCreateInput, CollaborationMessageUncheckedCreateInput>
  }

  /**
   * CollaborationMessage createMany
   */
  export type CollaborationMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollaborationMessages.
     */
    data: CollaborationMessageCreateManyInput | CollaborationMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollaborationMessage createManyAndReturn
   */
  export type CollaborationMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CollaborationMessages.
     */
    data: CollaborationMessageCreateManyInput | CollaborationMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollaborationMessage update
   */
  export type CollaborationMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a CollaborationMessage.
     */
    data: XOR<CollaborationMessageUpdateInput, CollaborationMessageUncheckedUpdateInput>
    /**
     * Choose, which CollaborationMessage to update.
     */
    where: CollaborationMessageWhereUniqueInput
  }

  /**
   * CollaborationMessage updateMany
   */
  export type CollaborationMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollaborationMessages.
     */
    data: XOR<CollaborationMessageUpdateManyMutationInput, CollaborationMessageUncheckedUpdateManyInput>
    /**
     * Filter which CollaborationMessages to update
     */
    where?: CollaborationMessageWhereInput
  }

  /**
   * CollaborationMessage upsert
   */
  export type CollaborationMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the CollaborationMessage to update in case it exists.
     */
    where: CollaborationMessageWhereUniqueInput
    /**
     * In case the CollaborationMessage found by the `where` argument doesn't exist, create a new CollaborationMessage with this data.
     */
    create: XOR<CollaborationMessageCreateInput, CollaborationMessageUncheckedCreateInput>
    /**
     * In case the CollaborationMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollaborationMessageUpdateInput, CollaborationMessageUncheckedUpdateInput>
  }

  /**
   * CollaborationMessage delete
   */
  export type CollaborationMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
    /**
     * Filter which CollaborationMessage to delete.
     */
    where: CollaborationMessageWhereUniqueInput
  }

  /**
   * CollaborationMessage deleteMany
   */
  export type CollaborationMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationMessages to delete
     */
    where?: CollaborationMessageWhereInput
  }

  /**
   * CollaborationMessage without action
   */
  export type CollaborationMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationMessage
     */
    select?: CollaborationMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationMessageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    repository: 'repository',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const AgentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    role: 'role',
    provider: 'provider',
    model: 'model',
    systemPrompt: 'systemPrompt',
    projectId: 'projectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgentScalarFieldEnum = (typeof AgentScalarFieldEnum)[keyof typeof AgentScalarFieldEnum]


  export const AgentStateScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    context: 'context',
    shortTerm: 'shortTerm',
    longTerm: 'longTerm',
    currentTask: 'currentTask',
    updatedAt: 'updatedAt'
  };

  export type AgentStateScalarFieldEnum = (typeof AgentStateScalarFieldEnum)[keyof typeof AgentStateScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    dependencies: 'dependencies',
    projectId: 'projectId',
    agentId: 'agentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const ProjectContextScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    architecture: 'architecture',
    technical: 'technical',
    requirements: 'requirements',
    dependencies: 'dependencies',
    updatedAt: 'updatedAt'
  };

  export type ProjectContextScalarFieldEnum = (typeof ProjectContextScalarFieldEnum)[keyof typeof ProjectContextScalarFieldEnum]


  export const LearningProfileScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    totalTasks: 'totalTasks',
    successfulTasks: 'successfulTasks',
    failedTasks: 'failedTasks',
    averageMetrics: 'averageMetrics',
    learningRate: 'learningRate',
    lastUpdated: 'lastUpdated'
  };

  export type LearningProfileScalarFieldEnum = (typeof LearningProfileScalarFieldEnum)[keyof typeof LearningProfileScalarFieldEnum]


  export const LearningSkillScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    data: 'data'
  };

  export type LearningSkillScalarFieldEnum = (typeof LearningSkillScalarFieldEnum)[keyof typeof LearningSkillScalarFieldEnum]


  export const LearningSpecializationScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    data: 'data'
  };

  export type LearningSpecializationScalarFieldEnum = (typeof LearningSpecializationScalarFieldEnum)[keyof typeof LearningSpecializationScalarFieldEnum]


  export const LearningMetricScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    data: 'data',
    timestamp: 'timestamp'
  };

  export type LearningMetricScalarFieldEnum = (typeof LearningMetricScalarFieldEnum)[keyof typeof LearningMetricScalarFieldEnum]


  export const CollaborationSessionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    status: 'status',
    context: 'context',
    workflow: 'workflow',
    protocol: 'protocol',
    metrics: 'metrics',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CollaborationSessionScalarFieldEnum = (typeof CollaborationSessionScalarFieldEnum)[keyof typeof CollaborationSessionScalarFieldEnum]


  export const CollaborationParticipantScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    agentId: 'agentId',
    role: 'role',
    status: 'status',
    contribution: 'contribution',
    feedback: 'feedback',
    timestamp: 'timestamp'
  };

  export type CollaborationParticipantScalarFieldEnum = (typeof CollaborationParticipantScalarFieldEnum)[keyof typeof CollaborationParticipantScalarFieldEnum]


  export const CollaborationMessageScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    senderId: 'senderId',
    recipientId: 'recipientId',
    type: 'type',
    content: 'content',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type CollaborationMessageScalarFieldEnum = (typeof CollaborationMessageScalarFieldEnum)[keyof typeof CollaborationMessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    status?: StringFilter<"Project"> | string
    repository?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    agents?: AgentListRelationFilter
    tasks?: TaskListRelationFilter
    context?: XOR<ProjectContextNullableRelationFilter, ProjectContextWhereInput> | null
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    repository?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agents?: AgentOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    context?: ProjectContextOrderByWithRelationInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    status?: StringFilter<"Project"> | string
    repository?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    agents?: AgentListRelationFilter
    tasks?: TaskListRelationFilter
    context?: XOR<ProjectContextNullableRelationFilter, ProjectContextWhereInput> | null
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    repository?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringWithAggregatesFilter<"Project"> | string
    status?: StringWithAggregatesFilter<"Project"> | string
    repository?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type AgentWhereInput = {
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    id?: StringFilter<"Agent"> | string
    name?: StringFilter<"Agent"> | string
    role?: StringFilter<"Agent"> | string
    provider?: StringFilter<"Agent"> | string
    model?: StringFilter<"Agent"> | string
    systemPrompt?: StringFilter<"Agent"> | string
    projectId?: StringFilter<"Agent"> | string
    createdAt?: DateTimeFilter<"Agent"> | Date | string
    updatedAt?: DateTimeFilter<"Agent"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    tasks?: TaskListRelationFilter
    state?: XOR<AgentStateNullableRelationFilter, AgentStateWhereInput> | null
    learningProfile?: XOR<LearningProfileNullableRelationFilter, LearningProfileWhereInput> | null
  }

  export type AgentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    model?: SortOrder
    systemPrompt?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
    state?: AgentStateOrderByWithRelationInput
    learningProfile?: LearningProfileOrderByWithRelationInput
  }

  export type AgentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    name?: StringFilter<"Agent"> | string
    role?: StringFilter<"Agent"> | string
    provider?: StringFilter<"Agent"> | string
    model?: StringFilter<"Agent"> | string
    systemPrompt?: StringFilter<"Agent"> | string
    projectId?: StringFilter<"Agent"> | string
    createdAt?: DateTimeFilter<"Agent"> | Date | string
    updatedAt?: DateTimeFilter<"Agent"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    tasks?: TaskListRelationFilter
    state?: XOR<AgentStateNullableRelationFilter, AgentStateWhereInput> | null
    learningProfile?: XOR<LearningProfileNullableRelationFilter, LearningProfileWhereInput> | null
  }, "id">

  export type AgentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    model?: SortOrder
    systemPrompt?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgentCountOrderByAggregateInput
    _max?: AgentMaxOrderByAggregateInput
    _min?: AgentMinOrderByAggregateInput
  }

  export type AgentScalarWhereWithAggregatesInput = {
    AND?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    OR?: AgentScalarWhereWithAggregatesInput[]
    NOT?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agent"> | string
    name?: StringWithAggregatesFilter<"Agent"> | string
    role?: StringWithAggregatesFilter<"Agent"> | string
    provider?: StringWithAggregatesFilter<"Agent"> | string
    model?: StringWithAggregatesFilter<"Agent"> | string
    systemPrompt?: StringWithAggregatesFilter<"Agent"> | string
    projectId?: StringWithAggregatesFilter<"Agent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Agent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Agent"> | Date | string
  }

  export type AgentStateWhereInput = {
    AND?: AgentStateWhereInput | AgentStateWhereInput[]
    OR?: AgentStateWhereInput[]
    NOT?: AgentStateWhereInput | AgentStateWhereInput[]
    id?: StringFilter<"AgentState"> | string
    agentId?: StringFilter<"AgentState"> | string
    context?: StringFilter<"AgentState"> | string
    shortTerm?: StringFilter<"AgentState"> | string
    longTerm?: StringFilter<"AgentState"> | string
    currentTask?: StringNullableFilter<"AgentState"> | string | null
    updatedAt?: DateTimeFilter<"AgentState"> | Date | string
    agent?: XOR<AgentRelationFilter, AgentWhereInput>
  }

  export type AgentStateOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    context?: SortOrder
    shortTerm?: SortOrder
    longTerm?: SortOrder
    currentTask?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type AgentStateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    agentId?: string
    AND?: AgentStateWhereInput | AgentStateWhereInput[]
    OR?: AgentStateWhereInput[]
    NOT?: AgentStateWhereInput | AgentStateWhereInput[]
    context?: StringFilter<"AgentState"> | string
    shortTerm?: StringFilter<"AgentState"> | string
    longTerm?: StringFilter<"AgentState"> | string
    currentTask?: StringNullableFilter<"AgentState"> | string | null
    updatedAt?: DateTimeFilter<"AgentState"> | Date | string
    agent?: XOR<AgentRelationFilter, AgentWhereInput>
  }, "id" | "agentId">

  export type AgentStateOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    context?: SortOrder
    shortTerm?: SortOrder
    longTerm?: SortOrder
    currentTask?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: AgentStateCountOrderByAggregateInput
    _max?: AgentStateMaxOrderByAggregateInput
    _min?: AgentStateMinOrderByAggregateInput
  }

  export type AgentStateScalarWhereWithAggregatesInput = {
    AND?: AgentStateScalarWhereWithAggregatesInput | AgentStateScalarWhereWithAggregatesInput[]
    OR?: AgentStateScalarWhereWithAggregatesInput[]
    NOT?: AgentStateScalarWhereWithAggregatesInput | AgentStateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AgentState"> | string
    agentId?: StringWithAggregatesFilter<"AgentState"> | string
    context?: StringWithAggregatesFilter<"AgentState"> | string
    shortTerm?: StringWithAggregatesFilter<"AgentState"> | string
    longTerm?: StringWithAggregatesFilter<"AgentState"> | string
    currentTask?: StringNullableWithAggregatesFilter<"AgentState"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"AgentState"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    dependencies?: StringFilter<"Task"> | string
    projectId?: StringFilter<"Task"> | string
    agentId?: StringNullableFilter<"Task"> | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    agent?: XOR<AgentNullableRelationFilter, AgentWhereInput> | null
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dependencies?: SortOrder
    projectId?: SortOrder
    agentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    agent?: AgentOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    dependencies?: StringFilter<"Task"> | string
    projectId?: StringFilter<"Task"> | string
    agentId?: StringNullableFilter<"Task"> | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    agent?: XOR<AgentNullableRelationFilter, AgentWhereInput> | null
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dependencies?: SortOrder
    projectId?: SortOrder
    agentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringWithAggregatesFilter<"Task"> | string
    status?: StringWithAggregatesFilter<"Task"> | string
    priority?: StringWithAggregatesFilter<"Task"> | string
    dependencies?: StringWithAggregatesFilter<"Task"> | string
    projectId?: StringWithAggregatesFilter<"Task"> | string
    agentId?: StringNullableWithAggregatesFilter<"Task"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type ProjectContextWhereInput = {
    AND?: ProjectContextWhereInput | ProjectContextWhereInput[]
    OR?: ProjectContextWhereInput[]
    NOT?: ProjectContextWhereInput | ProjectContextWhereInput[]
    id?: StringFilter<"ProjectContext"> | string
    projectId?: StringFilter<"ProjectContext"> | string
    architecture?: StringFilter<"ProjectContext"> | string
    technical?: StringFilter<"ProjectContext"> | string
    requirements?: StringFilter<"ProjectContext"> | string
    dependencies?: StringFilter<"ProjectContext"> | string
    updatedAt?: DateTimeFilter<"ProjectContext"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ProjectContextOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    architecture?: SortOrder
    technical?: SortOrder
    requirements?: SortOrder
    dependencies?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectContextWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId?: string
    AND?: ProjectContextWhereInput | ProjectContextWhereInput[]
    OR?: ProjectContextWhereInput[]
    NOT?: ProjectContextWhereInput | ProjectContextWhereInput[]
    architecture?: StringFilter<"ProjectContext"> | string
    technical?: StringFilter<"ProjectContext"> | string
    requirements?: StringFilter<"ProjectContext"> | string
    dependencies?: StringFilter<"ProjectContext"> | string
    updatedAt?: DateTimeFilter<"ProjectContext"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id" | "projectId">

  export type ProjectContextOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    architecture?: SortOrder
    technical?: SortOrder
    requirements?: SortOrder
    dependencies?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectContextCountOrderByAggregateInput
    _max?: ProjectContextMaxOrderByAggregateInput
    _min?: ProjectContextMinOrderByAggregateInput
  }

  export type ProjectContextScalarWhereWithAggregatesInput = {
    AND?: ProjectContextScalarWhereWithAggregatesInput | ProjectContextScalarWhereWithAggregatesInput[]
    OR?: ProjectContextScalarWhereWithAggregatesInput[]
    NOT?: ProjectContextScalarWhereWithAggregatesInput | ProjectContextScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectContext"> | string
    projectId?: StringWithAggregatesFilter<"ProjectContext"> | string
    architecture?: StringWithAggregatesFilter<"ProjectContext"> | string
    technical?: StringWithAggregatesFilter<"ProjectContext"> | string
    requirements?: StringWithAggregatesFilter<"ProjectContext"> | string
    dependencies?: StringWithAggregatesFilter<"ProjectContext"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProjectContext"> | Date | string
  }

  export type LearningProfileWhereInput = {
    AND?: LearningProfileWhereInput | LearningProfileWhereInput[]
    OR?: LearningProfileWhereInput[]
    NOT?: LearningProfileWhereInput | LearningProfileWhereInput[]
    id?: StringFilter<"LearningProfile"> | string
    agentId?: StringFilter<"LearningProfile"> | string
    totalTasks?: IntFilter<"LearningProfile"> | number
    successfulTasks?: IntFilter<"LearningProfile"> | number
    failedTasks?: IntFilter<"LearningProfile"> | number
    averageMetrics?: StringFilter<"LearningProfile"> | string
    learningRate?: FloatFilter<"LearningProfile"> | number
    lastUpdated?: DateTimeFilter<"LearningProfile"> | Date | string
    agent?: XOR<AgentRelationFilter, AgentWhereInput>
    skills?: LearningSkillListRelationFilter
    specializations?: LearningSpecializationListRelationFilter
    metrics?: LearningMetricListRelationFilter
  }

  export type LearningProfileOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    totalTasks?: SortOrder
    successfulTasks?: SortOrder
    failedTasks?: SortOrder
    averageMetrics?: SortOrder
    learningRate?: SortOrder
    lastUpdated?: SortOrder
    agent?: AgentOrderByWithRelationInput
    skills?: LearningSkillOrderByRelationAggregateInput
    specializations?: LearningSpecializationOrderByRelationAggregateInput
    metrics?: LearningMetricOrderByRelationAggregateInput
  }

  export type LearningProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    agentId?: string
    AND?: LearningProfileWhereInput | LearningProfileWhereInput[]
    OR?: LearningProfileWhereInput[]
    NOT?: LearningProfileWhereInput | LearningProfileWhereInput[]
    totalTasks?: IntFilter<"LearningProfile"> | number
    successfulTasks?: IntFilter<"LearningProfile"> | number
    failedTasks?: IntFilter<"LearningProfile"> | number
    averageMetrics?: StringFilter<"LearningProfile"> | string
    learningRate?: FloatFilter<"LearningProfile"> | number
    lastUpdated?: DateTimeFilter<"LearningProfile"> | Date | string
    agent?: XOR<AgentRelationFilter, AgentWhereInput>
    skills?: LearningSkillListRelationFilter
    specializations?: LearningSpecializationListRelationFilter
    metrics?: LearningMetricListRelationFilter
  }, "id" | "agentId">

  export type LearningProfileOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    totalTasks?: SortOrder
    successfulTasks?: SortOrder
    failedTasks?: SortOrder
    averageMetrics?: SortOrder
    learningRate?: SortOrder
    lastUpdated?: SortOrder
    _count?: LearningProfileCountOrderByAggregateInput
    _avg?: LearningProfileAvgOrderByAggregateInput
    _max?: LearningProfileMaxOrderByAggregateInput
    _min?: LearningProfileMinOrderByAggregateInput
    _sum?: LearningProfileSumOrderByAggregateInput
  }

  export type LearningProfileScalarWhereWithAggregatesInput = {
    AND?: LearningProfileScalarWhereWithAggregatesInput | LearningProfileScalarWhereWithAggregatesInput[]
    OR?: LearningProfileScalarWhereWithAggregatesInput[]
    NOT?: LearningProfileScalarWhereWithAggregatesInput | LearningProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LearningProfile"> | string
    agentId?: StringWithAggregatesFilter<"LearningProfile"> | string
    totalTasks?: IntWithAggregatesFilter<"LearningProfile"> | number
    successfulTasks?: IntWithAggregatesFilter<"LearningProfile"> | number
    failedTasks?: IntWithAggregatesFilter<"LearningProfile"> | number
    averageMetrics?: StringWithAggregatesFilter<"LearningProfile"> | string
    learningRate?: FloatWithAggregatesFilter<"LearningProfile"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"LearningProfile"> | Date | string
  }

  export type LearningSkillWhereInput = {
    AND?: LearningSkillWhereInput | LearningSkillWhereInput[]
    OR?: LearningSkillWhereInput[]
    NOT?: LearningSkillWhereInput | LearningSkillWhereInput[]
    id?: StringFilter<"LearningSkill"> | string
    profileId?: StringFilter<"LearningSkill"> | string
    data?: StringFilter<"LearningSkill"> | string
    profile?: XOR<LearningProfileRelationFilter, LearningProfileWhereInput>
  }

  export type LearningSkillOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    profile?: LearningProfileOrderByWithRelationInput
  }

  export type LearningSkillWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LearningSkillWhereInput | LearningSkillWhereInput[]
    OR?: LearningSkillWhereInput[]
    NOT?: LearningSkillWhereInput | LearningSkillWhereInput[]
    profileId?: StringFilter<"LearningSkill"> | string
    data?: StringFilter<"LearningSkill"> | string
    profile?: XOR<LearningProfileRelationFilter, LearningProfileWhereInput>
  }, "id">

  export type LearningSkillOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    _count?: LearningSkillCountOrderByAggregateInput
    _max?: LearningSkillMaxOrderByAggregateInput
    _min?: LearningSkillMinOrderByAggregateInput
  }

  export type LearningSkillScalarWhereWithAggregatesInput = {
    AND?: LearningSkillScalarWhereWithAggregatesInput | LearningSkillScalarWhereWithAggregatesInput[]
    OR?: LearningSkillScalarWhereWithAggregatesInput[]
    NOT?: LearningSkillScalarWhereWithAggregatesInput | LearningSkillScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LearningSkill"> | string
    profileId?: StringWithAggregatesFilter<"LearningSkill"> | string
    data?: StringWithAggregatesFilter<"LearningSkill"> | string
  }

  export type LearningSpecializationWhereInput = {
    AND?: LearningSpecializationWhereInput | LearningSpecializationWhereInput[]
    OR?: LearningSpecializationWhereInput[]
    NOT?: LearningSpecializationWhereInput | LearningSpecializationWhereInput[]
    id?: StringFilter<"LearningSpecialization"> | string
    profileId?: StringFilter<"LearningSpecialization"> | string
    data?: StringFilter<"LearningSpecialization"> | string
    profile?: XOR<LearningProfileRelationFilter, LearningProfileWhereInput>
  }

  export type LearningSpecializationOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    profile?: LearningProfileOrderByWithRelationInput
  }

  export type LearningSpecializationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LearningSpecializationWhereInput | LearningSpecializationWhereInput[]
    OR?: LearningSpecializationWhereInput[]
    NOT?: LearningSpecializationWhereInput | LearningSpecializationWhereInput[]
    profileId?: StringFilter<"LearningSpecialization"> | string
    data?: StringFilter<"LearningSpecialization"> | string
    profile?: XOR<LearningProfileRelationFilter, LearningProfileWhereInput>
  }, "id">

  export type LearningSpecializationOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    _count?: LearningSpecializationCountOrderByAggregateInput
    _max?: LearningSpecializationMaxOrderByAggregateInput
    _min?: LearningSpecializationMinOrderByAggregateInput
  }

  export type LearningSpecializationScalarWhereWithAggregatesInput = {
    AND?: LearningSpecializationScalarWhereWithAggregatesInput | LearningSpecializationScalarWhereWithAggregatesInput[]
    OR?: LearningSpecializationScalarWhereWithAggregatesInput[]
    NOT?: LearningSpecializationScalarWhereWithAggregatesInput | LearningSpecializationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LearningSpecialization"> | string
    profileId?: StringWithAggregatesFilter<"LearningSpecialization"> | string
    data?: StringWithAggregatesFilter<"LearningSpecialization"> | string
  }

  export type LearningMetricWhereInput = {
    AND?: LearningMetricWhereInput | LearningMetricWhereInput[]
    OR?: LearningMetricWhereInput[]
    NOT?: LearningMetricWhereInput | LearningMetricWhereInput[]
    id?: StringFilter<"LearningMetric"> | string
    profileId?: StringFilter<"LearningMetric"> | string
    data?: StringFilter<"LearningMetric"> | string
    timestamp?: DateTimeFilter<"LearningMetric"> | Date | string
    profile?: XOR<LearningProfileRelationFilter, LearningProfileWhereInput>
  }

  export type LearningMetricOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    profile?: LearningProfileOrderByWithRelationInput
  }

  export type LearningMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LearningMetricWhereInput | LearningMetricWhereInput[]
    OR?: LearningMetricWhereInput[]
    NOT?: LearningMetricWhereInput | LearningMetricWhereInput[]
    profileId?: StringFilter<"LearningMetric"> | string
    data?: StringFilter<"LearningMetric"> | string
    timestamp?: DateTimeFilter<"LearningMetric"> | Date | string
    profile?: XOR<LearningProfileRelationFilter, LearningProfileWhereInput>
  }, "id">

  export type LearningMetricOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    _count?: LearningMetricCountOrderByAggregateInput
    _max?: LearningMetricMaxOrderByAggregateInput
    _min?: LearningMetricMinOrderByAggregateInput
  }

  export type LearningMetricScalarWhereWithAggregatesInput = {
    AND?: LearningMetricScalarWhereWithAggregatesInput | LearningMetricScalarWhereWithAggregatesInput[]
    OR?: LearningMetricScalarWhereWithAggregatesInput[]
    NOT?: LearningMetricScalarWhereWithAggregatesInput | LearningMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LearningMetric"> | string
    profileId?: StringWithAggregatesFilter<"LearningMetric"> | string
    data?: StringWithAggregatesFilter<"LearningMetric"> | string
    timestamp?: DateTimeWithAggregatesFilter<"LearningMetric"> | Date | string
  }

  export type CollaborationSessionWhereInput = {
    AND?: CollaborationSessionWhereInput | CollaborationSessionWhereInput[]
    OR?: CollaborationSessionWhereInput[]
    NOT?: CollaborationSessionWhereInput | CollaborationSessionWhereInput[]
    id?: StringFilter<"CollaborationSession"> | string
    type?: StringFilter<"CollaborationSession"> | string
    status?: StringFilter<"CollaborationSession"> | string
    context?: StringFilter<"CollaborationSession"> | string
    workflow?: StringFilter<"CollaborationSession"> | string
    protocol?: StringFilter<"CollaborationSession"> | string
    metrics?: StringNullableFilter<"CollaborationSession"> | string | null
    createdAt?: DateTimeFilter<"CollaborationSession"> | Date | string
    updatedAt?: DateTimeFilter<"CollaborationSession"> | Date | string
    participants?: CollaborationParticipantListRelationFilter
    messages?: CollaborationMessageListRelationFilter
  }

  export type CollaborationSessionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    context?: SortOrder
    workflow?: SortOrder
    protocol?: SortOrder
    metrics?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    participants?: CollaborationParticipantOrderByRelationAggregateInput
    messages?: CollaborationMessageOrderByRelationAggregateInput
  }

  export type CollaborationSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollaborationSessionWhereInput | CollaborationSessionWhereInput[]
    OR?: CollaborationSessionWhereInput[]
    NOT?: CollaborationSessionWhereInput | CollaborationSessionWhereInput[]
    type?: StringFilter<"CollaborationSession"> | string
    status?: StringFilter<"CollaborationSession"> | string
    context?: StringFilter<"CollaborationSession"> | string
    workflow?: StringFilter<"CollaborationSession"> | string
    protocol?: StringFilter<"CollaborationSession"> | string
    metrics?: StringNullableFilter<"CollaborationSession"> | string | null
    createdAt?: DateTimeFilter<"CollaborationSession"> | Date | string
    updatedAt?: DateTimeFilter<"CollaborationSession"> | Date | string
    participants?: CollaborationParticipantListRelationFilter
    messages?: CollaborationMessageListRelationFilter
  }, "id">

  export type CollaborationSessionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    context?: SortOrder
    workflow?: SortOrder
    protocol?: SortOrder
    metrics?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CollaborationSessionCountOrderByAggregateInput
    _max?: CollaborationSessionMaxOrderByAggregateInput
    _min?: CollaborationSessionMinOrderByAggregateInput
  }

  export type CollaborationSessionScalarWhereWithAggregatesInput = {
    AND?: CollaborationSessionScalarWhereWithAggregatesInput | CollaborationSessionScalarWhereWithAggregatesInput[]
    OR?: CollaborationSessionScalarWhereWithAggregatesInput[]
    NOT?: CollaborationSessionScalarWhereWithAggregatesInput | CollaborationSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollaborationSession"> | string
    type?: StringWithAggregatesFilter<"CollaborationSession"> | string
    status?: StringWithAggregatesFilter<"CollaborationSession"> | string
    context?: StringWithAggregatesFilter<"CollaborationSession"> | string
    workflow?: StringWithAggregatesFilter<"CollaborationSession"> | string
    protocol?: StringWithAggregatesFilter<"CollaborationSession"> | string
    metrics?: StringNullableWithAggregatesFilter<"CollaborationSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CollaborationSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CollaborationSession"> | Date | string
  }

  export type CollaborationParticipantWhereInput = {
    AND?: CollaborationParticipantWhereInput | CollaborationParticipantWhereInput[]
    OR?: CollaborationParticipantWhereInput[]
    NOT?: CollaborationParticipantWhereInput | CollaborationParticipantWhereInput[]
    id?: StringFilter<"CollaborationParticipant"> | string
    sessionId?: StringFilter<"CollaborationParticipant"> | string
    agentId?: StringFilter<"CollaborationParticipant"> | string
    role?: StringFilter<"CollaborationParticipant"> | string
    status?: StringFilter<"CollaborationParticipant"> | string
    contribution?: StringNullableFilter<"CollaborationParticipant"> | string | null
    feedback?: StringNullableFilter<"CollaborationParticipant"> | string | null
    timestamp?: DateTimeFilter<"CollaborationParticipant"> | Date | string
    session?: XOR<CollaborationSessionRelationFilter, CollaborationSessionWhereInput>
  }

  export type CollaborationParticipantOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    agentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    contribution?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    session?: CollaborationSessionOrderByWithRelationInput
  }

  export type CollaborationParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollaborationParticipantWhereInput | CollaborationParticipantWhereInput[]
    OR?: CollaborationParticipantWhereInput[]
    NOT?: CollaborationParticipantWhereInput | CollaborationParticipantWhereInput[]
    sessionId?: StringFilter<"CollaborationParticipant"> | string
    agentId?: StringFilter<"CollaborationParticipant"> | string
    role?: StringFilter<"CollaborationParticipant"> | string
    status?: StringFilter<"CollaborationParticipant"> | string
    contribution?: StringNullableFilter<"CollaborationParticipant"> | string | null
    feedback?: StringNullableFilter<"CollaborationParticipant"> | string | null
    timestamp?: DateTimeFilter<"CollaborationParticipant"> | Date | string
    session?: XOR<CollaborationSessionRelationFilter, CollaborationSessionWhereInput>
  }, "id">

  export type CollaborationParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    agentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    contribution?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: CollaborationParticipantCountOrderByAggregateInput
    _max?: CollaborationParticipantMaxOrderByAggregateInput
    _min?: CollaborationParticipantMinOrderByAggregateInput
  }

  export type CollaborationParticipantScalarWhereWithAggregatesInput = {
    AND?: CollaborationParticipantScalarWhereWithAggregatesInput | CollaborationParticipantScalarWhereWithAggregatesInput[]
    OR?: CollaborationParticipantScalarWhereWithAggregatesInput[]
    NOT?: CollaborationParticipantScalarWhereWithAggregatesInput | CollaborationParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollaborationParticipant"> | string
    sessionId?: StringWithAggregatesFilter<"CollaborationParticipant"> | string
    agentId?: StringWithAggregatesFilter<"CollaborationParticipant"> | string
    role?: StringWithAggregatesFilter<"CollaborationParticipant"> | string
    status?: StringWithAggregatesFilter<"CollaborationParticipant"> | string
    contribution?: StringNullableWithAggregatesFilter<"CollaborationParticipant"> | string | null
    feedback?: StringNullableWithAggregatesFilter<"CollaborationParticipant"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"CollaborationParticipant"> | Date | string
  }

  export type CollaborationMessageWhereInput = {
    AND?: CollaborationMessageWhereInput | CollaborationMessageWhereInput[]
    OR?: CollaborationMessageWhereInput[]
    NOT?: CollaborationMessageWhereInput | CollaborationMessageWhereInput[]
    id?: StringFilter<"CollaborationMessage"> | string
    sessionId?: StringFilter<"CollaborationMessage"> | string
    senderId?: StringFilter<"CollaborationMessage"> | string
    recipientId?: StringNullableFilter<"CollaborationMessage"> | string | null
    type?: StringFilter<"CollaborationMessage"> | string
    content?: StringFilter<"CollaborationMessage"> | string
    metadata?: StringFilter<"CollaborationMessage"> | string
    createdAt?: DateTimeFilter<"CollaborationMessage"> | Date | string
    session?: XOR<CollaborationSessionRelationFilter, CollaborationSessionWhereInput>
  }

  export type CollaborationMessageOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrderInput | SortOrder
    type?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    session?: CollaborationSessionOrderByWithRelationInput
  }

  export type CollaborationMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollaborationMessageWhereInput | CollaborationMessageWhereInput[]
    OR?: CollaborationMessageWhereInput[]
    NOT?: CollaborationMessageWhereInput | CollaborationMessageWhereInput[]
    sessionId?: StringFilter<"CollaborationMessage"> | string
    senderId?: StringFilter<"CollaborationMessage"> | string
    recipientId?: StringNullableFilter<"CollaborationMessage"> | string | null
    type?: StringFilter<"CollaborationMessage"> | string
    content?: StringFilter<"CollaborationMessage"> | string
    metadata?: StringFilter<"CollaborationMessage"> | string
    createdAt?: DateTimeFilter<"CollaborationMessage"> | Date | string
    session?: XOR<CollaborationSessionRelationFilter, CollaborationSessionWhereInput>
  }, "id">

  export type CollaborationMessageOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrderInput | SortOrder
    type?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    _count?: CollaborationMessageCountOrderByAggregateInput
    _max?: CollaborationMessageMaxOrderByAggregateInput
    _min?: CollaborationMessageMinOrderByAggregateInput
  }

  export type CollaborationMessageScalarWhereWithAggregatesInput = {
    AND?: CollaborationMessageScalarWhereWithAggregatesInput | CollaborationMessageScalarWhereWithAggregatesInput[]
    OR?: CollaborationMessageScalarWhereWithAggregatesInput[]
    NOT?: CollaborationMessageScalarWhereWithAggregatesInput | CollaborationMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollaborationMessage"> | string
    sessionId?: StringWithAggregatesFilter<"CollaborationMessage"> | string
    senderId?: StringWithAggregatesFilter<"CollaborationMessage"> | string
    recipientId?: StringNullableWithAggregatesFilter<"CollaborationMessage"> | string | null
    type?: StringWithAggregatesFilter<"CollaborationMessage"> | string
    content?: StringWithAggregatesFilter<"CollaborationMessage"> | string
    metadata?: StringWithAggregatesFilter<"CollaborationMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CollaborationMessage"> | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agents?: AgentCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    context?: ProjectContextCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agents?: AgentUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    context?: ProjectContextUncheckedCreateNestedOneWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agents?: AgentUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    context?: ProjectContextUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agents?: AgentUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    context?: ProjectContextUncheckedUpdateOneWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentCreateInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAgentsInput
    tasks?: TaskCreateNestedManyWithoutAgentInput
    state?: AgentStateCreateNestedOneWithoutAgentInput
    learningProfile?: LearningProfileCreateNestedOneWithoutAgentInput
  }

  export type AgentUncheckedCreateInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutAgentInput
    state?: AgentStateUncheckedCreateNestedOneWithoutAgentInput
    learningProfile?: LearningProfileUncheckedCreateNestedOneWithoutAgentInput
  }

  export type AgentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAgentsNestedInput
    tasks?: TaskUpdateManyWithoutAgentNestedInput
    state?: AgentStateUpdateOneWithoutAgentNestedInput
    learningProfile?: LearningProfileUpdateOneWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutAgentNestedInput
    state?: AgentStateUncheckedUpdateOneWithoutAgentNestedInput
    learningProfile?: LearningProfileUncheckedUpdateOneWithoutAgentNestedInput
  }

  export type AgentCreateManyInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentStateCreateInput = {
    id?: string
    context?: string
    shortTerm?: string
    longTerm?: string
    currentTask?: string | null
    updatedAt?: Date | string
    agent: AgentCreateNestedOneWithoutStateInput
  }

  export type AgentStateUncheckedCreateInput = {
    id?: string
    agentId: string
    context?: string
    shortTerm?: string
    longTerm?: string
    currentTask?: string | null
    updatedAt?: Date | string
  }

  export type AgentStateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    shortTerm?: StringFieldUpdateOperationsInput | string
    longTerm?: StringFieldUpdateOperationsInput | string
    currentTask?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutStateNestedInput
  }

  export type AgentStateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    shortTerm?: StringFieldUpdateOperationsInput | string
    longTerm?: StringFieldUpdateOperationsInput | string
    currentTask?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentStateCreateManyInput = {
    id?: string
    agentId: string
    context?: string
    shortTerm?: string
    longTerm?: string
    currentTask?: string | null
    updatedAt?: Date | string
  }

  export type AgentStateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    shortTerm?: StringFieldUpdateOperationsInput | string
    longTerm?: StringFieldUpdateOperationsInput | string
    currentTask?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentStateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    shortTerm?: StringFieldUpdateOperationsInput | string
    longTerm?: StringFieldUpdateOperationsInput | string
    currentTask?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    agent?: AgentCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    projectId: string
    agentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    agent?: AgentUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    projectId: string
    agentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectContextCreateInput = {
    id?: string
    architecture?: string
    technical?: string
    requirements?: string
    dependencies?: string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutContextInput
  }

  export type ProjectContextUncheckedCreateInput = {
    id?: string
    projectId: string
    architecture?: string
    technical?: string
    requirements?: string
    dependencies?: string
    updatedAt?: Date | string
  }

  export type ProjectContextUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    architecture?: StringFieldUpdateOperationsInput | string
    technical?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutContextNestedInput
  }

  export type ProjectContextUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    architecture?: StringFieldUpdateOperationsInput | string
    technical?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectContextCreateManyInput = {
    id?: string
    projectId: string
    architecture?: string
    technical?: string
    requirements?: string
    dependencies?: string
    updatedAt?: Date | string
  }

  export type ProjectContextUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    architecture?: StringFieldUpdateOperationsInput | string
    technical?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectContextUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    architecture?: StringFieldUpdateOperationsInput | string
    technical?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningProfileCreateInput = {
    id?: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    agent: AgentCreateNestedOneWithoutLearningProfileInput
    skills?: LearningSkillCreateNestedManyWithoutProfileInput
    specializations?: LearningSpecializationCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileUncheckedCreateInput = {
    id?: string
    agentId: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    skills?: LearningSkillUncheckedCreateNestedManyWithoutProfileInput
    specializations?: LearningSpecializationUncheckedCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricUncheckedCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutLearningProfileNestedInput
    skills?: LearningSkillUpdateManyWithoutProfileNestedInput
    specializations?: LearningSpecializationUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    skills?: LearningSkillUncheckedUpdateManyWithoutProfileNestedInput
    specializations?: LearningSpecializationUncheckedUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileCreateManyInput = {
    id?: string
    agentId: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
  }

  export type LearningProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningSkillCreateInput = {
    id?: string
    data: string
    profile: LearningProfileCreateNestedOneWithoutSkillsInput
  }

  export type LearningSkillUncheckedCreateInput = {
    id?: string
    profileId: string
    data: string
  }

  export type LearningSkillUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    profile?: LearningProfileUpdateOneRequiredWithoutSkillsNestedInput
  }

  export type LearningSkillUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSkillCreateManyInput = {
    id?: string
    profileId: string
    data: string
  }

  export type LearningSkillUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSkillUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSpecializationCreateInput = {
    id?: string
    data: string
    profile: LearningProfileCreateNestedOneWithoutSpecializationsInput
  }

  export type LearningSpecializationUncheckedCreateInput = {
    id?: string
    profileId: string
    data: string
  }

  export type LearningSpecializationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    profile?: LearningProfileUpdateOneRequiredWithoutSpecializationsNestedInput
  }

  export type LearningSpecializationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSpecializationCreateManyInput = {
    id?: string
    profileId: string
    data: string
  }

  export type LearningSpecializationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSpecializationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningMetricCreateInput = {
    id?: string
    data: string
    timestamp?: Date | string
    profile: LearningProfileCreateNestedOneWithoutMetricsInput
  }

  export type LearningMetricUncheckedCreateInput = {
    id?: string
    profileId: string
    data: string
    timestamp?: Date | string
  }

  export type LearningMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: LearningProfileUpdateOneRequiredWithoutMetricsNestedInput
  }

  export type LearningMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningMetricCreateManyInput = {
    id?: string
    profileId: string
    data: string
    timestamp?: Date | string
  }

  export type LearningMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationSessionCreateInput = {
    id?: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: CollaborationParticipantCreateNestedManyWithoutSessionInput
    messages?: CollaborationMessageCreateNestedManyWithoutSessionInput
  }

  export type CollaborationSessionUncheckedCreateInput = {
    id?: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: CollaborationParticipantUncheckedCreateNestedManyWithoutSessionInput
    messages?: CollaborationMessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CollaborationSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: CollaborationParticipantUpdateManyWithoutSessionNestedInput
    messages?: CollaborationMessageUpdateManyWithoutSessionNestedInput
  }

  export type CollaborationSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: CollaborationParticipantUncheckedUpdateManyWithoutSessionNestedInput
    messages?: CollaborationMessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type CollaborationSessionCreateManyInput = {
    id?: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollaborationSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationParticipantCreateInput = {
    id?: string
    agentId: string
    role: string
    status: string
    contribution?: string | null
    feedback?: string | null
    timestamp: Date | string
    session: CollaborationSessionCreateNestedOneWithoutParticipantsInput
  }

  export type CollaborationParticipantUncheckedCreateInput = {
    id?: string
    sessionId: string
    agentId: string
    role: string
    status: string
    contribution?: string | null
    feedback?: string | null
    timestamp: Date | string
  }

  export type CollaborationParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CollaborationSessionUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type CollaborationParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationParticipantCreateManyInput = {
    id?: string
    sessionId: string
    agentId: string
    role: string
    status: string
    contribution?: string | null
    feedback?: string | null
    timestamp: Date | string
  }

  export type CollaborationParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationMessageCreateInput = {
    id?: string
    senderId: string
    recipientId?: string | null
    type: string
    content: string
    metadata: string
    createdAt?: Date | string
    session: CollaborationSessionCreateNestedOneWithoutMessagesInput
  }

  export type CollaborationMessageUncheckedCreateInput = {
    id?: string
    sessionId: string
    senderId: string
    recipientId?: string | null
    type: string
    content: string
    metadata: string
    createdAt?: Date | string
  }

  export type CollaborationMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CollaborationSessionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type CollaborationMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationMessageCreateManyInput = {
    id?: string
    sessionId: string
    senderId: string
    recipientId?: string | null
    type: string
    content: string
    metadata: string
    createdAt?: Date | string
  }

  export type CollaborationMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AgentListRelationFilter = {
    every?: AgentWhereInput
    some?: AgentWhereInput
    none?: AgentWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type ProjectContextNullableRelationFilter = {
    is?: ProjectContextWhereInput | null
    isNot?: ProjectContextWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AgentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    repository?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    repository?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    repository?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type AgentStateNullableRelationFilter = {
    is?: AgentStateWhereInput | null
    isNot?: AgentStateWhereInput | null
  }

  export type LearningProfileNullableRelationFilter = {
    is?: LearningProfileWhereInput | null
    isNot?: LearningProfileWhereInput | null
  }

  export type AgentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    model?: SortOrder
    systemPrompt?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    model?: SortOrder
    systemPrompt?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    model?: SortOrder
    systemPrompt?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentRelationFilter = {
    is?: AgentWhereInput
    isNot?: AgentWhereInput
  }

  export type AgentStateCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    context?: SortOrder
    shortTerm?: SortOrder
    longTerm?: SortOrder
    currentTask?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentStateMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    context?: SortOrder
    shortTerm?: SortOrder
    longTerm?: SortOrder
    currentTask?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentStateMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    context?: SortOrder
    shortTerm?: SortOrder
    longTerm?: SortOrder
    currentTask?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentNullableRelationFilter = {
    is?: AgentWhereInput | null
    isNot?: AgentWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dependencies?: SortOrder
    projectId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dependencies?: SortOrder
    projectId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dependencies?: SortOrder
    projectId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectContextCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    architecture?: SortOrder
    technical?: SortOrder
    requirements?: SortOrder
    dependencies?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectContextMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    architecture?: SortOrder
    technical?: SortOrder
    requirements?: SortOrder
    dependencies?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectContextMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    architecture?: SortOrder
    technical?: SortOrder
    requirements?: SortOrder
    dependencies?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LearningSkillListRelationFilter = {
    every?: LearningSkillWhereInput
    some?: LearningSkillWhereInput
    none?: LearningSkillWhereInput
  }

  export type LearningSpecializationListRelationFilter = {
    every?: LearningSpecializationWhereInput
    some?: LearningSpecializationWhereInput
    none?: LearningSpecializationWhereInput
  }

  export type LearningMetricListRelationFilter = {
    every?: LearningMetricWhereInput
    some?: LearningMetricWhereInput
    none?: LearningMetricWhereInput
  }

  export type LearningSkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LearningSpecializationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LearningMetricOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LearningProfileCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    totalTasks?: SortOrder
    successfulTasks?: SortOrder
    failedTasks?: SortOrder
    averageMetrics?: SortOrder
    learningRate?: SortOrder
    lastUpdated?: SortOrder
  }

  export type LearningProfileAvgOrderByAggregateInput = {
    totalTasks?: SortOrder
    successfulTasks?: SortOrder
    failedTasks?: SortOrder
    learningRate?: SortOrder
  }

  export type LearningProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    totalTasks?: SortOrder
    successfulTasks?: SortOrder
    failedTasks?: SortOrder
    averageMetrics?: SortOrder
    learningRate?: SortOrder
    lastUpdated?: SortOrder
  }

  export type LearningProfileMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    totalTasks?: SortOrder
    successfulTasks?: SortOrder
    failedTasks?: SortOrder
    averageMetrics?: SortOrder
    learningRate?: SortOrder
    lastUpdated?: SortOrder
  }

  export type LearningProfileSumOrderByAggregateInput = {
    totalTasks?: SortOrder
    successfulTasks?: SortOrder
    failedTasks?: SortOrder
    learningRate?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LearningProfileRelationFilter = {
    is?: LearningProfileWhereInput
    isNot?: LearningProfileWhereInput
  }

  export type LearningSkillCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
  }

  export type LearningSkillMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
  }

  export type LearningSkillMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
  }

  export type LearningSpecializationCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
  }

  export type LearningSpecializationMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
  }

  export type LearningSpecializationMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
  }

  export type LearningMetricCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
  }

  export type LearningMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
  }

  export type LearningMetricMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
  }

  export type CollaborationParticipantListRelationFilter = {
    every?: CollaborationParticipantWhereInput
    some?: CollaborationParticipantWhereInput
    none?: CollaborationParticipantWhereInput
  }

  export type CollaborationMessageListRelationFilter = {
    every?: CollaborationMessageWhereInput
    some?: CollaborationMessageWhereInput
    none?: CollaborationMessageWhereInput
  }

  export type CollaborationParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollaborationMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollaborationSessionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    context?: SortOrder
    workflow?: SortOrder
    protocol?: SortOrder
    metrics?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollaborationSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    context?: SortOrder
    workflow?: SortOrder
    protocol?: SortOrder
    metrics?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollaborationSessionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    context?: SortOrder
    workflow?: SortOrder
    protocol?: SortOrder
    metrics?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollaborationSessionRelationFilter = {
    is?: CollaborationSessionWhereInput
    isNot?: CollaborationSessionWhereInput
  }

  export type CollaborationParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    agentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    contribution?: SortOrder
    feedback?: SortOrder
    timestamp?: SortOrder
  }

  export type CollaborationParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    agentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    contribution?: SortOrder
    feedback?: SortOrder
    timestamp?: SortOrder
  }

  export type CollaborationParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    agentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    contribution?: SortOrder
    feedback?: SortOrder
    timestamp?: SortOrder
  }

  export type CollaborationMessageCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type CollaborationMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type CollaborationMessageMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AgentCreateNestedManyWithoutProjectInput = {
    create?: XOR<AgentCreateWithoutProjectInput, AgentUncheckedCreateWithoutProjectInput> | AgentCreateWithoutProjectInput[] | AgentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutProjectInput | AgentCreateOrConnectWithoutProjectInput[]
    createMany?: AgentCreateManyProjectInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectContextCreateNestedOneWithoutProjectInput = {
    create?: XOR<ProjectContextCreateWithoutProjectInput, ProjectContextUncheckedCreateWithoutProjectInput>
    connectOrCreate?: ProjectContextCreateOrConnectWithoutProjectInput
    connect?: ProjectContextWhereUniqueInput
  }

  export type AgentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<AgentCreateWithoutProjectInput, AgentUncheckedCreateWithoutProjectInput> | AgentCreateWithoutProjectInput[] | AgentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutProjectInput | AgentCreateOrConnectWithoutProjectInput[]
    createMany?: AgentCreateManyProjectInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectContextUncheckedCreateNestedOneWithoutProjectInput = {
    create?: XOR<ProjectContextCreateWithoutProjectInput, ProjectContextUncheckedCreateWithoutProjectInput>
    connectOrCreate?: ProjectContextCreateOrConnectWithoutProjectInput
    connect?: ProjectContextWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AgentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<AgentCreateWithoutProjectInput, AgentUncheckedCreateWithoutProjectInput> | AgentCreateWithoutProjectInput[] | AgentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutProjectInput | AgentCreateOrConnectWithoutProjectInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutProjectInput | AgentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: AgentCreateManyProjectInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutProjectInput | AgentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutProjectInput | AgentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectContextUpdateOneWithoutProjectNestedInput = {
    create?: XOR<ProjectContextCreateWithoutProjectInput, ProjectContextUncheckedCreateWithoutProjectInput>
    connectOrCreate?: ProjectContextCreateOrConnectWithoutProjectInput
    upsert?: ProjectContextUpsertWithoutProjectInput
    disconnect?: ProjectContextWhereInput | boolean
    delete?: ProjectContextWhereInput | boolean
    connect?: ProjectContextWhereUniqueInput
    update?: XOR<XOR<ProjectContextUpdateToOneWithWhereWithoutProjectInput, ProjectContextUpdateWithoutProjectInput>, ProjectContextUncheckedUpdateWithoutProjectInput>
  }

  export type AgentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<AgentCreateWithoutProjectInput, AgentUncheckedCreateWithoutProjectInput> | AgentCreateWithoutProjectInput[] | AgentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutProjectInput | AgentCreateOrConnectWithoutProjectInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutProjectInput | AgentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: AgentCreateManyProjectInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutProjectInput | AgentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutProjectInput | AgentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectContextUncheckedUpdateOneWithoutProjectNestedInput = {
    create?: XOR<ProjectContextCreateWithoutProjectInput, ProjectContextUncheckedCreateWithoutProjectInput>
    connectOrCreate?: ProjectContextCreateOrConnectWithoutProjectInput
    upsert?: ProjectContextUpsertWithoutProjectInput
    disconnect?: ProjectContextWhereInput | boolean
    delete?: ProjectContextWhereInput | boolean
    connect?: ProjectContextWhereUniqueInput
    update?: XOR<XOR<ProjectContextUpdateToOneWithWhereWithoutProjectInput, ProjectContextUpdateWithoutProjectInput>, ProjectContextUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectCreateNestedOneWithoutAgentsInput = {
    create?: XOR<ProjectCreateWithoutAgentsInput, ProjectUncheckedCreateWithoutAgentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAgentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutAgentInput = {
    create?: XOR<TaskCreateWithoutAgentInput, TaskUncheckedCreateWithoutAgentInput> | TaskCreateWithoutAgentInput[] | TaskUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAgentInput | TaskCreateOrConnectWithoutAgentInput[]
    createMany?: TaskCreateManyAgentInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type AgentStateCreateNestedOneWithoutAgentInput = {
    create?: XOR<AgentStateCreateWithoutAgentInput, AgentStateUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentStateCreateOrConnectWithoutAgentInput
    connect?: AgentStateWhereUniqueInput
  }

  export type LearningProfileCreateNestedOneWithoutAgentInput = {
    create?: XOR<LearningProfileCreateWithoutAgentInput, LearningProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutAgentInput
    connect?: LearningProfileWhereUniqueInput
  }

  export type TaskUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<TaskCreateWithoutAgentInput, TaskUncheckedCreateWithoutAgentInput> | TaskCreateWithoutAgentInput[] | TaskUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAgentInput | TaskCreateOrConnectWithoutAgentInput[]
    createMany?: TaskCreateManyAgentInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type AgentStateUncheckedCreateNestedOneWithoutAgentInput = {
    create?: XOR<AgentStateCreateWithoutAgentInput, AgentStateUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentStateCreateOrConnectWithoutAgentInput
    connect?: AgentStateWhereUniqueInput
  }

  export type LearningProfileUncheckedCreateNestedOneWithoutAgentInput = {
    create?: XOR<LearningProfileCreateWithoutAgentInput, LearningProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutAgentInput
    connect?: LearningProfileWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutAgentsNestedInput = {
    create?: XOR<ProjectCreateWithoutAgentsInput, ProjectUncheckedCreateWithoutAgentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAgentsInput
    upsert?: ProjectUpsertWithoutAgentsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutAgentsInput, ProjectUpdateWithoutAgentsInput>, ProjectUncheckedUpdateWithoutAgentsInput>
  }

  export type TaskUpdateManyWithoutAgentNestedInput = {
    create?: XOR<TaskCreateWithoutAgentInput, TaskUncheckedCreateWithoutAgentInput> | TaskCreateWithoutAgentInput[] | TaskUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAgentInput | TaskCreateOrConnectWithoutAgentInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAgentInput | TaskUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: TaskCreateManyAgentInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAgentInput | TaskUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAgentInput | TaskUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type AgentStateUpdateOneWithoutAgentNestedInput = {
    create?: XOR<AgentStateCreateWithoutAgentInput, AgentStateUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentStateCreateOrConnectWithoutAgentInput
    upsert?: AgentStateUpsertWithoutAgentInput
    disconnect?: AgentStateWhereInput | boolean
    delete?: AgentStateWhereInput | boolean
    connect?: AgentStateWhereUniqueInput
    update?: XOR<XOR<AgentStateUpdateToOneWithWhereWithoutAgentInput, AgentStateUpdateWithoutAgentInput>, AgentStateUncheckedUpdateWithoutAgentInput>
  }

  export type LearningProfileUpdateOneWithoutAgentNestedInput = {
    create?: XOR<LearningProfileCreateWithoutAgentInput, LearningProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutAgentInput
    upsert?: LearningProfileUpsertWithoutAgentInput
    disconnect?: LearningProfileWhereInput | boolean
    delete?: LearningProfileWhereInput | boolean
    connect?: LearningProfileWhereUniqueInput
    update?: XOR<XOR<LearningProfileUpdateToOneWithWhereWithoutAgentInput, LearningProfileUpdateWithoutAgentInput>, LearningProfileUncheckedUpdateWithoutAgentInput>
  }

  export type TaskUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<TaskCreateWithoutAgentInput, TaskUncheckedCreateWithoutAgentInput> | TaskCreateWithoutAgentInput[] | TaskUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAgentInput | TaskCreateOrConnectWithoutAgentInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAgentInput | TaskUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: TaskCreateManyAgentInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAgentInput | TaskUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAgentInput | TaskUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type AgentStateUncheckedUpdateOneWithoutAgentNestedInput = {
    create?: XOR<AgentStateCreateWithoutAgentInput, AgentStateUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentStateCreateOrConnectWithoutAgentInput
    upsert?: AgentStateUpsertWithoutAgentInput
    disconnect?: AgentStateWhereInput | boolean
    delete?: AgentStateWhereInput | boolean
    connect?: AgentStateWhereUniqueInput
    update?: XOR<XOR<AgentStateUpdateToOneWithWhereWithoutAgentInput, AgentStateUpdateWithoutAgentInput>, AgentStateUncheckedUpdateWithoutAgentInput>
  }

  export type LearningProfileUncheckedUpdateOneWithoutAgentNestedInput = {
    create?: XOR<LearningProfileCreateWithoutAgentInput, LearningProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutAgentInput
    upsert?: LearningProfileUpsertWithoutAgentInput
    disconnect?: LearningProfileWhereInput | boolean
    delete?: LearningProfileWhereInput | boolean
    connect?: LearningProfileWhereUniqueInput
    update?: XOR<XOR<LearningProfileUpdateToOneWithWhereWithoutAgentInput, LearningProfileUpdateWithoutAgentInput>, LearningProfileUncheckedUpdateWithoutAgentInput>
  }

  export type AgentCreateNestedOneWithoutStateInput = {
    create?: XOR<AgentCreateWithoutStateInput, AgentUncheckedCreateWithoutStateInput>
    connectOrCreate?: AgentCreateOrConnectWithoutStateInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutStateNestedInput = {
    create?: XOR<AgentCreateWithoutStateInput, AgentUncheckedCreateWithoutStateInput>
    connectOrCreate?: AgentCreateOrConnectWithoutStateInput
    upsert?: AgentUpsertWithoutStateInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutStateInput, AgentUpdateWithoutStateInput>, AgentUncheckedUpdateWithoutStateInput>
  }

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type AgentCreateNestedOneWithoutTasksInput = {
    create?: XOR<AgentCreateWithoutTasksInput, AgentUncheckedCreateWithoutTasksInput>
    connectOrCreate?: AgentCreateOrConnectWithoutTasksInput
    connect?: AgentWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    upsert?: ProjectUpsertWithoutTasksInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTasksInput, ProjectUpdateWithoutTasksInput>, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type AgentUpdateOneWithoutTasksNestedInput = {
    create?: XOR<AgentCreateWithoutTasksInput, AgentUncheckedCreateWithoutTasksInput>
    connectOrCreate?: AgentCreateOrConnectWithoutTasksInput
    upsert?: AgentUpsertWithoutTasksInput
    disconnect?: AgentWhereInput | boolean
    delete?: AgentWhereInput | boolean
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutTasksInput, AgentUpdateWithoutTasksInput>, AgentUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectCreateNestedOneWithoutContextInput = {
    create?: XOR<ProjectCreateWithoutContextInput, ProjectUncheckedCreateWithoutContextInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutContextInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutContextNestedInput = {
    create?: XOR<ProjectCreateWithoutContextInput, ProjectUncheckedCreateWithoutContextInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutContextInput
    upsert?: ProjectUpsertWithoutContextInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutContextInput, ProjectUpdateWithoutContextInput>, ProjectUncheckedUpdateWithoutContextInput>
  }

  export type AgentCreateNestedOneWithoutLearningProfileInput = {
    create?: XOR<AgentCreateWithoutLearningProfileInput, AgentUncheckedCreateWithoutLearningProfileInput>
    connectOrCreate?: AgentCreateOrConnectWithoutLearningProfileInput
    connect?: AgentWhereUniqueInput
  }

  export type LearningSkillCreateNestedManyWithoutProfileInput = {
    create?: XOR<LearningSkillCreateWithoutProfileInput, LearningSkillUncheckedCreateWithoutProfileInput> | LearningSkillCreateWithoutProfileInput[] | LearningSkillUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSkillCreateOrConnectWithoutProfileInput | LearningSkillCreateOrConnectWithoutProfileInput[]
    createMany?: LearningSkillCreateManyProfileInputEnvelope
    connect?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
  }

  export type LearningSpecializationCreateNestedManyWithoutProfileInput = {
    create?: XOR<LearningSpecializationCreateWithoutProfileInput, LearningSpecializationUncheckedCreateWithoutProfileInput> | LearningSpecializationCreateWithoutProfileInput[] | LearningSpecializationUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSpecializationCreateOrConnectWithoutProfileInput | LearningSpecializationCreateOrConnectWithoutProfileInput[]
    createMany?: LearningSpecializationCreateManyProfileInputEnvelope
    connect?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
  }

  export type LearningMetricCreateNestedManyWithoutProfileInput = {
    create?: XOR<LearningMetricCreateWithoutProfileInput, LearningMetricUncheckedCreateWithoutProfileInput> | LearningMetricCreateWithoutProfileInput[] | LearningMetricUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningMetricCreateOrConnectWithoutProfileInput | LearningMetricCreateOrConnectWithoutProfileInput[]
    createMany?: LearningMetricCreateManyProfileInputEnvelope
    connect?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
  }

  export type LearningSkillUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<LearningSkillCreateWithoutProfileInput, LearningSkillUncheckedCreateWithoutProfileInput> | LearningSkillCreateWithoutProfileInput[] | LearningSkillUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSkillCreateOrConnectWithoutProfileInput | LearningSkillCreateOrConnectWithoutProfileInput[]
    createMany?: LearningSkillCreateManyProfileInputEnvelope
    connect?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
  }

  export type LearningSpecializationUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<LearningSpecializationCreateWithoutProfileInput, LearningSpecializationUncheckedCreateWithoutProfileInput> | LearningSpecializationCreateWithoutProfileInput[] | LearningSpecializationUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSpecializationCreateOrConnectWithoutProfileInput | LearningSpecializationCreateOrConnectWithoutProfileInput[]
    createMany?: LearningSpecializationCreateManyProfileInputEnvelope
    connect?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
  }

  export type LearningMetricUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<LearningMetricCreateWithoutProfileInput, LearningMetricUncheckedCreateWithoutProfileInput> | LearningMetricCreateWithoutProfileInput[] | LearningMetricUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningMetricCreateOrConnectWithoutProfileInput | LearningMetricCreateOrConnectWithoutProfileInput[]
    createMany?: LearningMetricCreateManyProfileInputEnvelope
    connect?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgentUpdateOneRequiredWithoutLearningProfileNestedInput = {
    create?: XOR<AgentCreateWithoutLearningProfileInput, AgentUncheckedCreateWithoutLearningProfileInput>
    connectOrCreate?: AgentCreateOrConnectWithoutLearningProfileInput
    upsert?: AgentUpsertWithoutLearningProfileInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutLearningProfileInput, AgentUpdateWithoutLearningProfileInput>, AgentUncheckedUpdateWithoutLearningProfileInput>
  }

  export type LearningSkillUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LearningSkillCreateWithoutProfileInput, LearningSkillUncheckedCreateWithoutProfileInput> | LearningSkillCreateWithoutProfileInput[] | LearningSkillUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSkillCreateOrConnectWithoutProfileInput | LearningSkillCreateOrConnectWithoutProfileInput[]
    upsert?: LearningSkillUpsertWithWhereUniqueWithoutProfileInput | LearningSkillUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LearningSkillCreateManyProfileInputEnvelope
    set?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    disconnect?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    delete?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    connect?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    update?: LearningSkillUpdateWithWhereUniqueWithoutProfileInput | LearningSkillUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LearningSkillUpdateManyWithWhereWithoutProfileInput | LearningSkillUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LearningSkillScalarWhereInput | LearningSkillScalarWhereInput[]
  }

  export type LearningSpecializationUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LearningSpecializationCreateWithoutProfileInput, LearningSpecializationUncheckedCreateWithoutProfileInput> | LearningSpecializationCreateWithoutProfileInput[] | LearningSpecializationUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSpecializationCreateOrConnectWithoutProfileInput | LearningSpecializationCreateOrConnectWithoutProfileInput[]
    upsert?: LearningSpecializationUpsertWithWhereUniqueWithoutProfileInput | LearningSpecializationUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LearningSpecializationCreateManyProfileInputEnvelope
    set?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    disconnect?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    delete?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    connect?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    update?: LearningSpecializationUpdateWithWhereUniqueWithoutProfileInput | LearningSpecializationUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LearningSpecializationUpdateManyWithWhereWithoutProfileInput | LearningSpecializationUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LearningSpecializationScalarWhereInput | LearningSpecializationScalarWhereInput[]
  }

  export type LearningMetricUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LearningMetricCreateWithoutProfileInput, LearningMetricUncheckedCreateWithoutProfileInput> | LearningMetricCreateWithoutProfileInput[] | LearningMetricUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningMetricCreateOrConnectWithoutProfileInput | LearningMetricCreateOrConnectWithoutProfileInput[]
    upsert?: LearningMetricUpsertWithWhereUniqueWithoutProfileInput | LearningMetricUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LearningMetricCreateManyProfileInputEnvelope
    set?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    disconnect?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    delete?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    connect?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    update?: LearningMetricUpdateWithWhereUniqueWithoutProfileInput | LearningMetricUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LearningMetricUpdateManyWithWhereWithoutProfileInput | LearningMetricUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LearningMetricScalarWhereInput | LearningMetricScalarWhereInput[]
  }

  export type LearningSkillUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LearningSkillCreateWithoutProfileInput, LearningSkillUncheckedCreateWithoutProfileInput> | LearningSkillCreateWithoutProfileInput[] | LearningSkillUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSkillCreateOrConnectWithoutProfileInput | LearningSkillCreateOrConnectWithoutProfileInput[]
    upsert?: LearningSkillUpsertWithWhereUniqueWithoutProfileInput | LearningSkillUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LearningSkillCreateManyProfileInputEnvelope
    set?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    disconnect?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    delete?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    connect?: LearningSkillWhereUniqueInput | LearningSkillWhereUniqueInput[]
    update?: LearningSkillUpdateWithWhereUniqueWithoutProfileInput | LearningSkillUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LearningSkillUpdateManyWithWhereWithoutProfileInput | LearningSkillUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LearningSkillScalarWhereInput | LearningSkillScalarWhereInput[]
  }

  export type LearningSpecializationUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LearningSpecializationCreateWithoutProfileInput, LearningSpecializationUncheckedCreateWithoutProfileInput> | LearningSpecializationCreateWithoutProfileInput[] | LearningSpecializationUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningSpecializationCreateOrConnectWithoutProfileInput | LearningSpecializationCreateOrConnectWithoutProfileInput[]
    upsert?: LearningSpecializationUpsertWithWhereUniqueWithoutProfileInput | LearningSpecializationUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LearningSpecializationCreateManyProfileInputEnvelope
    set?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    disconnect?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    delete?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    connect?: LearningSpecializationWhereUniqueInput | LearningSpecializationWhereUniqueInput[]
    update?: LearningSpecializationUpdateWithWhereUniqueWithoutProfileInput | LearningSpecializationUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LearningSpecializationUpdateManyWithWhereWithoutProfileInput | LearningSpecializationUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LearningSpecializationScalarWhereInput | LearningSpecializationScalarWhereInput[]
  }

  export type LearningMetricUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LearningMetricCreateWithoutProfileInput, LearningMetricUncheckedCreateWithoutProfileInput> | LearningMetricCreateWithoutProfileInput[] | LearningMetricUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LearningMetricCreateOrConnectWithoutProfileInput | LearningMetricCreateOrConnectWithoutProfileInput[]
    upsert?: LearningMetricUpsertWithWhereUniqueWithoutProfileInput | LearningMetricUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LearningMetricCreateManyProfileInputEnvelope
    set?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    disconnect?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    delete?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    connect?: LearningMetricWhereUniqueInput | LearningMetricWhereUniqueInput[]
    update?: LearningMetricUpdateWithWhereUniqueWithoutProfileInput | LearningMetricUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LearningMetricUpdateManyWithWhereWithoutProfileInput | LearningMetricUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LearningMetricScalarWhereInput | LearningMetricScalarWhereInput[]
  }

  export type LearningProfileCreateNestedOneWithoutSkillsInput = {
    create?: XOR<LearningProfileCreateWithoutSkillsInput, LearningProfileUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutSkillsInput
    connect?: LearningProfileWhereUniqueInput
  }

  export type LearningProfileUpdateOneRequiredWithoutSkillsNestedInput = {
    create?: XOR<LearningProfileCreateWithoutSkillsInput, LearningProfileUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutSkillsInput
    upsert?: LearningProfileUpsertWithoutSkillsInput
    connect?: LearningProfileWhereUniqueInput
    update?: XOR<XOR<LearningProfileUpdateToOneWithWhereWithoutSkillsInput, LearningProfileUpdateWithoutSkillsInput>, LearningProfileUncheckedUpdateWithoutSkillsInput>
  }

  export type LearningProfileCreateNestedOneWithoutSpecializationsInput = {
    create?: XOR<LearningProfileCreateWithoutSpecializationsInput, LearningProfileUncheckedCreateWithoutSpecializationsInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutSpecializationsInput
    connect?: LearningProfileWhereUniqueInput
  }

  export type LearningProfileUpdateOneRequiredWithoutSpecializationsNestedInput = {
    create?: XOR<LearningProfileCreateWithoutSpecializationsInput, LearningProfileUncheckedCreateWithoutSpecializationsInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutSpecializationsInput
    upsert?: LearningProfileUpsertWithoutSpecializationsInput
    connect?: LearningProfileWhereUniqueInput
    update?: XOR<XOR<LearningProfileUpdateToOneWithWhereWithoutSpecializationsInput, LearningProfileUpdateWithoutSpecializationsInput>, LearningProfileUncheckedUpdateWithoutSpecializationsInput>
  }

  export type LearningProfileCreateNestedOneWithoutMetricsInput = {
    create?: XOR<LearningProfileCreateWithoutMetricsInput, LearningProfileUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutMetricsInput
    connect?: LearningProfileWhereUniqueInput
  }

  export type LearningProfileUpdateOneRequiredWithoutMetricsNestedInput = {
    create?: XOR<LearningProfileCreateWithoutMetricsInput, LearningProfileUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: LearningProfileCreateOrConnectWithoutMetricsInput
    upsert?: LearningProfileUpsertWithoutMetricsInput
    connect?: LearningProfileWhereUniqueInput
    update?: XOR<XOR<LearningProfileUpdateToOneWithWhereWithoutMetricsInput, LearningProfileUpdateWithoutMetricsInput>, LearningProfileUncheckedUpdateWithoutMetricsInput>
  }

  export type CollaborationParticipantCreateNestedManyWithoutSessionInput = {
    create?: XOR<CollaborationParticipantCreateWithoutSessionInput, CollaborationParticipantUncheckedCreateWithoutSessionInput> | CollaborationParticipantCreateWithoutSessionInput[] | CollaborationParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationParticipantCreateOrConnectWithoutSessionInput | CollaborationParticipantCreateOrConnectWithoutSessionInput[]
    createMany?: CollaborationParticipantCreateManySessionInputEnvelope
    connect?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
  }

  export type CollaborationMessageCreateNestedManyWithoutSessionInput = {
    create?: XOR<CollaborationMessageCreateWithoutSessionInput, CollaborationMessageUncheckedCreateWithoutSessionInput> | CollaborationMessageCreateWithoutSessionInput[] | CollaborationMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationMessageCreateOrConnectWithoutSessionInput | CollaborationMessageCreateOrConnectWithoutSessionInput[]
    createMany?: CollaborationMessageCreateManySessionInputEnvelope
    connect?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
  }

  export type CollaborationParticipantUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<CollaborationParticipantCreateWithoutSessionInput, CollaborationParticipantUncheckedCreateWithoutSessionInput> | CollaborationParticipantCreateWithoutSessionInput[] | CollaborationParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationParticipantCreateOrConnectWithoutSessionInput | CollaborationParticipantCreateOrConnectWithoutSessionInput[]
    createMany?: CollaborationParticipantCreateManySessionInputEnvelope
    connect?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
  }

  export type CollaborationMessageUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<CollaborationMessageCreateWithoutSessionInput, CollaborationMessageUncheckedCreateWithoutSessionInput> | CollaborationMessageCreateWithoutSessionInput[] | CollaborationMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationMessageCreateOrConnectWithoutSessionInput | CollaborationMessageCreateOrConnectWithoutSessionInput[]
    createMany?: CollaborationMessageCreateManySessionInputEnvelope
    connect?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
  }

  export type CollaborationParticipantUpdateManyWithoutSessionNestedInput = {
    create?: XOR<CollaborationParticipantCreateWithoutSessionInput, CollaborationParticipantUncheckedCreateWithoutSessionInput> | CollaborationParticipantCreateWithoutSessionInput[] | CollaborationParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationParticipantCreateOrConnectWithoutSessionInput | CollaborationParticipantCreateOrConnectWithoutSessionInput[]
    upsert?: CollaborationParticipantUpsertWithWhereUniqueWithoutSessionInput | CollaborationParticipantUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: CollaborationParticipantCreateManySessionInputEnvelope
    set?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    disconnect?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    delete?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    connect?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    update?: CollaborationParticipantUpdateWithWhereUniqueWithoutSessionInput | CollaborationParticipantUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: CollaborationParticipantUpdateManyWithWhereWithoutSessionInput | CollaborationParticipantUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: CollaborationParticipantScalarWhereInput | CollaborationParticipantScalarWhereInput[]
  }

  export type CollaborationMessageUpdateManyWithoutSessionNestedInput = {
    create?: XOR<CollaborationMessageCreateWithoutSessionInput, CollaborationMessageUncheckedCreateWithoutSessionInput> | CollaborationMessageCreateWithoutSessionInput[] | CollaborationMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationMessageCreateOrConnectWithoutSessionInput | CollaborationMessageCreateOrConnectWithoutSessionInput[]
    upsert?: CollaborationMessageUpsertWithWhereUniqueWithoutSessionInput | CollaborationMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: CollaborationMessageCreateManySessionInputEnvelope
    set?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    disconnect?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    delete?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    connect?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    update?: CollaborationMessageUpdateWithWhereUniqueWithoutSessionInput | CollaborationMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: CollaborationMessageUpdateManyWithWhereWithoutSessionInput | CollaborationMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: CollaborationMessageScalarWhereInput | CollaborationMessageScalarWhereInput[]
  }

  export type CollaborationParticipantUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<CollaborationParticipantCreateWithoutSessionInput, CollaborationParticipantUncheckedCreateWithoutSessionInput> | CollaborationParticipantCreateWithoutSessionInput[] | CollaborationParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationParticipantCreateOrConnectWithoutSessionInput | CollaborationParticipantCreateOrConnectWithoutSessionInput[]
    upsert?: CollaborationParticipantUpsertWithWhereUniqueWithoutSessionInput | CollaborationParticipantUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: CollaborationParticipantCreateManySessionInputEnvelope
    set?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    disconnect?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    delete?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    connect?: CollaborationParticipantWhereUniqueInput | CollaborationParticipantWhereUniqueInput[]
    update?: CollaborationParticipantUpdateWithWhereUniqueWithoutSessionInput | CollaborationParticipantUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: CollaborationParticipantUpdateManyWithWhereWithoutSessionInput | CollaborationParticipantUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: CollaborationParticipantScalarWhereInput | CollaborationParticipantScalarWhereInput[]
  }

  export type CollaborationMessageUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<CollaborationMessageCreateWithoutSessionInput, CollaborationMessageUncheckedCreateWithoutSessionInput> | CollaborationMessageCreateWithoutSessionInput[] | CollaborationMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CollaborationMessageCreateOrConnectWithoutSessionInput | CollaborationMessageCreateOrConnectWithoutSessionInput[]
    upsert?: CollaborationMessageUpsertWithWhereUniqueWithoutSessionInput | CollaborationMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: CollaborationMessageCreateManySessionInputEnvelope
    set?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    disconnect?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    delete?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    connect?: CollaborationMessageWhereUniqueInput | CollaborationMessageWhereUniqueInput[]
    update?: CollaborationMessageUpdateWithWhereUniqueWithoutSessionInput | CollaborationMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: CollaborationMessageUpdateManyWithWhereWithoutSessionInput | CollaborationMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: CollaborationMessageScalarWhereInput | CollaborationMessageScalarWhereInput[]
  }

  export type CollaborationSessionCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<CollaborationSessionCreateWithoutParticipantsInput, CollaborationSessionUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: CollaborationSessionCreateOrConnectWithoutParticipantsInput
    connect?: CollaborationSessionWhereUniqueInput
  }

  export type CollaborationSessionUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<CollaborationSessionCreateWithoutParticipantsInput, CollaborationSessionUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: CollaborationSessionCreateOrConnectWithoutParticipantsInput
    upsert?: CollaborationSessionUpsertWithoutParticipantsInput
    connect?: CollaborationSessionWhereUniqueInput
    update?: XOR<XOR<CollaborationSessionUpdateToOneWithWhereWithoutParticipantsInput, CollaborationSessionUpdateWithoutParticipantsInput>, CollaborationSessionUncheckedUpdateWithoutParticipantsInput>
  }

  export type CollaborationSessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<CollaborationSessionCreateWithoutMessagesInput, CollaborationSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CollaborationSessionCreateOrConnectWithoutMessagesInput
    connect?: CollaborationSessionWhereUniqueInput
  }

  export type CollaborationSessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<CollaborationSessionCreateWithoutMessagesInput, CollaborationSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CollaborationSessionCreateOrConnectWithoutMessagesInput
    upsert?: CollaborationSessionUpsertWithoutMessagesInput
    connect?: CollaborationSessionWhereUniqueInput
    update?: XOR<XOR<CollaborationSessionUpdateToOneWithWhereWithoutMessagesInput, CollaborationSessionUpdateWithoutMessagesInput>, CollaborationSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AgentCreateWithoutProjectInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutAgentInput
    state?: AgentStateCreateNestedOneWithoutAgentInput
    learningProfile?: LearningProfileCreateNestedOneWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutAgentInput
    state?: AgentStateUncheckedCreateNestedOneWithoutAgentInput
    learningProfile?: LearningProfileUncheckedCreateNestedOneWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutProjectInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutProjectInput, AgentUncheckedCreateWithoutProjectInput>
  }

  export type AgentCreateManyProjectInputEnvelope = {
    data: AgentCreateManyProjectInput | AgentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    agent?: AgentCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    agentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ProjectContextCreateWithoutProjectInput = {
    id?: string
    architecture?: string
    technical?: string
    requirements?: string
    dependencies?: string
    updatedAt?: Date | string
  }

  export type ProjectContextUncheckedCreateWithoutProjectInput = {
    id?: string
    architecture?: string
    technical?: string
    requirements?: string
    dependencies?: string
    updatedAt?: Date | string
  }

  export type ProjectContextCreateOrConnectWithoutProjectInput = {
    where: ProjectContextWhereUniqueInput
    create: XOR<ProjectContextCreateWithoutProjectInput, ProjectContextUncheckedCreateWithoutProjectInput>
  }

  export type AgentUpsertWithWhereUniqueWithoutProjectInput = {
    where: AgentWhereUniqueInput
    update: XOR<AgentUpdateWithoutProjectInput, AgentUncheckedUpdateWithoutProjectInput>
    create: XOR<AgentCreateWithoutProjectInput, AgentUncheckedCreateWithoutProjectInput>
  }

  export type AgentUpdateWithWhereUniqueWithoutProjectInput = {
    where: AgentWhereUniqueInput
    data: XOR<AgentUpdateWithoutProjectInput, AgentUncheckedUpdateWithoutProjectInput>
  }

  export type AgentUpdateManyWithWhereWithoutProjectInput = {
    where: AgentScalarWhereInput
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyWithoutProjectInput>
  }

  export type AgentScalarWhereInput = {
    AND?: AgentScalarWhereInput | AgentScalarWhereInput[]
    OR?: AgentScalarWhereInput[]
    NOT?: AgentScalarWhereInput | AgentScalarWhereInput[]
    id?: StringFilter<"Agent"> | string
    name?: StringFilter<"Agent"> | string
    role?: StringFilter<"Agent"> | string
    provider?: StringFilter<"Agent"> | string
    model?: StringFilter<"Agent"> | string
    systemPrompt?: StringFilter<"Agent"> | string
    projectId?: StringFilter<"Agent"> | string
    createdAt?: DateTimeFilter<"Agent"> | Date | string
    updatedAt?: DateTimeFilter<"Agent"> | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    dependencies?: StringFilter<"Task"> | string
    projectId?: StringFilter<"Task"> | string
    agentId?: StringNullableFilter<"Task"> | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
  }

  export type ProjectContextUpsertWithoutProjectInput = {
    update: XOR<ProjectContextUpdateWithoutProjectInput, ProjectContextUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectContextCreateWithoutProjectInput, ProjectContextUncheckedCreateWithoutProjectInput>
    where?: ProjectContextWhereInput
  }

  export type ProjectContextUpdateToOneWithWhereWithoutProjectInput = {
    where?: ProjectContextWhereInput
    data: XOR<ProjectContextUpdateWithoutProjectInput, ProjectContextUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectContextUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    architecture?: StringFieldUpdateOperationsInput | string
    technical?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectContextUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    architecture?: StringFieldUpdateOperationsInput | string
    technical?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateWithoutAgentsInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    context?: ProjectContextCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAgentsInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    context?: ProjectContextUncheckedCreateNestedOneWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAgentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAgentsInput, ProjectUncheckedCreateWithoutAgentsInput>
  }

  export type TaskCreateWithoutAgentInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAgentInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutAgentInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAgentInput, TaskUncheckedCreateWithoutAgentInput>
  }

  export type TaskCreateManyAgentInputEnvelope = {
    data: TaskCreateManyAgentInput | TaskCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type AgentStateCreateWithoutAgentInput = {
    id?: string
    context?: string
    shortTerm?: string
    longTerm?: string
    currentTask?: string | null
    updatedAt?: Date | string
  }

  export type AgentStateUncheckedCreateWithoutAgentInput = {
    id?: string
    context?: string
    shortTerm?: string
    longTerm?: string
    currentTask?: string | null
    updatedAt?: Date | string
  }

  export type AgentStateCreateOrConnectWithoutAgentInput = {
    where: AgentStateWhereUniqueInput
    create: XOR<AgentStateCreateWithoutAgentInput, AgentStateUncheckedCreateWithoutAgentInput>
  }

  export type LearningProfileCreateWithoutAgentInput = {
    id?: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    skills?: LearningSkillCreateNestedManyWithoutProfileInput
    specializations?: LearningSpecializationCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileUncheckedCreateWithoutAgentInput = {
    id?: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    skills?: LearningSkillUncheckedCreateNestedManyWithoutProfileInput
    specializations?: LearningSpecializationUncheckedCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricUncheckedCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileCreateOrConnectWithoutAgentInput = {
    where: LearningProfileWhereUniqueInput
    create: XOR<LearningProfileCreateWithoutAgentInput, LearningProfileUncheckedCreateWithoutAgentInput>
  }

  export type ProjectUpsertWithoutAgentsInput = {
    update: XOR<ProjectUpdateWithoutAgentsInput, ProjectUncheckedUpdateWithoutAgentsInput>
    create: XOR<ProjectCreateWithoutAgentsInput, ProjectUncheckedCreateWithoutAgentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutAgentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutAgentsInput, ProjectUncheckedUpdateWithoutAgentsInput>
  }

  export type ProjectUpdateWithoutAgentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    context?: ProjectContextUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAgentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    context?: ProjectContextUncheckedUpdateOneWithoutProjectNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutAgentInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAgentInput, TaskUncheckedUpdateWithoutAgentInput>
    create: XOR<TaskCreateWithoutAgentInput, TaskUncheckedCreateWithoutAgentInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAgentInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAgentInput, TaskUncheckedUpdateWithoutAgentInput>
  }

  export type TaskUpdateManyWithWhereWithoutAgentInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAgentInput>
  }

  export type AgentStateUpsertWithoutAgentInput = {
    update: XOR<AgentStateUpdateWithoutAgentInput, AgentStateUncheckedUpdateWithoutAgentInput>
    create: XOR<AgentStateCreateWithoutAgentInput, AgentStateUncheckedCreateWithoutAgentInput>
    where?: AgentStateWhereInput
  }

  export type AgentStateUpdateToOneWithWhereWithoutAgentInput = {
    where?: AgentStateWhereInput
    data: XOR<AgentStateUpdateWithoutAgentInput, AgentStateUncheckedUpdateWithoutAgentInput>
  }

  export type AgentStateUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    shortTerm?: StringFieldUpdateOperationsInput | string
    longTerm?: StringFieldUpdateOperationsInput | string
    currentTask?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentStateUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    shortTerm?: StringFieldUpdateOperationsInput | string
    longTerm?: StringFieldUpdateOperationsInput | string
    currentTask?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningProfileUpsertWithoutAgentInput = {
    update: XOR<LearningProfileUpdateWithoutAgentInput, LearningProfileUncheckedUpdateWithoutAgentInput>
    create: XOR<LearningProfileCreateWithoutAgentInput, LearningProfileUncheckedCreateWithoutAgentInput>
    where?: LearningProfileWhereInput
  }

  export type LearningProfileUpdateToOneWithWhereWithoutAgentInput = {
    where?: LearningProfileWhereInput
    data: XOR<LearningProfileUpdateWithoutAgentInput, LearningProfileUncheckedUpdateWithoutAgentInput>
  }

  export type LearningProfileUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    skills?: LearningSkillUpdateManyWithoutProfileNestedInput
    specializations?: LearningSpecializationUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    skills?: LearningSkillUncheckedUpdateManyWithoutProfileNestedInput
    specializations?: LearningSpecializationUncheckedUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type AgentCreateWithoutStateInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAgentsInput
    tasks?: TaskCreateNestedManyWithoutAgentInput
    learningProfile?: LearningProfileCreateNestedOneWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutStateInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutAgentInput
    learningProfile?: LearningProfileUncheckedCreateNestedOneWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutStateInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutStateInput, AgentUncheckedCreateWithoutStateInput>
  }

  export type AgentUpsertWithoutStateInput = {
    update: XOR<AgentUpdateWithoutStateInput, AgentUncheckedUpdateWithoutStateInput>
    create: XOR<AgentCreateWithoutStateInput, AgentUncheckedCreateWithoutStateInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutStateInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutStateInput, AgentUncheckedUpdateWithoutStateInput>
  }

  export type AgentUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAgentsNestedInput
    tasks?: TaskUpdateManyWithoutAgentNestedInput
    learningProfile?: LearningProfileUpdateOneWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutAgentNestedInput
    learningProfile?: LearningProfileUncheckedUpdateOneWithoutAgentNestedInput
  }

  export type ProjectCreateWithoutTasksInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agents?: AgentCreateNestedManyWithoutProjectInput
    context?: ProjectContextCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agents?: AgentUncheckedCreateNestedManyWithoutProjectInput
    context?: ProjectContextUncheckedCreateNestedOneWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
  }

  export type AgentCreateWithoutTasksInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAgentsInput
    state?: AgentStateCreateNestedOneWithoutAgentInput
    learningProfile?: LearningProfileCreateNestedOneWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: AgentStateUncheckedCreateNestedOneWithoutAgentInput
    learningProfile?: LearningProfileUncheckedCreateNestedOneWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutTasksInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutTasksInput, AgentUncheckedCreateWithoutTasksInput>
  }

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agents?: AgentUpdateManyWithoutProjectNestedInput
    context?: ProjectContextUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agents?: AgentUncheckedUpdateManyWithoutProjectNestedInput
    context?: ProjectContextUncheckedUpdateOneWithoutProjectNestedInput
  }

  export type AgentUpsertWithoutTasksInput = {
    update: XOR<AgentUpdateWithoutTasksInput, AgentUncheckedUpdateWithoutTasksInput>
    create: XOR<AgentCreateWithoutTasksInput, AgentUncheckedCreateWithoutTasksInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutTasksInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutTasksInput, AgentUncheckedUpdateWithoutTasksInput>
  }

  export type AgentUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAgentsNestedInput
    state?: AgentStateUpdateOneWithoutAgentNestedInput
    learningProfile?: LearningProfileUpdateOneWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: AgentStateUncheckedUpdateOneWithoutAgentNestedInput
    learningProfile?: LearningProfileUncheckedUpdateOneWithoutAgentNestedInput
  }

  export type ProjectCreateWithoutContextInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agents?: AgentCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutContextInput = {
    id?: string
    name: string
    description: string
    status?: string
    repository?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agents?: AgentUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutContextInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutContextInput, ProjectUncheckedCreateWithoutContextInput>
  }

  export type ProjectUpsertWithoutContextInput = {
    update: XOR<ProjectUpdateWithoutContextInput, ProjectUncheckedUpdateWithoutContextInput>
    create: XOR<ProjectCreateWithoutContextInput, ProjectUncheckedCreateWithoutContextInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutContextInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutContextInput, ProjectUncheckedUpdateWithoutContextInput>
  }

  export type ProjectUpdateWithoutContextInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agents?: AgentUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutContextInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    repository?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agents?: AgentUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type AgentCreateWithoutLearningProfileInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAgentsInput
    tasks?: TaskCreateNestedManyWithoutAgentInput
    state?: AgentStateCreateNestedOneWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutLearningProfileInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutAgentInput
    state?: AgentStateUncheckedCreateNestedOneWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutLearningProfileInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutLearningProfileInput, AgentUncheckedCreateWithoutLearningProfileInput>
  }

  export type LearningSkillCreateWithoutProfileInput = {
    id?: string
    data: string
  }

  export type LearningSkillUncheckedCreateWithoutProfileInput = {
    id?: string
    data: string
  }

  export type LearningSkillCreateOrConnectWithoutProfileInput = {
    where: LearningSkillWhereUniqueInput
    create: XOR<LearningSkillCreateWithoutProfileInput, LearningSkillUncheckedCreateWithoutProfileInput>
  }

  export type LearningSkillCreateManyProfileInputEnvelope = {
    data: LearningSkillCreateManyProfileInput | LearningSkillCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type LearningSpecializationCreateWithoutProfileInput = {
    id?: string
    data: string
  }

  export type LearningSpecializationUncheckedCreateWithoutProfileInput = {
    id?: string
    data: string
  }

  export type LearningSpecializationCreateOrConnectWithoutProfileInput = {
    where: LearningSpecializationWhereUniqueInput
    create: XOR<LearningSpecializationCreateWithoutProfileInput, LearningSpecializationUncheckedCreateWithoutProfileInput>
  }

  export type LearningSpecializationCreateManyProfileInputEnvelope = {
    data: LearningSpecializationCreateManyProfileInput | LearningSpecializationCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type LearningMetricCreateWithoutProfileInput = {
    id?: string
    data: string
    timestamp?: Date | string
  }

  export type LearningMetricUncheckedCreateWithoutProfileInput = {
    id?: string
    data: string
    timestamp?: Date | string
  }

  export type LearningMetricCreateOrConnectWithoutProfileInput = {
    where: LearningMetricWhereUniqueInput
    create: XOR<LearningMetricCreateWithoutProfileInput, LearningMetricUncheckedCreateWithoutProfileInput>
  }

  export type LearningMetricCreateManyProfileInputEnvelope = {
    data: LearningMetricCreateManyProfileInput | LearningMetricCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type AgentUpsertWithoutLearningProfileInput = {
    update: XOR<AgentUpdateWithoutLearningProfileInput, AgentUncheckedUpdateWithoutLearningProfileInput>
    create: XOR<AgentCreateWithoutLearningProfileInput, AgentUncheckedCreateWithoutLearningProfileInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutLearningProfileInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutLearningProfileInput, AgentUncheckedUpdateWithoutLearningProfileInput>
  }

  export type AgentUpdateWithoutLearningProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAgentsNestedInput
    tasks?: TaskUpdateManyWithoutAgentNestedInput
    state?: AgentStateUpdateOneWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutLearningProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutAgentNestedInput
    state?: AgentStateUncheckedUpdateOneWithoutAgentNestedInput
  }

  export type LearningSkillUpsertWithWhereUniqueWithoutProfileInput = {
    where: LearningSkillWhereUniqueInput
    update: XOR<LearningSkillUpdateWithoutProfileInput, LearningSkillUncheckedUpdateWithoutProfileInput>
    create: XOR<LearningSkillCreateWithoutProfileInput, LearningSkillUncheckedCreateWithoutProfileInput>
  }

  export type LearningSkillUpdateWithWhereUniqueWithoutProfileInput = {
    where: LearningSkillWhereUniqueInput
    data: XOR<LearningSkillUpdateWithoutProfileInput, LearningSkillUncheckedUpdateWithoutProfileInput>
  }

  export type LearningSkillUpdateManyWithWhereWithoutProfileInput = {
    where: LearningSkillScalarWhereInput
    data: XOR<LearningSkillUpdateManyMutationInput, LearningSkillUncheckedUpdateManyWithoutProfileInput>
  }

  export type LearningSkillScalarWhereInput = {
    AND?: LearningSkillScalarWhereInput | LearningSkillScalarWhereInput[]
    OR?: LearningSkillScalarWhereInput[]
    NOT?: LearningSkillScalarWhereInput | LearningSkillScalarWhereInput[]
    id?: StringFilter<"LearningSkill"> | string
    profileId?: StringFilter<"LearningSkill"> | string
    data?: StringFilter<"LearningSkill"> | string
  }

  export type LearningSpecializationUpsertWithWhereUniqueWithoutProfileInput = {
    where: LearningSpecializationWhereUniqueInput
    update: XOR<LearningSpecializationUpdateWithoutProfileInput, LearningSpecializationUncheckedUpdateWithoutProfileInput>
    create: XOR<LearningSpecializationCreateWithoutProfileInput, LearningSpecializationUncheckedCreateWithoutProfileInput>
  }

  export type LearningSpecializationUpdateWithWhereUniqueWithoutProfileInput = {
    where: LearningSpecializationWhereUniqueInput
    data: XOR<LearningSpecializationUpdateWithoutProfileInput, LearningSpecializationUncheckedUpdateWithoutProfileInput>
  }

  export type LearningSpecializationUpdateManyWithWhereWithoutProfileInput = {
    where: LearningSpecializationScalarWhereInput
    data: XOR<LearningSpecializationUpdateManyMutationInput, LearningSpecializationUncheckedUpdateManyWithoutProfileInput>
  }

  export type LearningSpecializationScalarWhereInput = {
    AND?: LearningSpecializationScalarWhereInput | LearningSpecializationScalarWhereInput[]
    OR?: LearningSpecializationScalarWhereInput[]
    NOT?: LearningSpecializationScalarWhereInput | LearningSpecializationScalarWhereInput[]
    id?: StringFilter<"LearningSpecialization"> | string
    profileId?: StringFilter<"LearningSpecialization"> | string
    data?: StringFilter<"LearningSpecialization"> | string
  }

  export type LearningMetricUpsertWithWhereUniqueWithoutProfileInput = {
    where: LearningMetricWhereUniqueInput
    update: XOR<LearningMetricUpdateWithoutProfileInput, LearningMetricUncheckedUpdateWithoutProfileInput>
    create: XOR<LearningMetricCreateWithoutProfileInput, LearningMetricUncheckedCreateWithoutProfileInput>
  }

  export type LearningMetricUpdateWithWhereUniqueWithoutProfileInput = {
    where: LearningMetricWhereUniqueInput
    data: XOR<LearningMetricUpdateWithoutProfileInput, LearningMetricUncheckedUpdateWithoutProfileInput>
  }

  export type LearningMetricUpdateManyWithWhereWithoutProfileInput = {
    where: LearningMetricScalarWhereInput
    data: XOR<LearningMetricUpdateManyMutationInput, LearningMetricUncheckedUpdateManyWithoutProfileInput>
  }

  export type LearningMetricScalarWhereInput = {
    AND?: LearningMetricScalarWhereInput | LearningMetricScalarWhereInput[]
    OR?: LearningMetricScalarWhereInput[]
    NOT?: LearningMetricScalarWhereInput | LearningMetricScalarWhereInput[]
    id?: StringFilter<"LearningMetric"> | string
    profileId?: StringFilter<"LearningMetric"> | string
    data?: StringFilter<"LearningMetric"> | string
    timestamp?: DateTimeFilter<"LearningMetric"> | Date | string
  }

  export type LearningProfileCreateWithoutSkillsInput = {
    id?: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    agent: AgentCreateNestedOneWithoutLearningProfileInput
    specializations?: LearningSpecializationCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileUncheckedCreateWithoutSkillsInput = {
    id?: string
    agentId: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    specializations?: LearningSpecializationUncheckedCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricUncheckedCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileCreateOrConnectWithoutSkillsInput = {
    where: LearningProfileWhereUniqueInput
    create: XOR<LearningProfileCreateWithoutSkillsInput, LearningProfileUncheckedCreateWithoutSkillsInput>
  }

  export type LearningProfileUpsertWithoutSkillsInput = {
    update: XOR<LearningProfileUpdateWithoutSkillsInput, LearningProfileUncheckedUpdateWithoutSkillsInput>
    create: XOR<LearningProfileCreateWithoutSkillsInput, LearningProfileUncheckedCreateWithoutSkillsInput>
    where?: LearningProfileWhereInput
  }

  export type LearningProfileUpdateToOneWithWhereWithoutSkillsInput = {
    where?: LearningProfileWhereInput
    data: XOR<LearningProfileUpdateWithoutSkillsInput, LearningProfileUncheckedUpdateWithoutSkillsInput>
  }

  export type LearningProfileUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutLearningProfileNestedInput
    specializations?: LearningSpecializationUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    specializations?: LearningSpecializationUncheckedUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileCreateWithoutSpecializationsInput = {
    id?: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    agent: AgentCreateNestedOneWithoutLearningProfileInput
    skills?: LearningSkillCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileUncheckedCreateWithoutSpecializationsInput = {
    id?: string
    agentId: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    skills?: LearningSkillUncheckedCreateNestedManyWithoutProfileInput
    metrics?: LearningMetricUncheckedCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileCreateOrConnectWithoutSpecializationsInput = {
    where: LearningProfileWhereUniqueInput
    create: XOR<LearningProfileCreateWithoutSpecializationsInput, LearningProfileUncheckedCreateWithoutSpecializationsInput>
  }

  export type LearningProfileUpsertWithoutSpecializationsInput = {
    update: XOR<LearningProfileUpdateWithoutSpecializationsInput, LearningProfileUncheckedUpdateWithoutSpecializationsInput>
    create: XOR<LearningProfileCreateWithoutSpecializationsInput, LearningProfileUncheckedCreateWithoutSpecializationsInput>
    where?: LearningProfileWhereInput
  }

  export type LearningProfileUpdateToOneWithWhereWithoutSpecializationsInput = {
    where?: LearningProfileWhereInput
    data: XOR<LearningProfileUpdateWithoutSpecializationsInput, LearningProfileUncheckedUpdateWithoutSpecializationsInput>
  }

  export type LearningProfileUpdateWithoutSpecializationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutLearningProfileNestedInput
    skills?: LearningSkillUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileUncheckedUpdateWithoutSpecializationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    skills?: LearningSkillUncheckedUpdateManyWithoutProfileNestedInput
    metrics?: LearningMetricUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileCreateWithoutMetricsInput = {
    id?: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    agent: AgentCreateNestedOneWithoutLearningProfileInput
    skills?: LearningSkillCreateNestedManyWithoutProfileInput
    specializations?: LearningSpecializationCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileUncheckedCreateWithoutMetricsInput = {
    id?: string
    agentId: string
    totalTasks?: number
    successfulTasks?: number
    failedTasks?: number
    averageMetrics?: string
    learningRate?: number
    lastUpdated?: Date | string
    skills?: LearningSkillUncheckedCreateNestedManyWithoutProfileInput
    specializations?: LearningSpecializationUncheckedCreateNestedManyWithoutProfileInput
  }

  export type LearningProfileCreateOrConnectWithoutMetricsInput = {
    where: LearningProfileWhereUniqueInput
    create: XOR<LearningProfileCreateWithoutMetricsInput, LearningProfileUncheckedCreateWithoutMetricsInput>
  }

  export type LearningProfileUpsertWithoutMetricsInput = {
    update: XOR<LearningProfileUpdateWithoutMetricsInput, LearningProfileUncheckedUpdateWithoutMetricsInput>
    create: XOR<LearningProfileCreateWithoutMetricsInput, LearningProfileUncheckedCreateWithoutMetricsInput>
    where?: LearningProfileWhereInput
  }

  export type LearningProfileUpdateToOneWithWhereWithoutMetricsInput = {
    where?: LearningProfileWhereInput
    data: XOR<LearningProfileUpdateWithoutMetricsInput, LearningProfileUncheckedUpdateWithoutMetricsInput>
  }

  export type LearningProfileUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutLearningProfileNestedInput
    skills?: LearningSkillUpdateManyWithoutProfileNestedInput
    specializations?: LearningSpecializationUpdateManyWithoutProfileNestedInput
  }

  export type LearningProfileUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    totalTasks?: IntFieldUpdateOperationsInput | number
    successfulTasks?: IntFieldUpdateOperationsInput | number
    failedTasks?: IntFieldUpdateOperationsInput | number
    averageMetrics?: StringFieldUpdateOperationsInput | string
    learningRate?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    skills?: LearningSkillUncheckedUpdateManyWithoutProfileNestedInput
    specializations?: LearningSpecializationUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type CollaborationParticipantCreateWithoutSessionInput = {
    id?: string
    agentId: string
    role: string
    status: string
    contribution?: string | null
    feedback?: string | null
    timestamp: Date | string
  }

  export type CollaborationParticipantUncheckedCreateWithoutSessionInput = {
    id?: string
    agentId: string
    role: string
    status: string
    contribution?: string | null
    feedback?: string | null
    timestamp: Date | string
  }

  export type CollaborationParticipantCreateOrConnectWithoutSessionInput = {
    where: CollaborationParticipantWhereUniqueInput
    create: XOR<CollaborationParticipantCreateWithoutSessionInput, CollaborationParticipantUncheckedCreateWithoutSessionInput>
  }

  export type CollaborationParticipantCreateManySessionInputEnvelope = {
    data: CollaborationParticipantCreateManySessionInput | CollaborationParticipantCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type CollaborationMessageCreateWithoutSessionInput = {
    id?: string
    senderId: string
    recipientId?: string | null
    type: string
    content: string
    metadata: string
    createdAt?: Date | string
  }

  export type CollaborationMessageUncheckedCreateWithoutSessionInput = {
    id?: string
    senderId: string
    recipientId?: string | null
    type: string
    content: string
    metadata: string
    createdAt?: Date | string
  }

  export type CollaborationMessageCreateOrConnectWithoutSessionInput = {
    where: CollaborationMessageWhereUniqueInput
    create: XOR<CollaborationMessageCreateWithoutSessionInput, CollaborationMessageUncheckedCreateWithoutSessionInput>
  }

  export type CollaborationMessageCreateManySessionInputEnvelope = {
    data: CollaborationMessageCreateManySessionInput | CollaborationMessageCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type CollaborationParticipantUpsertWithWhereUniqueWithoutSessionInput = {
    where: CollaborationParticipantWhereUniqueInput
    update: XOR<CollaborationParticipantUpdateWithoutSessionInput, CollaborationParticipantUncheckedUpdateWithoutSessionInput>
    create: XOR<CollaborationParticipantCreateWithoutSessionInput, CollaborationParticipantUncheckedCreateWithoutSessionInput>
  }

  export type CollaborationParticipantUpdateWithWhereUniqueWithoutSessionInput = {
    where: CollaborationParticipantWhereUniqueInput
    data: XOR<CollaborationParticipantUpdateWithoutSessionInput, CollaborationParticipantUncheckedUpdateWithoutSessionInput>
  }

  export type CollaborationParticipantUpdateManyWithWhereWithoutSessionInput = {
    where: CollaborationParticipantScalarWhereInput
    data: XOR<CollaborationParticipantUpdateManyMutationInput, CollaborationParticipantUncheckedUpdateManyWithoutSessionInput>
  }

  export type CollaborationParticipantScalarWhereInput = {
    AND?: CollaborationParticipantScalarWhereInput | CollaborationParticipantScalarWhereInput[]
    OR?: CollaborationParticipantScalarWhereInput[]
    NOT?: CollaborationParticipantScalarWhereInput | CollaborationParticipantScalarWhereInput[]
    id?: StringFilter<"CollaborationParticipant"> | string
    sessionId?: StringFilter<"CollaborationParticipant"> | string
    agentId?: StringFilter<"CollaborationParticipant"> | string
    role?: StringFilter<"CollaborationParticipant"> | string
    status?: StringFilter<"CollaborationParticipant"> | string
    contribution?: StringNullableFilter<"CollaborationParticipant"> | string | null
    feedback?: StringNullableFilter<"CollaborationParticipant"> | string | null
    timestamp?: DateTimeFilter<"CollaborationParticipant"> | Date | string
  }

  export type CollaborationMessageUpsertWithWhereUniqueWithoutSessionInput = {
    where: CollaborationMessageWhereUniqueInput
    update: XOR<CollaborationMessageUpdateWithoutSessionInput, CollaborationMessageUncheckedUpdateWithoutSessionInput>
    create: XOR<CollaborationMessageCreateWithoutSessionInput, CollaborationMessageUncheckedCreateWithoutSessionInput>
  }

  export type CollaborationMessageUpdateWithWhereUniqueWithoutSessionInput = {
    where: CollaborationMessageWhereUniqueInput
    data: XOR<CollaborationMessageUpdateWithoutSessionInput, CollaborationMessageUncheckedUpdateWithoutSessionInput>
  }

  export type CollaborationMessageUpdateManyWithWhereWithoutSessionInput = {
    where: CollaborationMessageScalarWhereInput
    data: XOR<CollaborationMessageUpdateManyMutationInput, CollaborationMessageUncheckedUpdateManyWithoutSessionInput>
  }

  export type CollaborationMessageScalarWhereInput = {
    AND?: CollaborationMessageScalarWhereInput | CollaborationMessageScalarWhereInput[]
    OR?: CollaborationMessageScalarWhereInput[]
    NOT?: CollaborationMessageScalarWhereInput | CollaborationMessageScalarWhereInput[]
    id?: StringFilter<"CollaborationMessage"> | string
    sessionId?: StringFilter<"CollaborationMessage"> | string
    senderId?: StringFilter<"CollaborationMessage"> | string
    recipientId?: StringNullableFilter<"CollaborationMessage"> | string | null
    type?: StringFilter<"CollaborationMessage"> | string
    content?: StringFilter<"CollaborationMessage"> | string
    metadata?: StringFilter<"CollaborationMessage"> | string
    createdAt?: DateTimeFilter<"CollaborationMessage"> | Date | string
  }

  export type CollaborationSessionCreateWithoutParticipantsInput = {
    id?: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: CollaborationMessageCreateNestedManyWithoutSessionInput
  }

  export type CollaborationSessionUncheckedCreateWithoutParticipantsInput = {
    id?: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: CollaborationMessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CollaborationSessionCreateOrConnectWithoutParticipantsInput = {
    where: CollaborationSessionWhereUniqueInput
    create: XOR<CollaborationSessionCreateWithoutParticipantsInput, CollaborationSessionUncheckedCreateWithoutParticipantsInput>
  }

  export type CollaborationSessionUpsertWithoutParticipantsInput = {
    update: XOR<CollaborationSessionUpdateWithoutParticipantsInput, CollaborationSessionUncheckedUpdateWithoutParticipantsInput>
    create: XOR<CollaborationSessionCreateWithoutParticipantsInput, CollaborationSessionUncheckedCreateWithoutParticipantsInput>
    where?: CollaborationSessionWhereInput
  }

  export type CollaborationSessionUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: CollaborationSessionWhereInput
    data: XOR<CollaborationSessionUpdateWithoutParticipantsInput, CollaborationSessionUncheckedUpdateWithoutParticipantsInput>
  }

  export type CollaborationSessionUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: CollaborationMessageUpdateManyWithoutSessionNestedInput
  }

  export type CollaborationSessionUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: CollaborationMessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type CollaborationSessionCreateWithoutMessagesInput = {
    id?: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: CollaborationParticipantCreateNestedManyWithoutSessionInput
  }

  export type CollaborationSessionUncheckedCreateWithoutMessagesInput = {
    id?: string
    type: string
    status: string
    context: string
    workflow: string
    protocol: string
    metrics?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: CollaborationParticipantUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CollaborationSessionCreateOrConnectWithoutMessagesInput = {
    where: CollaborationSessionWhereUniqueInput
    create: XOR<CollaborationSessionCreateWithoutMessagesInput, CollaborationSessionUncheckedCreateWithoutMessagesInput>
  }

  export type CollaborationSessionUpsertWithoutMessagesInput = {
    update: XOR<CollaborationSessionUpdateWithoutMessagesInput, CollaborationSessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<CollaborationSessionCreateWithoutMessagesInput, CollaborationSessionUncheckedCreateWithoutMessagesInput>
    where?: CollaborationSessionWhereInput
  }

  export type CollaborationSessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: CollaborationSessionWhereInput
    data: XOR<CollaborationSessionUpdateWithoutMessagesInput, CollaborationSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type CollaborationSessionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: CollaborationParticipantUpdateManyWithoutSessionNestedInput
  }

  export type CollaborationSessionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    workflow?: StringFieldUpdateOperationsInput | string
    protocol?: StringFieldUpdateOperationsInput | string
    metrics?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: CollaborationParticipantUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type AgentCreateManyProjectInput = {
    id?: string
    name: string
    role: string
    provider: string
    model: string
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManyProjectInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    agentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutAgentNestedInput
    state?: AgentStateUpdateOneWithoutAgentNestedInput
    learningProfile?: LearningProfileUpdateOneWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutAgentNestedInput
    state?: AgentStateUncheckedUpdateOneWithoutAgentNestedInput
    learningProfile?: LearningProfileUncheckedUpdateOneWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyAgentInput = {
    id?: string
    title: string
    description: string
    status: string
    priority: string
    dependencies?: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningSkillCreateManyProfileInput = {
    id?: string
    data: string
  }

  export type LearningSpecializationCreateManyProfileInput = {
    id?: string
    data: string
  }

  export type LearningMetricCreateManyProfileInput = {
    id?: string
    data: string
    timestamp?: Date | string
  }

  export type LearningSkillUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSkillUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSkillUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSpecializationUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSpecializationUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningSpecializationUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type LearningMetricUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningMetricUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningMetricUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationParticipantCreateManySessionInput = {
    id?: string
    agentId: string
    role: string
    status: string
    contribution?: string | null
    feedback?: string | null
    timestamp: Date | string
  }

  export type CollaborationMessageCreateManySessionInput = {
    id?: string
    senderId: string
    recipientId?: string | null
    type: string
    content: string
    metadata: string
    createdAt?: Date | string
  }

  export type CollaborationParticipantUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationParticipantUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationParticipantUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationMessageUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationMessageUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationMessageUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgentCountOutputTypeDefaultArgs instead
     */
    export type AgentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LearningProfileCountOutputTypeDefaultArgs instead
     */
    export type LearningProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LearningProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollaborationSessionCountOutputTypeDefaultArgs instead
     */
    export type CollaborationSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaborationSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgentDefaultArgs instead
     */
    export type AgentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgentStateDefaultArgs instead
     */
    export type AgentStateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgentStateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectContextDefaultArgs instead
     */
    export type ProjectContextArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectContextDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LearningProfileDefaultArgs instead
     */
    export type LearningProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LearningProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LearningSkillDefaultArgs instead
     */
    export type LearningSkillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LearningSkillDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LearningSpecializationDefaultArgs instead
     */
    export type LearningSpecializationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LearningSpecializationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LearningMetricDefaultArgs instead
     */
    export type LearningMetricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LearningMetricDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollaborationSessionDefaultArgs instead
     */
    export type CollaborationSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaborationSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollaborationParticipantDefaultArgs instead
     */
    export type CollaborationParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaborationParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollaborationMessageDefaultArgs instead
     */
    export type CollaborationMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaborationMessageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
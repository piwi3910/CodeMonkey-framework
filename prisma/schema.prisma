generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Project and Agent Models
model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agents      Agent[]
  tasks       Task[]
  context     ProjectContext?
}

model Agent {
  id              String           @id @default(uuid())
  name            String
  role            String
  provider        String
  model           String
  systemPrompt    String
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id])
  tasks           Task[]
  state           AgentState?
  learningProfile LearningProfile?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model AgentState {
  id        String   @id @default(uuid())
  agentId   String   @unique
  agent     Agent    @relation(fields: [agentId], references: [id])
  context   String   @default("{}")
  shortTerm String   @default("[]")
  longTerm  String   @default("[]")
  updatedAt DateTime @updatedAt
}

model Task {
  id           String      @id @default(uuid())
  title        String
  description  String
  status       String
  priority     String
  dependencies String
  projectId    String
  project      Project     @relation(fields: [projectId], references: [id])
  agentId      String?
  agent        Agent?      @relation(fields: [agentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model ProjectContext {
  id            String   @id @default(uuid())
  projectId     String   @unique
  project       Project  @relation(fields: [projectId], references: [id])
  architecture  String   @default("{}")
  technical     String   @default("{}")
  requirements  String   @default("{}")
  dependencies  String   @default("{}")
  updatedAt     DateTime @updatedAt
}

// Learning System Models
model LearningProfile {
  id              String                  @id @default(uuid())
  agentId         String                  @unique
  agent           Agent                   @relation(fields: [agentId], references: [id])
  totalTasks      Int                     @default(0)
  successfulTasks Int                     @default(0)
  failedTasks     Int                     @default(0)
  averageMetrics  String                  @default("{}")
  learningRate    Float                   @default(1)
  lastUpdated     DateTime                @default(now())
  skills          LearningSkill[]
  specializations LearningSpecialization[]
  metrics         LearningMetric[]
}

model LearningSkill {
  id        String          @id @default(uuid())
  profileId String
  profile   LearningProfile @relation(fields: [profileId], references: [id])
  data      String
}

model LearningSpecialization {
  id        String          @id @default(uuid())
  profileId String
  profile   LearningProfile @relation(fields: [profileId], references: [id])
  data      String
}

model LearningMetric {
  id        String          @id @default(uuid())
  profileId String
  profile   LearningProfile @relation(fields: [profileId], references: [id])
  data      String
  timestamp DateTime        @default(now())
}

// Collaboration System Models
model CollaborationSession {
  id           String                     @id @default(uuid())
  type         String
  status       String
  context      String
  workflow     String
  protocol     String
  metrics      String?
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  participants CollaborationParticipant[]
  messages     CollaborationMessage[]
}

model CollaborationParticipant {
  id           String               @id @default(uuid())
  sessionId    String
  session      CollaborationSession @relation(fields: [sessionId], references: [id])
  agentId      String
  role         String
  status       String
  contribution String?
  feedback     String?
  timestamp    DateTime
}

model CollaborationMessage {
  id          String               @id @default(uuid())
  sessionId   String
  session     CollaborationSession @relation(fields: [sessionId], references: [id])
  senderId    String
  recipientId String?
  type        String
  content     String
  metadata    String
  createdAt   DateTime             @default(now())
}